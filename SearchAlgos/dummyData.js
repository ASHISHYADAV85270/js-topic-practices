export const data = {
  appName: "okta",
  scimTypes: {
    oktaUser: {
      type: "object",
      schema: {
        id: {
          type: "string",
          optional: false,
          description:
            "A unique identifier for a SCIM resource as defined by the service provider. Each representation of the resource MUST include anon-empty id value. This identifier MUST be unique across the SCIM service provider's entire set of resources.  It MUST be a stable, non-reassignable identifier that does not change when the same resource is returned in subsequent requests. The value of the id attribute is always issued by the service provider and MUST NOT be specified by the client.",
        },
        userName: {
          type: "string",
          optional: false,
          description:
            "Unique identifier for the User, typically used by the user to directly authenticate to the service provider. Each User MUST include a non-empty userName value. This identifier MUST be unique across the service provider's entire set of Users. REQUIRED.",
        },
        title: {
          type: "string",
          optional: true,
          description: "The employees title.",
        },
        profileUrl: {
          type: "string",
          optional: true,
          description:
            "A fully qualified URL to a page representing the User's online profile.",
        },
        name: {
          type: "object",
          schema: {
            middleName: {
              type: "string",
              optional: true,
              description: "middleName",
            },
            givenName: {
              type: "string",
              optional: false,
              description:
                "The given name of the User, or first name in most Western languages (e.g., 'Barbara' given the full name 'Ms. Barbara J Jensen, III').",
            },
            familyName: {
              type: "string",
              optional: false,
              description:
                "The family name of the User, or last name in most Western languages (e.g., 'Jensen' given the full name 'Ms. Barbara J Jensen, III').",
            },
            honorificPrefix: {
              type: "string",
              optional: true,
              description:
                "The honorific prefix(es) of the User, or title in most Western languages (e.g., 'Ms.' given the full name 'Ms. Barbara J Jensen, III').",
            },
            honorificSuffix: {
              type: "string",
              optional: true,
              description:
                "The honorific suffix(es) of the User, or suffix in most Western languages (e.g., 'III' given the full name 'Ms. Barbara J Jensen, III').",
            },
            formatted: {
              type: "string",
              optional: true,
              description:
                "The full name, including all middle names, titles, and suffixes as appropriate, formatted for display (e.g., 'Ms. Barbara J Jensen, III').",
            },
          },
          description:
            "The components of the user's real name. Providers MAY return just the full name as a single string in the formatted sub-attribute, or they MAY return just the individual component attributes using the other sub-attributes, or they MAY return both. If both variants are returned, they SHOULD be describing the same name, with the formatted name indicating how the component attributes should be combined.",
        },
        password: {
          type: "string",
          optional: true,
          description:
            "The User's cleartext password. This attribute is intended to be used as a means to specify an initial password when creating a new User or to reset an existing User's password.",
        },
        emails: {
          type: "array",
          items: {
            type: "object",
            schema: {
              value: {
                type: "string",
                optional: true,
                description:
                  "Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.",
              },
              type: {
                type: "string",
                optional: true,
                description:
                  "A label indicating the attribute's function, e.g., 'work' or 'home'.",
              },
              primary: {
                type: "boolean",
                optional: true,
                description:
                  "A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred mailing address or primary email address. The primary attribute value 'true' MUST appear no more than once.",
              },
            },
          },
          description:
            "Email addresses for the user. The value SHOULD be canonicalized by the service provider, e.g., 'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'. Canonical type values of 'work', 'home', and 'other'.",
        },
        active: {
          type: "boolean",
          optional: false,
          description:
            "A Boolean value indicating the User's administrative status.",
        },
        phoneNumbers: {
          type: "array",
          items: {
            type: "object",
            schema: {
              value: {
                type: "string",
                optional: false,
                description:
                  "Phone numbers for the User. The value SHOULD be canonicalized by the Service Provider according to format in RFC3966 e.g. 'tel:+1-201-555-0123'. Canonical Type values of work, home, mobile, fax, pager and other.",
              },
              type: {
                type: "string",
                optional: true,
                description:
                  "A label indicating the attribute’s function; e.g., 'work' or 'home'.",
              },
              primary: {
                type: "boolean",
                optional: true,
                description:
                  "A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g. the preferred mailing address or primary e-mail address. The primary attribute value 'true' MUST appear no more than once.",
              },
            },
          },
          description:
            "Phone numbers for the User. The value SHOULD be canonicalized by the Service Provider according to format in RFC3966 e.g. 'tel:+1-201-555-0123'. Canonical Type values of work, home, mobile, fax, pager and other.",
        },
        displayName: {
          type: "string",
          optional: true,
          description:
            "The name of the User, suitable for display to end-users. Each User returned MAY include a non-empty displayName value. The name SHOULD be the full name of the User being described if known (e.g. Babs Jensen or Ms. Barbara J Jensen, III), but MAY be a username or handle, if that is all that is available (e.g. bjensen). The value provided SHOULD be the primary textual label by which this User is normally displayed by the Service Provider when presenting it to end-users.",
        },
        addresses: {
          type: "array",
          items: {
            type: "object",
            schema: {
              streetAddress: {
                type: "string",
                optional: true,
                description:
                  "The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information. This attribute MAY contain newlines.",
              },
              locality: {
                type: "string",
                optional: true,
                description: "The city or locality component.",
              },
              region: {
                type: "string",
                optional: true,
                description: "The state or region component.",
              },
              postalCode: {
                type: "string",
                optional: true,
                description: "The zipcode or postal code component.",
              },
              country: {
                type: "string",
                optional: true,
                description:
                  'The country name component. When specified the value MUST be in ISO 3166-1 alpha 2 "short" code format; e.g., the United States and Sweden are "US" and "SE", respectively.',
              },
              type: {
                type: "string",
                optional: true,
                description:
                  "A label indicating the attribute’s function; e.g., 'work' or 'home'.",
              },
              primary: {
                type: "boolean",
                optional: true,
                description:
                  "A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g. the preferred mailing address or primary e-mail address. The primary attribute value 'true' MUST appear no more than once.",
              },
              formatted: {
                type: "string",
                optional: true,
                description:
                  "The full mailing address, formatted for display or use with a mailing label. This attribute MAY contain newlines.",
              },
            },
          },
          description:
            "A physical mailing address for this User. Canonical Type Values of work, home, and other. The value attribute is a complex type with the following sub-attributes. All Sub-Attributes are OPTIONAL.",
        },
        preferredLanguage: {
          type: "string",
          optional: true,
          description:
            "Indicates the User's preferred written or spoken language. Generally used for selecting a localized User interface. Valid values are concatenation of the ISO 639-1 two letter language code, an underscore, and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language English and country US.",
        },
        locale: {
          type: "string",
          optional: true,
          description:
            "Used to indicate the User's default location for purposes of localizing items such as currency, date time format, numerical representations, etc. A locale value is a concatenation of the ISO 639-1 two letter language code, an underscore, and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language English and country US.",
        },
        nickName: {
          type: "string",
          optional: true,
          description:
            'The casual way to address the user in real life, e.g. "Bob" or "Bobby" instead of "Robert". This attribute SHOULD NOT be used to represent a User\'s username (e.g. bjensen or mpepperidge).',
        },
        userType: {
          type: "string",
          optional: true,
          description:
            'Used to identify the organization to user relationship. Typical values used might be "Contractor", "Employee", "Intern", "Temp", "External", and "Unknown" but any value may be used.',
        },
        groups: {
          type: "array",
          items: {
            type: "object",
            schema: {
              value: {
                type: "string",
                optional: true,
                description: "The identifier of the User's group.",
              },
              $ref: {
                type: "string",
                optional: true,
                description:
                  "The URI of the corresponding 'Group' resource to which the user belongs.",
              },
              display: {
                type: "string",
                optional: true,
                description:
                  "A human-readable name, primarily used for display purposes. READ-ONLY.",
              },
              type: {
                type: "string",
                optional: true,
                description:
                  "A label indicating the attribute's function, e.g., 'direct' or 'indirect'.",
              },
            },
          },
          description:
            "A list of groups to which the user belongs, either through direct membership, through nested groups, or dynamically calculated.",
        },
        timezone: {
          type: "string",
          optional: true,
          description:
            "The User's time zone in the \"Olson\" timezone database format; e.g.,'America/Los_Angeles'.",
        },
        roles: {
          type: "array",
          items: {
            type: "object",
            schema: {
              value: {
                type: "string",
                optional: true,
                description: "The value of a role.",
              },
              display: {
                type: "string",
                optional: true,
                description:
                  "A human-readable name, primarily used for display purposes. READ-ONLY.",
              },
              type: {
                type: "string",
                optional: true,
                description: "A label indicating the attribute's function.",
              },
              primary: {
                type: "boolean",
                optional: true,
                description:
                  "A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.",
              },
            },
          },
          description:
            "A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'.",
        },
        entitlements: {
          type: "array",
          items: {
            type: "object",
            schema: {
              value: {
                type: "string",
                optional: true,
                description: "The value of an entitlement.",
              },
              display: {
                type: "string",
                optional: true,
                description:
                  "A human-readable name, primarily used for display purposes. READ-ONLY.",
              },
              type: {
                type: "string",
                optional: true,
                description: "A label indicating the attribute's function.",
              },
              primary: {
                type: "boolean",
                optional: true,
                description:
                  "A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.",
              },
            },
          },
          description:
            "A list of entitlements for the User that represent a thing the User has.",
        },
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
          type: "object",
          schema: {
            employeeNumber: {
              type: "string",
              optional: true,
              description:
                "Numeric or alphanumeric identifier assignedto a person, typically based on order of hire or association with anorganization.",
            },
            costCenter: {
              type: "string",
              optional: true,
              description: "Identifies the name of a cost center.",
            },
            organization: {
              type: "string",
              optional: true,
              description: "Identifies the name of an organization.",
            },
            division: {
              type: "string",
              optional: true,
              description: "Identifies the name of a division.",
            },
            department: {
              type: "string",
              optional: true,
              description: "Identifies the name of a department.",
            },
            manager: {
              type: "object",
              schema: {
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The id of the SCIM resource representing the User's manager.",
                },
                $ref: {
                  type: "string",
                  optional: true,
                  description:
                    "The URI of the SCIM resource representing the User's manager.",
                },
                displayName: {
                  type: "string",
                  optional: true,
                  description:
                    "The displayName of the User's manager.OPTIONAL and READ-ONLY.",
                },
              },
              description:
                "The User's manager. A complex type that optionally allows service providers to represent organizational hierarchy by referencing the 'id' attribute of another User.",
            },
          },
        },
        "urn:ietf:params:scim:schemas:ian:2.0:User": {
          type: "object",
          schema: {
            status: {
              type: "string",
              optional: true,
              description:
                "describes the status of user such as staged, provisioned, active etc",
            },
            lastLogin: {
              type: "dateTime",
              optional: true,
              description: "Last Login date and time of the user",
            },
            statusChanged: {
              type: "dateTime",
              optional: true,
              description: "Status changed date and time for a user",
            },
            passwordChanged: {
              type: "dateTime",
              optional: true,
              description: "Password changed date and time for a user",
            },
            activated: {
              type: "dateTime",
              optional: true,
              description: "Activation date and time for a user",
            },
            credentialType: {
              type: "string",
              optional: true,
              description:
                "Creates a new password less user with FEDERATION authentication provider that must be authenticated via a trusted Identity Provider",
            },
            realmId: {
              type: "string",
              optional: true,
              description: "The ID of the realm in which the user is residing.",
            },
            NAT: {
              type: "string",
              optional: true,
              description: "NAT",
            },
            VEEVATIMESTAMP: {
              type: "string",
              optional: true,
              description: "VEEVATIMESTAMP",
            },
            TRIGGERINGVARIABLE: {
              type: "string",
              optional: true,
              description: "TRIGGERINGVARIABLE",
            },
            ASSIGNTOVEEVA: {
              type: "boolean",
              optional: true,
              description: "ASSIGNTOVEEVA",
            },
            ASSIGNTOVEEVAAPP: {
              type: "string",
              optional: true,
              description: "ASSIGNTOVEEVAAPP",
            },
            roles: {
              type: "string",
              optional: true,
              description: "roles",
            },
            Test: {
              type: "string",
              optional: true,
              description: "Test",
            },
            loginid: {
              type: "string",
              optional: true,
              description: "loginid",
            },
            PersonalTimeZone: {
              type: "string",
              optional: true,
              description: "PersonalTimeZone",
            },
            DecimalNotation: {
              type: "string",
              optional: true,
              description: "DecimalNotation",
            },
            DateFormat: {
              type: "string",
              optional: true,
              description: "DateFormat",
            },
            userEndDate: {
              type: "string",
              optional: true,
              description: "userEndDate",
            },
            UIDGenerator: {
              type: "string",
              optional: true,
              description: "UIDGenerator",
            },
            Contractor_Company_Name: {
              type: "string",
              optional: true,
              description: "Contractor_Company_Name",
            },
            Cost_Center: {
              type: "string",
              optional: true,
              description: "Cost_Center",
            },
            Supervisor_Employee_Number: {
              type: "string",
              optional: true,
              description: "Supervisor_Employee_Number",
            },
            Gender: {
              type: "string",
              optional: true,
              description: "Gender",
            },
            source: {
              type: "string",
              optional: true,
              description: "source",
            },
            Preferred_First_Name: {
              type: "string",
              optional: true,
              description: "Preferred_First_Name",
            },
            Supervisor_Name: {
              type: "string",
              optional: true,
              description: "Supervisor_Name",
            },
            Segment: {
              type: "string",
              optional: true,
              description: "Segment",
            },
            Employee_Status: {
              type: "string",
              optional: true,
              description: "Employee_Status",
            },
            Manager_Flag: {
              type: "string",
              optional: true,
              description: "Manager_Flag",
            },
            Start_Date: {
              type: "string",
              optional: true,
              description: "Start_Date",
            },
            Company_Code: {
              type: "string",
              optional: true,
              description: "Company_Code",
            },
            Preferred_Last_Name: {
              type: "string",
              optional: true,
              description: "Preferred_Last_Name",
            },
            HR_Status: {
              type: "string",
              optional: true,
              description: "HR_Status",
            },
            JobCode: {
              type: "string",
              optional: true,
              description: "JobCode",
            },
            Supervisor_Email: {
              type: "string",
              optional: true,
              description: "Supervisor_Email",
            },
            Project: {
              type: "string",
              optional: true,
              description: "Project",
            },
            Career_Level: {
              type: "string",
              optional: true,
              description: "Career_Level",
            },
            Reporting_Location: {
              type: "string",
              optional: true,
              description: "Reporting_Location",
            },
            Core_Council: {
              type: "string",
              optional: true,
              description: "Core_Council",
            },
            usr_provisioning_date: {
              type: "string",
              optional: true,
              description: "provisioning date",
            },
            usr_deprovisioning_date: {
              type: "string",
              optional: true,
              description: "deprovisioning date",
            },
            Location: {
              type: "string",
              optional: true,
              description: "Location",
            },
            externalId: {
              type: "string",
              optional: true,
              description: "externalId",
            },
            UserSupervisor: {
              type: "string",
              optional: true,
              description: "UserSupervisor",
            },
            personal_email: {
              type: "string",
              optional: true,
              description: "personal_email",
            },
            Ashoksonnad: {
              type: "string",
              optional: true,
              description: "AshoksonnadCustomAttibute",
            },
            OracleIDCSId: {
              type: "string",
              optional: true,
              description: "OracleIDCSId",
            },
            managerUserName: {
              type: "string",
              optional: true,
              description: "managerUserName",
            },
            RACFACCOUNTSTATUS: {
              type: "string",
              optional: true,
              description: "RACFACCOUNTSTATUS",
            },
            RACFAccountStatus: {
              type: "string",
              optional: true,
              description: "RACFAccountStatus",
            },
            twitterUserName: {
              type: "string",
              optional: true,
              description: "dob",
            },
            loginType: {
              type: "string",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            pin: {
              type: "string",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            adtid: {
              type: "string",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            staffType: {
              type: "string",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            ivrId: {
              type: "string",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            userAbbr: {
              type: "string",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            Permission: {
              type: "string",
              optional: true,
              description: "Permission",
            },
            branch: {
              type: "string",
              optional: true,
              description: "branch",
            },
            birthday: {
              type: "string",
              optional: true,
              description: "birthday",
            },
            dateofjoining: {
              type: "string",
              optional: true,
              description: "dateofjoining",
            },
            ous: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "ous",
            },
            customField_Marital_Status: {
              type: "string",
              optional: true,
              description: "customField_Marital_Status",
            },
            CountrySubCode: {
              type: "string",
              optional: true,
              description: "CountrySubCode",
            },
            Employee_Custom1: {
              type: "string",
              optional: true,
              description: "Employee_Custom1",
            },
            Employee_Custom3: {
              type: "string",
              optional: true,
              description: "Employee_Custom3",
            },
            reasonForChange: {
              type: "string",
              optional: true,
              description: "reasonForChange",
            },
            managerExternalId: {
              type: "string",
              optional: true,
              description: "managerExternalId",
            },
            employeeType: {
              type: "string",
              optional: true,
              description: "employeeType",
            },
            passwordOverwrite: {
              type: "string",
              optional: true,
              description: "passwordOverwrite",
            },
            departmentFunction: {
              type: "string",
              optional: true,
              description: "departmentFunction",
            },
            AppLicensing: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "AppLicensing",
            },
            mobileprimaryPhoneType: {
              type: "string",
              optional: true,
              description: "mobileprimaryPhoneType",
            },
            mobileprimaryPhoneTypenew: {
              type: "string",
              optional: true,
              description: "mobileprimaryPhoneTypenew",
            },
            mobile: {
              type: "string",
              optional: true,
              description: "mobile",
            },
            mobilePrimary: {
              type: "string",
              optional: true,
              description: "mobilePrimary",
            },
            score: {
              type: "integer",
              optional: true,
              description: "score",
            },
            id2: {
              type: "string",
              optional: true,
              description: "id2",
            },
            ims: {
              type: "string",
              optional: true,
              description: "ims",
            },
            dashboard: {
              type: "string",
              optional: true,
              description: "Dashboard attribute for Forcura user",
            },
            preferredName_givenName: {
              type: "string",
              optional: true,
              description: "preferredName_givenName",
            },
            eepUdField06: {
              type: "string",
              optional: true,
              description: "eepUdField06",
            },
            eecUDField06: {
              type: "string",
              optional: true,
              description: "eecUDField06",
            },
            mdepartment: {
              type: "string",
              optional: true,
              description: "Mango Department",
            },
            autodesk_teams: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "autodesk_teams",
            },
            autodeskroles: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "Autodesk TTF roles",
            },
            autodeskUserName: {
              type: "string",
              optional: true,
              description: "Autodesk ID - Third Floor",
            },
            mailboxes: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "mailboxes",
            },
            certificateAndCategoryCodes: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "certificateAndCategoryCodes",
            },
            formatted1: {
              type: "string",
              optional: true,
              description: "formatted1",
            },
            homeEmail: {
              type: "string",
              optional: true,
              description: "homeEmail",
            },
            workerTeamListactive1: {
              type: "string",
              optional: true,
              description: "workerTeamListactive1",
            },
            workerId: {
              type: "integer",
              optional: true,
              description: "workerId",
            },
            dateHired: {
              type: "string",
              optional: true,
              description: "dateHired",
            },
            workerBasePayrolleffectiveFrom: {
              type: "string",
              optional: true,
              description: "workerBasePayrolleffectiveFrom",
            },
            mobilesphone: {
              type: "string",
              optional: true,
              description: "mobile1phone",
            },
            isEmailVerified: {
              type: "boolean",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            test1: {
              type: "string",
              optional: true,
              description: "test1",
            },
            aq_partner_domain: {
              type: "string",
              optional: true,
              description: "aq_partner_domain",
            },
            workPhone: {
              type: "string",
              optional: true,
              description: "workPhone",
            },
            positionID: {
              type: "string",
              optional: true,
              description: "positionID",
            },
            terminationDate: {
              type: "string",
              optional: true,
              description: "terminationDate",
            },
            assignedOrganizationalUnitCostNumberShortName: {
              type: "string",
              optional: true,
              description: "assignedOrganizationalUnitCostNumberShortName",
            },
            CustomRolesConcur: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "CustomRolesConcur",
            },
            ConcurRole1: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "ConcurRole1",
            },
            ConcurRoleRamesh: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "ConcurRoleRamesh",
            },
            aqueraStatus: {
              type: "string",
              optional: true,
              description: "aqueraStatus",
            },
            startDate: {
              type: "string",
              optional: true,
              description: "startDate",
            },
            name: {
              type: "string",
              optional: true,
              description: "name",
            },
            kushal_custom: {
              type: "string",
              optional: true,
              description: "kushal_custom",
            },
            kushal_custom_enum: {
              type: "string",
              optional: true,
              description: "kushal_custom_enum",
            },
            subDepartment: {
              type: "string",
              optional: true,
              description: "subDepartment",
            },
            currentSubdepartment: {
              type: "string",
              optional: true,
              description: "Current Subdepartment",
            },
            secondaryEmail: {
              type: "string",
              optional: true,
              description: "secondaryEmail",
            },
            HomeMobilePhonenumber: {
              type: "string",
              optional: true,
              description: "HomeMobilePhonenumber",
            },
            roles1: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "roles1",
            },
            discipline: {
              type: "string",
              optional: true,
              description: "this attribute use to measure discipline value.",
            },
            Paysched: {
              type: "string",
              optional: true,
              description: "Pay schedule",
            },
            ethnicity1: {
              type: "string",
              optional: true,
              description: "abc",
            },
            ethnicitynew: {
              type: "string",
              optional: true,
              description: "eth",
            },
            SAP_CODVN_Okta: {
              type: "string",
              optional: true,
              description: "SAP_CODVN_Okta",
            },
            Variable_786: {
              type: "string",
              optional: true,
              description: "This is a Short Description",
            },
            Variable_0786: {
              type: "string",
              optional: true,
              description: "This is a short description",
            },
            Variable: {
              type: "string",
              optional: true,
              description: "This is the short description",
            },
            gender: {
              type: "string",
              optional: true,
              description: "Gender of the attribute",
            },
            age: {
              type: "integer",
              optional: true,
              description: "Age of the attribute",
            },
            jobCode: {
              type: "integer",
              optional: true,
              description: "Job code of the attribute",
            },
            distinguishedName: {
              type: "string",
              optional: true,
              description: "urn:ietf:params:scim:schemas:ian:2.0:User",
            },
            Sample_Variable: {
              type: "string",
              optional: true,
              description: "Brief description of the attribute",
            },
            variable_name: {
              type: "string",
              optional: true,
              description: "This is the description",
            },
            variable_0786: {
              type: "string",
              optional: true,
              description: "description of the attribute",
            },
            date_of_bitrth: {
              type: "string",
              optional: true,
              description: "date of birth of the employee",
            },
            managerDisplayName: {
              type: "string",
              optional: true,
              description: "The display name of the manager",
            },
            given_name: {
              type: "string",
              optional: true,
              description: "Given name of the user",
            },
            managerEmails: {
              type: "array",
              items: {
                type: "string",
                optional: true,
              },
              description: "managerEmails",
            },
            managerEmailsTest: {
              type: "string",
              optional: true,
              description: "managerEmailsTest",
            },
          },
        },
      },
    },
    oktaGroup: {
      type: "object",
      schema: {
        displayName: {
          type: "string",
          optional: true,
          description: "A human-readable name for the Group. REQUIRED.",
        },
        members: {
          type: "array",
          items: {
            type: "object",
            schema: {
              value: {
                type: "string",
                optional: true,
                description: "Identifier of the member of this Group.",
              },
              $ref: {
                type: "string",
                optional: true,
                description:
                  "The URI corresponding to a SCIM resource that is a member of this Group.",
              },
              type: {
                type: "string",
                optional: true,
                description:
                  "A label indicating the type of resource, e.g., 'User' or 'Group'.",
              },
            },
          },
          description: "A list of members of the Group.",
        },
        "urn:ietf:params:scim:schemas:ian:2.0:Group": {
          type: "object",
          schema: {
            lastMembershipUpdated: {
              type: "string",
              optional: true,
              description:
                "describes when the memberships of group were last updated.",
            },
          },
        },
      },
    },
    oktaRole: {
      type: "object",
      schema: {
        value: {
          type: "string",
          optional: true,
          description:
            "Unique identifier for the SCIM resource as defined by the Service Provider. Each representation of the resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider’s entire set of resources. It MUST be a stable, non-reassignable identifier that does not change when the same resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer.",
        },
        display: {
          type: "string",
          optional: true,
          description: "A human-readable name for the Role.",
        },
        type: {
          type: "string",
          optional: true,
          description: "A label indicating the attribute's function.",
        },
        primary: {
          type: "boolean",
          optional: true,
          description:
            "A Boolean value indicating the 'primary' or preferred attribute value for this attribute. The primary attribute value 'true' MUST appear no more than once.",
        },
      },
    },
    oktaApplication: {
      type: "object",
      schema: {
        value: {
          type: "string",
          optional: true,
          description: "The value of an entitlement.",
        },
        display: {
          type: "string",
          optional: true,
          description:
            "A human-readable name, primarily used for display purposes. READ-ONLY.",
        },
        members: {
          type: "array",
          items: {
            type: "object",
            schema: {
              value: {
                type: "string",
                optional: true,
                description: "Identifier of the member of this Application.",
              },
              $ref: {
                type: "string",
                optional: true,
                description:
                  "The URI corresponding to a SCIM resource that is a member of this Application.",
              },
              type: {
                type: "string",
                optional: true,
                description:
                  "A label indicating the type of resource, e.g., User.",
              },
            },
          },
          description: "A list of members of the Application.",
        },
      },
    },
    oktaLogEvent: {
      type: "object",
      schema: {
        version: {
          type: "string",
          optional: true,
          description: "Versioning indicator",
        },
        severity: {
          type: "string",
          optional: true,
          description: "Indicates how severe the event is.",
        },
        client: {
          type: "object",
          schema: {
            zone: {
              type: "string",
              optional: true,
              description:
                "The name of the Zone that the client's location is mapped to",
            },
            device: {
              type: "string",
              optional: true,
              description: "Type of device that the client operates from",
            },
            userAgent: {
              type: "object",
              schema: {
                os: {
                  type: "string",
                  optional: true,
                  description:
                    "The operating system that the client runs on (for example, Windows 10)",
                },
                browser: {
                  type: "string",
                  optional: true,
                  description:
                    "If the client is a web browser, this field identifies the type of web browser (for example, CHROME, FIREFOX)",
                },
                rawUserAgent: {
                  type: "string",
                  optional: true,
                  description:
                    "A raw string representation of the user agent that is formatted according to section 5.5.3 of HTTP/1.1 Semantics and Content. Both the browser and the OS fields can be derived from this field.",
                },
              },
              description:
                "The user agent that is used by an actor to perform an action",
            },
            ipAddress: {
              type: "string",
              optional: true,
              description:
                "IP address that the client is making its request from",
            },
            id: {
              type: "string",
              optional: true,
              description:
                "For OAuth requests, this is the ID of the OAuth client making the request. For SSWS token requests, this is the ID of the agent making the request.",
            },
            geographicalContext: {
              type: "object",
              schema: {
                geolocation: {
                  type: "object",
                  schema: {
                    lat: {
                      type: "integer",
                      optional: true,
                      description:
                        "Latitude: Uses two digits for the integer part",
                    },
                    lon: {
                      type: "integer",
                      optional: true,
                      description:
                        "Longitude: Uses three digits for the integer part",
                    },
                  },
                  description: "Type of device that the client operates from",
                },
                city: {
                  type: "string",
                  optional: true,
                  description:
                    "The city that encompasses the area that contains the geolocation coordinates, if available",
                },
                state: {
                  type: "string",
                  optional: true,
                  description:
                    "Full name of the state or province that encompasses the area that contains the geolocation coordinates",
                },
                country: {
                  type: "string",
                  optional: true,
                  description:
                    "Full name of the country that encompasses the area that contains the geolocation coordinates",
                },
                postalCode: {
                  type: "string",
                  optional: true,
                  description:
                    "Postal code of the area that encompasses the geolocation coordinates",
                },
              },
              description:
                "The user agent that is used by an actor to perform an action",
            },
          },
          description: "The client that requests an action",
        },
        actor: {
          type: "object",
          schema: {
            id: {
              type: "string",
              optional: true,
              description: "ID of the actor",
            },
            $ref: {
              type: "string",
              optional: true,
              description:
                "The URI of the corresponding 'Group' resource to which the user belongs.",
            },
            type: {
              type: "string",
              optional: true,
              description: "Type of the actor",
            },
            alternateId: {
              type: "string",
              optional: true,
              description: "Alternative ID of the actor.",
            },
            displayName: {
              type: "string",
              optional: true,
              description: "Display Name of the actor",
            },
            detailEntry: {
              type: "string",
              optional: true,
              description: "Details about the actor",
            },
          },
          description: "Describes the entity that performs an action",
        },
        outcome: {
          type: "object",
          schema: {
            result: {
              type: "string",
              optional: true,
              description: "Result of the action",
            },
            reason: {
              type: "string",
              optional: true,
              description: "Reason for the result",
            },
          },
          description: "The outcome of an action",
        },
        published: {
          type: "string",
          optional: true,
          description: "Timestamp when the event is published",
        },
        eventType: {
          type: "string",
          optional: true,
          description: "Type of event that is published",
        },
        display: {
          type: "string",
          optional: true,
          description: "The display message for an event",
        },
        transaction: {
          type: "object",
          schema: {
            type: {
              type: "string",
              optional: true,
              description:
                "Describes the kind of transaction. WEB indicates a web request. JOB indicates an asynchronous task.",
            },
            id: {
              type: "string",
              optional: true,
              description: "Unique identifier for this transaction.",
            },
            detail: {
              type: "object",
              schema: {
                requestApiTokenId: {
                  type: "string",
                  optional: true,
                  description: "request Api TokenId",
                },
              },
              description: "Details for this transaction.",
            },
          },
          description: "The transaction details of an action",
        },
        target: {
          type: "array",
          items: {
            type: "object",
            schema: {
              type: {
                type: "string",
                optional: true,
                description:
                  "Describes the kind of transaction. WEB indicates a web request. JOB indicates an asynchronous task.",
              },
              id: {
                type: "string",
                optional: true,
                description: "Unique identifier for this target.",
              },
              $ref: {
                type: "string",
                optional: true,
                description:
                  "The URI of the corresponding 'Group' resource to which the user belongs.",
              },
              alternateId: {
                type: "string",
                optional: true,
                description: "alternateId for this target.",
              },
              displayName: {
                type: "string",
                optional: true,
                description: "displayName for this target.",
              },
            },
          },
          description: "The target details of an action",
        },
        debugContext: {
          type: "object",
          schema: {
            debugData: {
              type: "object",
              schema: {
                clientAuthType: {
                  type: "string",
                  optional: true,
                  description: "clientAuthType",
                },
                grantedScopes: {
                  type: "string",
                  optional: true,
                  description: "grantedScopes",
                },
                authCode: {
                  type: "string",
                  optional: true,
                  description: "authCode",
                },
                responseTime: {
                  type: "string",
                  optional: true,
                  description: "responseTime",
                },
                dtHash: {
                  type: "string",
                  optional: true,
                  description: "dtHash",
                },
                requestedScopes: {
                  type: "string",
                  optional: true,
                  description: "requestedScopes",
                },
                threatSuspected: {
                  type: "string",
                  optional: true,
                  description: "threatSuspected",
                },
                grantType: {
                  type: "string",
                  optional: true,
                  description: "grantType",
                },
                requestUri: {
                  type: "string",
                  optional: true,
                  description: "requestUri",
                },
                url: {
                  type: "string",
                  optional: true,
                  description: "url",
                },
                requestId: {
                  type: "string",
                  optional: true,
                  description: "requestId",
                },
                smsProvider: {
                  type: "string",
                  optional: true,
                  description: "smsProvider",
                },
                warningPercent: {
                  type: "integer",
                  optional: true,
                  description: "warningPercent",
                },
                rateLimitBucketUuid: {
                  type: "string",
                  optional: true,
                  description: "rateLimitBucketUuid",
                },
                rateLimitSecondsToReset: {
                  type: "integer",
                  optional: true,
                  description: "rateLimitSecondsToReset",
                },
                threshold: {
                  type: "string",
                  optional: true,
                  description: "threshold",
                },
                transactionId: {
                  type: "string",
                  optional: true,
                  description: "transactionId",
                },
              },
              description: "debugData",
            },
          },
          description: "The debug request data of an action",
        },
        legacyEventType: {
          type: "string",
          optional: true,
          description:
            "Associated Events API Action 'objectType' attribute value",
        },
        authenticationContext: {
          type: "object",
          schema: {
            authenticationProvider: {
              type: "string",
              optional: true,
              description:
                "The system that proves the identity of an actor using the credentials provided to it",
            },
            authenticationStep: {
              type: "integer",
              optional: true,
              description: "authenticationStep",
            },
            credentialProvider: {
              type: "string",
              optional: true,
              description: "credentialProvider",
            },
            credentialType: {
              type: "string",
              optional: true,
              description: "credentialType",
            },
            interface: {
              type: "string",
              optional: true,
              description: "interface",
            },
            externalSessionId: {
              type: "string",
              optional: true,
              description: "externalSessionId",
            },
          },
          description: "The authentication data of an action.",
        },
        securityContext: {
          type: "object",
          schema: {
            asNumber: {
              type: "integer",
              optional: true,
              description:
                "The Autonomous system number that is associated with the autonomous system that the event request was sourced to",
            },
            asOrg: {
              type: "string",
              optional: true,
              description:
                "The organization that is associated with the autonomous system that the event request is sourced to",
            },
            isp: {
              type: "string",
              optional: true,
              description:
                "The Internet service provider that is used to send the event's request",
            },
            domain: {
              type: "string",
              optional: true,
              description:
                "The domain name that is associated with the IP address of the inbound event request",
            },
            isProxy: {
              type: "boolean",
              optional: true,
              description:
                "Specifies whether an event's request is from a known proxy",
            },
          },
          description: "securityContext",
        },
        request: {
          type: "object",
          schema: {
            ipChain: {
              type: "array",
              items: {
                type: "object",
                schema: {
                  ip: {
                    type: "string",
                    optional: true,
                    description: "ip",
                  },
                  geographicalContext: {
                    type: "object",
                    schema: {
                      geolocation: {
                        type: "object",
                        schema: {
                          lat: {
                            type: "integer",
                            optional: true,
                            description:
                              "Latitude: Uses two digits for the integer part",
                          },
                          lon: {
                            type: "integer",
                            optional: true,
                            description:
                              "Longitude: Uses three digits for the integer part",
                          },
                        },
                        description:
                          "Type of device that the client operates from",
                      },
                      city: {
                        type: "string",
                        optional: true,
                        description:
                          "The city that encompasses the area that contains the geolocation coordinates, if available",
                      },
                      state: {
                        type: "string",
                        optional: true,
                        description:
                          "Full name of the state or province that encompasses the area that contains the geolocation coordinates",
                      },
                      country: {
                        type: "string",
                        optional: true,
                        description:
                          "Full name of the country that encompasses the area that contains the geolocation coordinates",
                      },
                      postalCode: {
                        type: "string",
                        optional: true,
                        description:
                          "Postal code of the area that encompasses the geolocation coordinates",
                      },
                    },
                    description:
                      "The user agent that is used by an actor to perform an action",
                  },
                  version: {
                    type: "string",
                    optional: true,
                    description: "version",
                  },
                  source: {
                    type: "string",
                    optional: true,
                    description: "source",
                  },
                },
              },
              description: "ipChain",
            },
          },
          description: "request",
        },
        device: {
          type: "object",
          schema: {
            id: {
              type: "string",
              optional: true,
              description: "ID of the device",
            },
            name: {
              type: "string",
              optional: true,
              description: "Name of the device",
            },
            os_platform: {
              type: "string",
              optional: true,
              description: "Os platform of the device",
            },
            os_version: {
              type: "string",
              optional: true,
              description: "Os version of the device",
            },
            managed: {
              type: "boolean",
              optional: true,
              description:
                "Boolean attribute describes whether the device is managed or not",
            },
            registered: {
              type: "boolean",
              optional: true,
              description:
                "Boolean attribute describes whether the device is registered or not",
            },
            device_integrator: {
              type: "string",
              optional: true,
              description:
                "String type attribute describes the device integrator",
            },
            disk_encryption_type: {
              type: "string",
              optional: true,
              description:
                "String type attribute describes the disk encryption type",
            },
            screen_lock_type: {
              type: "string",
              optional: true,
              description:
                "String type attribute describes the screen lock type",
            },
            jailbreak: {
              type: "string",
              optional: true,
              description: "String type attribute describes the jailbreak",
            },
            secure_hardware_present: {
              type: "boolean",
              optional: true,
              description:
                "Boolean attribute describes whether secure hardware is present or not",
            },
          },
          description: "Describes the device",
        },
      },
    },
    oktaEvent: {
      type: "object",
      schema: {
        type: {
          type: "string",
          optional: true,
          description: "Event type",
        },
        version: {
          type: "string",
          optional: true,
          description: "Version of event API.",
        },
        effectiveDate: {
          type: "dateTime",
          optional: true,
          description: "Date and time when this event changes takes place.",
        },
        publishedDate: {
          type: "dateTime",
          optional: true,
          description: "Date and time when this event was published.",
        },
        resource_id: {
          type: "string",
          optional: true,
          description: "Resource id for which event is generated.",
        },
        resource_name: {
          type: "string",
          optional: true,
          description:
            "The URI of the corresponding 'Users' or 'Groups' resource for which the event is generated.",
        },
        status: {
          type: "string",
          optional: true,
          description: "Status of event API.",
        },
        severity: {
          type: "string",
          optional: true,
          description: "Severity of event API.",
        },
        displayMessage: {
          type: "string",
          optional: true,
          description: "Display message of event API.",
        },
      },
    },
  },
  scimConstants: {
    EnterpriseUser:
      "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
    IANUser: "urn:ietf:params:scim:schemas:ian:2.0:User",
    IANGroup: "urn:ietf:params:scim:schemas:ian:2.0:Group",
  },
  scim: [
    {
      name: "getSCIMUsers",
      description:
        "This is a SCIM method. Retrieves all the SCIM User records in the application.",
      jsDoc:
        "\n/** \n*@method getSCIMUsers \n*@desc This is a SCIM method. Retrieves all the SCIM User records in the application.\n*@param {string|null} [filter=null] - if null return a list of all User if not null then filters User based on SCIM filter specification. \n*@param {string|null} [startIndex=null] - Provide Startindex. \n*@param {string|null} [count=null] - Provide Count per page. \n*@param {string|null} [attributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [excludedAttributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [sortBy=null] - Provide attribute name to sort by. \n*@param {string|null} [sortOrder=null] - Provide value for sort order. \n*@returns {Array} Returns an array of all the User objects.\n */\n",
      params: [
        {
          name: "filter",
          description: "Provide a valid SCIM filter",
          type: "string",
          optional: true,
        },
        {
          name: "startIndex",
          description: "Startindex ",
          type: "number",
          optional: true,
        },
        {
          name: "count",
          description: "Count ",
          type: "number",
          optional: true,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
        {
          name: "sortBy",
          description: "sortBy attribute name",
          type: "string",
          optional: true,
        },
        {
          name: "sortOrder",
          description: "sortOrder [ascending or descending]",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaUser",
        },
      },
    },
    {
      name: "getSCIMUser",
      description:
        "This is a SCIM method. Retrieves the specified SCIM User if it is found in the application. Returns null if no User is found.",
      jsDoc:
        "\n/** \n*@method getSCIMUser \n*@desc This is a SCIM method. Retrieves the specified SCIM User if it is found in the application. Returns null if no User is found.\n \n*@param {string} UserId - The Immutable Static Identifier for this User to be looked up.\n*@returns {object} Returns a User object.\n */\n",
      params: [
        {
          name: "id",
          description: "Provide valid User Id",
          type: "string",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaUser",
      },
    },
    {
      name: "postSCIMUser",
      description:
        "This is a SCIM method. Creates a new SCIM User in the application.",
      jsDoc:
        "\n/** \n*@method postSCIMUser \n*@desc This is a SCIM method. Creates a new SCIM User in the application.\n \n*@param User - The User object\n*@returns User - Returns a User object.\n */\n",
      params: [
        {
          name: "User",
          description: "Provide valid User",
          type: "oktaUser",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaUser",
      },
    },
    {
      name: "putSCIMUser",
      description:
        "This is a SCIM method. Updates an existing SCIM User by specifying an id and a User object, or just a User object with an id attribute.",
      jsDoc:
        "\n/** \n*@method putSCIMUser \n*@desc This is a SCIM method. Updates an existing SCIM User by specifying an id and a User object, or just a User object with an id attribute.\n \n*@param {string} id - The Id of the User\n*@param {User} User - The User object\n */\n",
      params: [
        {
          name: "id",
          description: "User Id",
          type: "string",
          optional: false,
        },
        {
          name: "User",
          description: "User Object",
          type: "oktaUser",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "patchSCIMUser",
      description:
        "This is a SCIM method. Updates an existing SCIM User by specifying an id and a SCIM Patch Command object.",
      jsDoc:
        "\n/** \n*@method patchSCIMUser \n*@desc This is a SCIM method. Updates an existing SCIM User by specifying an id and a SCIM Patch Command object.\n \n*@param {string} id - The Id of the User\n*@param {object} patchCommandObject - The SCIM Patch Command object\n */\n",
      params: [
        {
          name: "id",
          description: "User Id",
          type: "string",
          optional: false,
        },
        {
          name: "patchCommandObject",
          description: "SCIM Patch Command Object",
          type: "object",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "deleteSCIMUser",
      description:
        "This is a SCIM method. Deletes a SCIM User in the application.",
      jsDoc:
        "\n/** \n*@method deleteSCIMUser \n*@desc This is a SCIM method. Deletes a SCIM User in the application.\n \n*@param {string|object} id|User - The Id of the User or the User object.\n */\n",
      params: [
        {
          name: "User",
          description: "Provide valid User Id",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "newSCIMUser",
      description:
        "This is a SCIM method. Generates SCIM User object template to view the User attributes supported by the application.",
      jsDoc:
        "\n/** \n*@method newSCIMUser \n*@desc This is a SCIM method. Generates SCIM User object template to view the User attributes supported by the application.\n \n*@returns {object} Returns an empty User object.\n */\n",
      params: [],
      return: {
        type: "oktaUser",
      },
    },
    {
      name: "importUpdatedSCIMUsersSince",
      description:
        "This is a SCIM method. Retrieves all the SCIM User records that are modified since the last specified date.",
      jsDoc:
        "\n/** \n*@method importUpdatedSCIMUsersSince \n*@desc This is a SCIM method. Retrieves all the SCIM User records that are modified since the last specified date.\n \n*@param {string} lastUpdateDate - The date from when the User updated data to be retrieved.\n*@returns {Array} Returns an array of all the User objects.\n */\n",
      params: [
        {
          name: "lastUpdateDate",
          description: "Provide Date value (YYYY-MM-DDTHH:mm:ss.sssZ).",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaUser",
        },
      },
    },
    {
      name: "findSCIMUserByUsername",
      description:
        "This is a SCIM method. Retrieves the specified SCIM user if it is found in the application. Returns null if no user is found.",
      jsDoc:
        "\n/**\n*@method findSCIMUserByUsername\n*@desc This is a SCIM method. Retrieves the specified SCIM user if it is found in the application. Returns null if no user is found.\n*@param {string} userName - The userName of the user.\n*@returns {object} Returns a user object.\n */\n",
      params: [
        {
          name: "username",
          description: "Provide valid Username",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "oktaUser",
      },
    },
    {
      name: "setSCIMUserPassword",
      description:
        "This is a SCIM method. Sets the password of the SCIM user in the application.",
      jsDoc:
        "\n/**\n*@method setSCIMUserPassword\n*@desc This is a SCIM method. Sets the password of the SCIM user in the application.\n*@param {string} userId - The ID of the user.\n*@param {string} password - The password of user.\n */\n",
      params: [
        {
          name: "userId",
          description: "Provide valid User Id",
          type: "string",
          optional: false,
        },
        {
          name: "password",
          description: "Password to be set",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "activateSCIMUser",
      description:
        "This is a SCIM method. Activates the SCIM user in the application.",
      jsDoc:
        "\n/**\n*@method activateSCIMUser\n*@desc This is a SCIM method. Activates the SCIM user in the application.\n*@param {string} userId - The ID of the user.\n */\n",
      params: [
        {
          name: "userId",
          description: "Id of the user to be Activated",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "deactivateSCIMUser",
      description:
        "This is a SCIM method. Deactivates the SCIM user in the application.",
      jsDoc:
        "\n/**\n*@method deactivateSCIMUser\n*@desc This is a SCIM method. Deactivates the SCIM user in the application.\n*@param {string} userId - The ID of the user or the user object.\n */\n",
      params: [
        {
          name: "userId",
          description: "Id of the user to be De-Activated",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "isSCIMSubordinate",
      description:
        "This is a SCIM method. Verifies if a SCIM user is a subordinate of a specific manager.",
      jsDoc:
        "\n/**\n*@method isSCIMSubordinate\n*@desc This is a SCIM method. Verifies if a SCIM user is a subordinate of a specific manager.\n*@param {string} userName - The userName of the user.\n*@param {string} managerUserName - The userName of the users manager.\n*@returns {boolean} Returns a boolean value.\n */\n",
      params: [
        {
          name: "userName",
          description: "Username of user",
          type: "string",
          optional: false,
        },
        {
          name: "managerUserName",
          description: "Username of manager",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "boolean",
      },
    },
    {
      name: "getSCIMGroups",
      description:
        "This is a SCIM method. Retrieves all the SCIM Group records in the application.",
      jsDoc:
        "\n/** \n*@method getSCIMGroups \n*@desc This is a SCIM method. Retrieves all the SCIM Group records in the application.\n*@param {string|null} [filter=null] - if null return a list of all Group if not null then filters Group based on SCIM filter specification. \n*@param {string|null} [startIndex=null] - Provide Startindex. \n*@param {string|null} [count=null] - Provide Count per page. \n*@param {string|null} [attributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [excludedAttributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [sortBy=null] - Provide attribute name to sort by. \n*@param {string|null} [sortOrder=null] - Provide value for sort order. \n*@returns {Array} Returns an array of all the Group objects.\n */\n",
      params: [
        {
          name: "filter",
          description: "Provide a valid SCIM filter",
          type: "string",
          optional: true,
        },
        {
          name: "startIndex",
          description: "Startindex ",
          type: "number",
          optional: true,
        },
        {
          name: "count",
          description: "Count ",
          type: "number",
          optional: true,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
        {
          name: "sortBy",
          description: "sortBy attribute name",
          type: "string",
          optional: true,
        },
        {
          name: "sortOrder",
          description: "sortOrder [ascending or descending]",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaGroup",
        },
      },
    },
    {
      name: "getSCIMGroup",
      description:
        "This is a SCIM method. Retrieves the specified SCIM Group if it is found in the application. Returns null if no Group is found.",
      jsDoc:
        "\n/** \n*@method getSCIMGroup \n*@desc This is a SCIM method. Retrieves the specified SCIM Group if it is found in the application. Returns null if no Group is found.\n \n*@param {string} GroupId - The Immutable Static Identifier for this Group to be looked up.\n*@returns {object} Returns a Group object.\n */\n",
      params: [
        {
          name: "id",
          description: "Provide valid Group Id",
          type: "string",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaGroup",
      },
    },
    {
      name: "postSCIMGroup",
      description:
        "This is a SCIM method. Creates a new SCIM Group in the application.",
      jsDoc:
        "\n/** \n*@method postSCIMGroup \n*@desc This is a SCIM method. Creates a new SCIM Group in the application.\n \n*@param Group - The Group object\n*@returns Group - Returns a Group object.\n */\n",
      params: [
        {
          name: "Group",
          description: "Provide valid Group",
          type: "oktaGroup",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaGroup",
      },
    },
    {
      name: "putSCIMGroup",
      description:
        "This is a SCIM method. Updates an existing SCIM Group by specifying an id and a Group object, or just a Group object with an id attribute.",
      jsDoc:
        "\n/** \n*@method putSCIMGroup \n*@desc This is a SCIM method. Updates an existing SCIM Group by specifying an id and a Group object, or just a Group object with an id attribute.\n \n*@param {string} id - The Id of the Group\n*@param {Group} Group - The Group object\n */\n",
      params: [
        {
          name: "id",
          description: "Group Id",
          type: "string",
          optional: false,
        },
        {
          name: "Group",
          description: "Group Object",
          type: "oktaGroup",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "patchSCIMGroup",
      description:
        "This is a SCIM method. Updates an existing SCIM Group by specifying an id and a SCIM Patch Command object.",
      jsDoc:
        "\n/** \n*@method patchSCIMGroup \n*@desc This is a SCIM method. Updates an existing SCIM Group by specifying an id and a SCIM Patch Command object.\n \n*@param {string} id - The Id of the Group\n*@param {object} patchCommandObject - The SCIM Patch Command object\n */\n",
      params: [
        {
          name: "id",
          description: "Group Id",
          type: "string",
          optional: false,
        },
        {
          name: "patchCommandObject",
          description: "SCIM Patch Command Object",
          type: "object",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "deleteSCIMGroup",
      description:
        "This is a SCIM method. Deletes a SCIM Group in the application.",
      jsDoc:
        "\n/** \n*@method deleteSCIMGroup \n*@desc This is a SCIM method. Deletes a SCIM Group in the application.\n \n*@param {string|object} id|Group - The Id of the Group or the Group object.\n */\n",
      params: [
        {
          name: "Group",
          description: "Provide valid Group Id",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "newSCIMGroup",
      description:
        "This is a SCIM method. Generates SCIM Group object template to view the Group attributes supported by the application.",
      jsDoc:
        "\n/** \n*@method newSCIMGroup \n*@desc This is a SCIM method. Generates SCIM Group object template to view the Group attributes supported by the application.\n \n*@returns {object} Returns an empty Group object.\n */\n",
      params: [],
      return: {
        type: "oktaGroup",
      },
    },
    {
      name: "importUpdatedSCIMGroupsSince",
      description:
        "This is a SCIM method. Retrieves all the SCIM Group records that are modified since the last specified date.",
      jsDoc:
        "\n/** \n*@method importUpdatedSCIMGroupsSince \n*@desc This is a SCIM method. Retrieves all the SCIM Group records that are modified since the last specified date.\n \n*@param {string} lastUpdateDate - The date from when the Group updated data to be retrieved.\n*@returns {Array} Returns an array of all the Group objects.\n */\n",
      params: [
        {
          name: "lastUpdateDate",
          description: "Provide Date value (YYYY-MM-DDTHH:mm:ss.sssZ).",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaGroup",
        },
      },
    },
    {
      name: "importAllSCIMGroupNames",
      description:
        "This is a SCIM method. Retrieves all the SCIM group display names in the application.",
      jsDoc:
        "\n/** \n*@method importAllSCIMGroupNames \n*@desc This is a SCIM method. Retrieves all the SCIM group display names in the application.\n \n*@returns {Array} Returns an array of all the group names.\n */\n",
      params: [],
      return: {
        type: "array",
        items: {
          type: "string",
        },
      },
    },
    {
      name: "importAllSCIMUsersFromGroup",
      description:
        "This is a SCIM method. Retrieves all the SCIM user records assigned to a specified group in the application.",
      jsDoc:
        "\n/**\n*@method importAllSCIMUsersFromGroup\n*@desc This is a SCIM method. Retrieves all the SCIM user records assigned to a specified group in the application.\n*@param {string} groupId|groupDisplayName - The ID of the group or the display name of the group. \n*@returns {Array} returns an array of all the user objects. \n */\n",
      params: [
        {
          name: "group",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "object",
        },
      },
    },
    {
      name: "addSCIMUserToGroup",
      description:
        "This is a SCIM method. Adds the specified SCIM user to the specified group.",
      jsDoc:
        "\n/** \n*@method addSCIMUserToGroup \n*@desc This is a SCIM method. Adds the specified SCIM user to the specified group.\n \n*@param {string|string|object} groupId|groupDisplayName|group - The ID of the group or the display name of the group or the group object. \n*@param {string|string|object} userId|userName|user - The ID of the user or the userName of the user or the user object.\n */\n",
      params: [
        {
          name: "group",
          description:
            "The group id or group name of the group to which the user will be added to.",
          type: "string",
          optional: false,
        },
        {
          name: "user",
          description:
            "Id, or userName of the user that will be added to the group.",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "removeSCIMUserFromGroup",
      description:
        "This is a SCIM method. Removes the specified SCIM user from the specified group.",
      jsDoc:
        "\n/** \n*@method removeSCIMUserFromGroup \n*@desc This is a SCIM method. Removes the specified SCIM user from the specified group.\n \n*@param {string|string|object} groupId|groupDisplayName|group - The ID of the group or the display name of the group or the group object. \n*@param {string|string|object} userId|userName|user - The ID of the user or the userName of the user or the user object.\n */\n",
      params: [
        {
          name: "group",
          description:
            "The group id or group name of the group to which the user will be removed from.",
          type: "string",
          optional: false,
        },
        {
          name: "user",
          description:
            "Id, or userName of the user that will be removed from the group.",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "getSCIMRoles",
      description:
        "This is a SCIM method. Retrieves all the SCIM Role records in the application.",
      jsDoc:
        "\n/** \n*@method getSCIMRoles \n*@desc This is a SCIM method. Retrieves all the SCIM Role records in the application.\n*@param {string|null} [filter=null] - if null return a list of all Role if not null then filters Role based on SCIM filter specification. \n*@param {string|null} [startIndex=null] - Provide Startindex. \n*@param {string|null} [count=null] - Provide Count per page. \n*@param {string|null} [attributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [excludedAttributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [sortBy=null] - Provide attribute name to sort by. \n*@param {string|null} [sortOrder=null] - Provide value for sort order. \n*@returns {Array} Returns an array of all the Role objects.\n */\n",
      params: [
        {
          name: "filter",
          description: "Provide a valid SCIM filter",
          type: "string",
          optional: true,
        },
        {
          name: "startIndex",
          description: "Startindex ",
          type: "number",
          optional: true,
        },
        {
          name: "count",
          description: "Count ",
          type: "number",
          optional: true,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
        {
          name: "sortBy",
          description: "sortBy attribute name",
          type: "string",
          optional: true,
        },
        {
          name: "sortOrder",
          description: "sortOrder [ascending or descending]",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaRole",
        },
      },
    },
    {
      name: "getSCIMRole",
      description:
        "This is a SCIM method. Retrieves the specified SCIM Role if it is found in the application. Returns null if no Role is found.",
      jsDoc:
        "\n/** \n*@method getSCIMRole \n*@desc This is a SCIM method. Retrieves the specified SCIM Role if it is found in the application. Returns null if no Role is found.\n \n*@param {string} RoleId - The Immutable Static Identifier for this Role to be looked up.\n*@returns {object} Returns a Role object.\n */\n",
      params: [
        {
          name: "id",
          description: "Provide valid Role Id",
          type: "string",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaRole",
      },
    },
    {
      name: "postSCIMRole",
      description:
        "This is a SCIM method. Creates a new SCIM Role in the application.",
      jsDoc:
        "\n/** \n*@method postSCIMRole \n*@desc This is a SCIM method. Creates a new SCIM Role in the application.\n \n*@param Role - The Role object\n*@returns Role - Returns a Role object.\n */\n",
      params: [
        {
          name: "Role",
          description: "Provide valid Role",
          type: "oktaRole",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaRole",
      },
    },
    {
      name: "putSCIMRole",
      description:
        "This is a SCIM method. Updates an existing SCIM Role by specifying an id and a Role object, or just a Role object with an id attribute.",
      jsDoc:
        "\n/** \n*@method putSCIMRole \n*@desc This is a SCIM method. Updates an existing SCIM Role by specifying an id and a Role object, or just a Role object with an id attribute.\n \n*@param {string} id - The Id of the Role\n*@param {Role} Role - The Role object\n */\n",
      params: [
        {
          name: "id",
          description: "Role Id",
          type: "string",
          optional: false,
        },
        {
          name: "Role",
          description: "Role Object",
          type: "oktaRole",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "patchSCIMRole",
      description:
        "This is a SCIM method. Updates an existing SCIM Role by specifying an id and a SCIM Patch Command object.",
      jsDoc:
        "\n/** \n*@method patchSCIMRole \n*@desc This is a SCIM method. Updates an existing SCIM Role by specifying an id and a SCIM Patch Command object.\n \n*@param {string} id - The Id of the Role\n*@param {object} patchCommandObject - The SCIM Patch Command object\n */\n",
      params: [
        {
          name: "id",
          description: "Role Id",
          type: "string",
          optional: false,
        },
        {
          name: "patchCommandObject",
          description: "SCIM Patch Command Object",
          type: "object",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "deleteSCIMRole",
      description:
        "This is a SCIM method. Deletes a SCIM Role in the application.",
      jsDoc:
        "\n/** \n*@method deleteSCIMRole \n*@desc This is a SCIM method. Deletes a SCIM Role in the application.\n \n*@param {string|object} id|Role - The Id of the Role or the Role object.\n */\n",
      params: [
        {
          name: "Role",
          description: "Provide valid Role Id",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "newSCIMRole",
      description:
        "This is a SCIM method. Generates SCIM Role object template to view the Role attributes supported by the application.",
      jsDoc:
        "\n/** \n*@method newSCIMRole \n*@desc This is a SCIM method. Generates SCIM Role object template to view the Role attributes supported by the application.\n \n*@returns {object} Returns an empty Role object.\n */\n",
      params: [],
      return: {
        type: "oktaRole",
      },
    },
    {
      name: "importUpdatedSCIMRolesSince",
      description:
        "This is a SCIM method. Retrieves all the SCIM Role records that are modified since the last specified date.",
      jsDoc:
        "\n/** \n*@method importUpdatedSCIMRolesSince \n*@desc This is a SCIM method. Retrieves all the SCIM Role records that are modified since the last specified date.\n \n*@param {string} lastUpdateDate - The date from when the Role updated data to be retrieved.\n*@returns {Array} Returns an array of all the Role objects.\n */\n",
      params: [
        {
          name: "lastUpdateDate",
          description: "Provide Date value (YYYY-MM-DDTHH:mm:ss.sssZ).",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaRole",
        },
      },
    },
    {
      name: "getSCIMApplications",
      description:
        "This is a SCIM method. Retrieves all the SCIM Application records in the application.",
      jsDoc:
        "\n/** \n*@method getSCIMApplications \n*@desc This is a SCIM method. Retrieves all the SCIM Application records in the application.\n*@param {string|null} [filter=null] - if null return a list of all Application if not null then filters Application based on SCIM filter specification. \n*@param {string|null} [startIndex=null] - Provide Startindex. \n*@param {string|null} [count=null] - Provide Count per page. \n*@param {string|null} [attributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [excludedAttributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [sortBy=null] - Provide attribute name to sort by. \n*@param {string|null} [sortOrder=null] - Provide value for sort order. \n*@returns {Array} Returns an array of all the Application objects.\n */\n",
      params: [
        {
          name: "filter",
          description: "Provide a valid SCIM filter",
          type: "string",
          optional: true,
        },
        {
          name: "startIndex",
          description: "Startindex ",
          type: "number",
          optional: true,
        },
        {
          name: "count",
          description: "Count ",
          type: "number",
          optional: true,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
        {
          name: "sortBy",
          description: "sortBy attribute name",
          type: "string",
          optional: true,
        },
        {
          name: "sortOrder",
          description: "sortOrder [ascending or descending]",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaApplication",
        },
      },
    },
    {
      name: "getSCIMApplication",
      description:
        "This is a SCIM method. Retrieves the specified SCIM Application if it is found in the application. Returns null if no Application is found.",
      jsDoc:
        "\n/** \n*@method getSCIMApplication \n*@desc This is a SCIM method. Retrieves the specified SCIM Application if it is found in the application. Returns null if no Application is found.\n \n*@param {string} ApplicationId - The Immutable Static Identifier for this Application to be looked up.\n*@returns {object} Returns a Application object.\n */\n",
      params: [
        {
          name: "id",
          description: "Provide valid Application Id",
          type: "string",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaApplication",
      },
    },
    {
      name: "postSCIMApplication",
      description:
        "This is a SCIM method. Creates a new SCIM Application in the application.",
      jsDoc:
        "\n/** \n*@method postSCIMApplication \n*@desc This is a SCIM method. Creates a new SCIM Application in the application.\n \n*@param Application - The Application object\n*@returns Application - Returns a Application object.\n */\n",
      params: [
        {
          name: "Application",
          description: "Provide valid Application",
          type: "oktaApplication",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaApplication",
      },
    },
    {
      name: "putSCIMApplication",
      description:
        "This is a SCIM method. Updates an existing SCIM Application by specifying an id and a Application object, or just a Application object with an id attribute.",
      jsDoc:
        "\n/** \n*@method putSCIMApplication \n*@desc This is a SCIM method. Updates an existing SCIM Application by specifying an id and a Application object, or just a Application object with an id attribute.\n \n*@param {string} id - The Id of the Application\n*@param {Application} Application - The Application object\n */\n",
      params: [
        {
          name: "id",
          description: "Application Id",
          type: "string",
          optional: false,
        },
        {
          name: "Application",
          description: "Application Object",
          type: "oktaApplication",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "patchSCIMApplication",
      description:
        "This is a SCIM method. Updates an existing SCIM Application by specifying an id and a SCIM Patch Command object.",
      jsDoc:
        "\n/** \n*@method patchSCIMApplication \n*@desc This is a SCIM method. Updates an existing SCIM Application by specifying an id and a SCIM Patch Command object.\n \n*@param {string} id - The Id of the Application\n*@param {object} patchCommandObject - The SCIM Patch Command object\n */\n",
      params: [
        {
          name: "id",
          description: "Application Id",
          type: "string",
          optional: false,
        },
        {
          name: "patchCommandObject",
          description: "SCIM Patch Command Object",
          type: "object",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "deleteSCIMApplication",
      description:
        "This is a SCIM method. Deletes a SCIM Application in the application.",
      jsDoc:
        "\n/** \n*@method deleteSCIMApplication \n*@desc This is a SCIM method. Deletes a SCIM Application in the application.\n \n*@param {string|object} id|Application - The Id of the Application or the Application object.\n */\n",
      params: [
        {
          name: "Application",
          description: "Provide valid Application Id",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "newSCIMApplication",
      description:
        "This is a SCIM method. Generates SCIM Application object template to view the Application attributes supported by the application.",
      jsDoc:
        "\n/** \n*@method newSCIMApplication \n*@desc This is a SCIM method. Generates SCIM Application object template to view the Application attributes supported by the application.\n \n*@returns {object} Returns an empty Application object.\n */\n",
      params: [],
      return: {
        type: "oktaApplication",
      },
    },
    {
      name: "importUpdatedSCIMApplicationsSince",
      description:
        "This is a SCIM method. Retrieves all the SCIM Application records that are modified since the last specified date.",
      jsDoc:
        "\n/** \n*@method importUpdatedSCIMApplicationsSince \n*@desc This is a SCIM method. Retrieves all the SCIM Application records that are modified since the last specified date.\n \n*@param {string} lastUpdateDate - The date from when the Application updated data to be retrieved.\n*@returns {Array} Returns an array of all the Application objects.\n */\n",
      params: [
        {
          name: "lastUpdateDate",
          description: "Provide Date value (YYYY-MM-DDTHH:mm:ss.sssZ).",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaApplication",
        },
      },
    },
    {
      name: "getSCIMLogEvents",
      description:
        "This is a SCIM method. Retrieves all the SCIM LogEvent records in the application.",
      jsDoc:
        "\n/** \n*@method getSCIMLogEvents \n*@desc This is a SCIM method. Retrieves all the SCIM LogEvent records in the application.\n*@param {string|null} [filter=null] - if null return a list of all LogEvent if not null then filters LogEvent based on SCIM filter specification. \n*@param {string|null} [startIndex=null] - Provide Startindex. \n*@param {string|null} [count=null] - Provide Count per page. \n*@param {string|null} [attributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [excludedAttributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [sortBy=null] - Provide attribute name to sort by. \n*@param {string|null} [sortOrder=null] - Provide value for sort order. \n*@returns {Array} Returns an array of all the LogEvent objects.\n */\n",
      params: [
        {
          name: "filter",
          description: "Provide a valid SCIM filter",
          type: "string",
          optional: true,
        },
        {
          name: "startIndex",
          description: "Startindex ",
          type: "number",
          optional: true,
        },
        {
          name: "count",
          description: "Count ",
          type: "number",
          optional: true,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
        {
          name: "sortBy",
          description: "sortBy attribute name",
          type: "string",
          optional: true,
        },
        {
          name: "sortOrder",
          description: "sortOrder [ascending or descending]",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaLogEvent",
        },
      },
    },
    {
      name: "getSCIMLogEvent",
      description:
        "This is a SCIM method. Retrieves the specified SCIM LogEvent if it is found in the application. Returns null if no LogEvent is found.",
      jsDoc:
        "\n/** \n*@method getSCIMLogEvent \n*@desc This is a SCIM method. Retrieves the specified SCIM LogEvent if it is found in the application. Returns null if no LogEvent is found.\n \n*@param {string} LogEventId - The Immutable Static Identifier for this LogEvent to be looked up.\n*@returns {object} Returns a LogEvent object.\n */\n",
      params: [
        {
          name: "id",
          description: "Provide valid LogEvent Id",
          type: "string",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaLogEvent",
      },
    },
    {
      name: "postSCIMLogEvent",
      description:
        "This is a SCIM method. Creates a new SCIM LogEvent in the application.",
      jsDoc:
        "\n/** \n*@method postSCIMLogEvent \n*@desc This is a SCIM method. Creates a new SCIM LogEvent in the application.\n \n*@param LogEvent - The LogEvent object\n*@returns LogEvent - Returns a LogEvent object.\n */\n",
      params: [
        {
          name: "LogEvent",
          description: "Provide valid LogEvent",
          type: "oktaLogEvent",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaLogEvent",
      },
    },
    {
      name: "putSCIMLogEvent",
      description:
        "This is a SCIM method. Updates an existing SCIM LogEvent by specifying an id and a LogEvent object, or just a LogEvent object with an id attribute.",
      jsDoc:
        "\n/** \n*@method putSCIMLogEvent \n*@desc This is a SCIM method. Updates an existing SCIM LogEvent by specifying an id and a LogEvent object, or just a LogEvent object with an id attribute.\n \n*@param {string} id - The Id of the LogEvent\n*@param {LogEvent} LogEvent - The LogEvent object\n */\n",
      params: [
        {
          name: "id",
          description: "LogEvent Id",
          type: "string",
          optional: false,
        },
        {
          name: "LogEvent",
          description: "LogEvent Object",
          type: "oktaLogEvent",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "patchSCIMLogEvent",
      description:
        "This is a SCIM method. Updates an existing SCIM LogEvent by specifying an id and a SCIM Patch Command object.",
      jsDoc:
        "\n/** \n*@method patchSCIMLogEvent \n*@desc This is a SCIM method. Updates an existing SCIM LogEvent by specifying an id and a SCIM Patch Command object.\n \n*@param {string} id - The Id of the LogEvent\n*@param {object} patchCommandObject - The SCIM Patch Command object\n */\n",
      params: [
        {
          name: "id",
          description: "LogEvent Id",
          type: "string",
          optional: false,
        },
        {
          name: "patchCommandObject",
          description: "SCIM Patch Command Object",
          type: "object",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "deleteSCIMLogEvent",
      description:
        "This is a SCIM method. Deletes a SCIM LogEvent in the application.",
      jsDoc:
        "\n/** \n*@method deleteSCIMLogEvent \n*@desc This is a SCIM method. Deletes a SCIM LogEvent in the application.\n \n*@param {string|object} id|LogEvent - The Id of the LogEvent or the LogEvent object.\n */\n",
      params: [
        {
          name: "LogEvent",
          description: "Provide valid LogEvent Id",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "newSCIMLogEvent",
      description:
        "This is a SCIM method. Generates SCIM LogEvent object template to view the LogEvent attributes supported by the application.",
      jsDoc:
        "\n/** \n*@method newSCIMLogEvent \n*@desc This is a SCIM method. Generates SCIM LogEvent object template to view the LogEvent attributes supported by the application.\n \n*@returns {object} Returns an empty LogEvent object.\n */\n",
      params: [],
      return: {
        type: "oktaLogEvent",
      },
    },
    {
      name: "importUpdatedSCIMLogEventsSince",
      description:
        "This is a SCIM method. Retrieves all the SCIM LogEvent records that are modified since the last specified date.",
      jsDoc:
        "\n/** \n*@method importUpdatedSCIMLogEventsSince \n*@desc This is a SCIM method. Retrieves all the SCIM LogEvent records that are modified since the last specified date.\n \n*@param {string} lastUpdateDate - The date from when the LogEvent updated data to be retrieved.\n*@returns {Array} Returns an array of all the LogEvent objects.\n */\n",
      params: [
        {
          name: "lastUpdateDate",
          description: "Provide Date value (YYYY-MM-DDTHH:mm:ss.sssZ).",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaLogEvent",
        },
      },
    },
    {
      name: "getSCIMEvents",
      description:
        "This is a SCIM method. Retrieves all the SCIM Event records in the application.",
      jsDoc:
        "\n/** \n*@method getSCIMEvents \n*@desc This is a SCIM method. Retrieves all the SCIM Event records in the application.\n*@param {string|null} [filter=null] - if null return a list of all Event if not null then filters Event based on SCIM filter specification. \n*@param {string|null} [startIndex=null] - Provide Startindex. \n*@param {string|null} [count=null] - Provide Count per page. \n*@param {string|null} [attributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [excludedAttributes=null] - Provide comma seperated attributes list. \n*@param {string|null} [sortBy=null] - Provide attribute name to sort by. \n*@param {string|null} [sortOrder=null] - Provide value for sort order. \n*@returns {Array} Returns an array of all the Event objects.\n */\n",
      params: [
        {
          name: "filter",
          description: "Provide a valid SCIM filter",
          type: "string",
          optional: true,
        },
        {
          name: "startIndex",
          description: "Startindex ",
          type: "number",
          optional: true,
        },
        {
          name: "count",
          description: "Count ",
          type: "number",
          optional: true,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
        {
          name: "sortBy",
          description: "sortBy attribute name",
          type: "string",
          optional: true,
        },
        {
          name: "sortOrder",
          description: "sortOrder [ascending or descending]",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaEvent",
        },
      },
    },
    {
      name: "getSCIMEvent",
      description:
        "This is a SCIM method. Retrieves the specified SCIM Event if it is found in the application. Returns null if no Event is found.",
      jsDoc:
        "\n/** \n*@method getSCIMEvent \n*@desc This is a SCIM method. Retrieves the specified SCIM Event if it is found in the application. Returns null if no Event is found.\n \n*@param {string} EventId - The Immutable Static Identifier for this Event to be looked up.\n*@returns {object} Returns a Event object.\n */\n",
      params: [
        {
          name: "id",
          description: "Provide valid Event Id",
          type: "string",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaEvent",
      },
    },
    {
      name: "postSCIMEvent",
      description:
        "This is a SCIM method. Creates a new SCIM Event in the application.",
      jsDoc:
        "\n/** \n*@method postSCIMEvent \n*@desc This is a SCIM method. Creates a new SCIM Event in the application.\n \n*@param Event - The Event object\n*@returns Event - Returns a Event object.\n */\n",
      params: [
        {
          name: "Event",
          description: "Provide valid Event",
          type: "oktaEvent",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
      return: {
        type: "oktaEvent",
      },
    },
    {
      name: "putSCIMEvent",
      description:
        "This is a SCIM method. Updates an existing SCIM Event by specifying an id and a Event object, or just a Event object with an id attribute.",
      jsDoc:
        "\n/** \n*@method putSCIMEvent \n*@desc This is a SCIM method. Updates an existing SCIM Event by specifying an id and a Event object, or just a Event object with an id attribute.\n \n*@param {string} id - The Id of the Event\n*@param {Event} Event - The Event object\n */\n",
      params: [
        {
          name: "id",
          description: "Event Id",
          type: "string",
          optional: false,
        },
        {
          name: "Event",
          description: "Event Object",
          type: "oktaEvent",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "patchSCIMEvent",
      description:
        "This is a SCIM method. Updates an existing SCIM Event by specifying an id and a SCIM Patch Command object.",
      jsDoc:
        "\n/** \n*@method patchSCIMEvent \n*@desc This is a SCIM method. Updates an existing SCIM Event by specifying an id and a SCIM Patch Command object.\n \n*@param {string} id - The Id of the Event\n*@param {object} patchCommandObject - The SCIM Patch Command object\n */\n",
      params: [
        {
          name: "id",
          description: "Event Id",
          type: "string",
          optional: false,
        },
        {
          name: "patchCommandObject",
          description: "SCIM Patch Command Object",
          type: "object",
          optional: false,
        },
        {
          name: "attributes",
          description: "Comma separated attributes list",
          type: "string",
          optional: true,
        },
        {
          name: "excludedAttributes",
          description: "Comma separated excludedAttributes list",
          type: "string",
          optional: true,
        },
      ],
    },
    {
      name: "deleteSCIMEvent",
      description:
        "This is a SCIM method. Deletes a SCIM Event in the application.",
      jsDoc:
        "\n/** \n*@method deleteSCIMEvent \n*@desc This is a SCIM method. Deletes a SCIM Event in the application.\n \n*@param {string|object} id|Event - The Id of the Event or the Event object.\n */\n",
      params: [
        {
          name: "Event",
          description: "Provide valid Event Id",
          type: "string",
          optional: false,
        },
      ],
    },
    {
      name: "newSCIMEvent",
      description:
        "This is a SCIM method. Generates SCIM Event object template to view the Event attributes supported by the application.",
      jsDoc:
        "\n/** \n*@method newSCIMEvent \n*@desc This is a SCIM method. Generates SCIM Event object template to view the Event attributes supported by the application.\n \n*@returns {object} Returns an empty Event object.\n */\n",
      params: [],
      return: {
        type: "oktaEvent",
      },
    },
    {
      name: "importUpdatedSCIMEventsSince",
      description:
        "This is a SCIM method. Retrieves all the SCIM Event records that are modified since the last specified date.",
      jsDoc:
        "\n/** \n*@method importUpdatedSCIMEventsSince \n*@desc This is a SCIM method. Retrieves all the SCIM Event records that are modified since the last specified date.\n \n*@param {string} lastUpdateDate - The date from when the Event updated data to be retrieved.\n*@returns {Array} Returns an array of all the Event objects.\n */\n",
      params: [
        {
          name: "lastUpdateDate",
          description: "Provide Date value (YYYY-MM-DDTHH:mm:ss.sssZ).",
          type: "string",
          optional: false,
        },
      ],
      return: {
        type: "array",
        items: {
          type: "oktaEvent",
        },
      },
    },
  ],
  openApi: [
    {
      name: "getOktaLogs",
      description:
        "This API is used to fetch all the okta logs of your application",
      jsDoc:
        '\n/** \n*@method getOktaLogs \n*@desc This is an openAPI method. This API is used to fetch all the okta logs of your application \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.q - Enter the username to see events from user Ex: "Jane Doe"\n * @param {string} parameters.filter - Enter the filter to search based on attribute and supported attributes are eventType, actor.id, target.id. The value must be passed in SCIM format for Ex: event_type eq "user.session.start", target.id eq "00uxc78lMKUMVIHLTAXY", actor.id ne "00uxc78lMKUMVIHLTAXY". It also supports complex filter Ex: filter=eventType eq "app.auth.sso" and target.id eq "00uxc78lMKUMVIHLTAXY". The operators supported are eq, ne\n * @param {string} parameters.since - Enter the time stamp to query from the published time. It should be in the past date Ex: 2023-06-29T14:36:13.712Z\n * @param {string} parameters.after - After is the id which is found in headers to fetch the next page of logs. Ex: 1688635528872_1\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            q: {
              type: "string",
              optional: true,
              description:
                'Enter the username to see events from user Ex: "Jane Doe"',
            },
            filter: {
              type: "string",
              optional: true,
              description:
                'Enter the filter to search based on attribute and supported attributes are eventType, actor.id, target.id. The value must be passed in SCIM format for Ex: event_type eq "user.session.start", target.id eq "00uxc78lMKUMVIHLTAXY", actor.id ne "00uxc78lMKUMVIHLTAXY". It also supports complex filter Ex: filter=eventType eq "app.auth.sso" and target.id eq "00uxc78lMKUMVIHLTAXY". The operators supported are eq, ne',
            },
            since: {
              type: "string",
              optional: true,
              description:
                "Enter the time stamp to query from the published time. It should be in the past date Ex: 2023-06-29T14:36:13.712Z",
            },
            after: {
              type: "string",
              optional: true,
              description:
                "After is the id which is found in headers to fetch the next page of logs. Ex: 1688635528872_1",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllRequestTypes",
      description:
        "Lists all or a subset of request types in your organization.",
      jsDoc:
        "\n/** \n*@method listAllRequestTypes \n*@desc This is an openAPI method. Lists all or a subset of request types in your organization. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request.\n * @param {string} parameters.filter - Apply various filters by using supported request filtering properties. Example filter=requestStatus eq `RESOLVED` AND lastUpdated gt `2022-05-24T14:15:22Z`\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default will be 20\n * @param {string} parameters.orderBy - Apply an ordering of requests by specifying a supported request property name. Example orderBy=created desc or orderBy=lastUpdated desc.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description: "The after cursor provided by a prior request.",
            },
            filter: {
              type: "string",
              optional: true,
              description:
                "Apply various filters by using supported request filtering properties. Example filter=requestStatus eq `RESOLVED` AND lastUpdated gt `2022-05-24T14:15:22Z`",
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default will be 20",
            },
            orderBy: {
              type: "string",
              optional: true,
              description:
                "Apply an ordering of requests by specifying a supported request property name. Example orderBy=created desc or orderBy=lastUpdated desc.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                    },
                    name: {
                      type: "string",
                      optional: true,
                    },
                    description: {
                      type: "string",
                      optional: true,
                    },
                    created: {
                      type: "string",
                      optional: true,
                    },
                    createdBy: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdated: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdatedBy: {
                      type: "string",
                      optional: true,
                    },
                    status: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdateSource: {
                      type: "string",
                      optional: true,
                    },
                    _links: {
                      type: "object",
                      schema: {
                        createRequest: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                            type: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                        requests: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                        self: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllRequest",
      description:
        "Lists all or a subset of requests made by users in your organization.",
      jsDoc:
        "\n/** \n*@method listAllRequest \n*@desc This is an openAPI method. Lists all or a subset of requests made by users in your organization. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request.\n * @param {string} parameters.filter - Apply various filters by using supported request filtering properties. Example filter=requestStatus eq `RESOLVED` AND lastUpdated gt `2022-05-24T14:15:22Z`\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default will be 20\n * @param {string} parameters.orderBy - Apply an ordering of requests by specifying a supported request property name. Example orderBy=created desc or orderBy=lastUpdated desc.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description: "The after cursor provided by a prior request.",
            },
            filter: {
              type: "string",
              optional: true,
              description:
                "Apply various filters by using supported request filtering properties. Example filter=requestStatus eq `RESOLVED` AND lastUpdated gt `2022-05-24T14:15:22Z`",
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default will be 20",
            },
            orderBy: {
              type: "string",
              optional: true,
              description:
                "Apply an ordering of requests by specifying a supported request property name. Example orderBy=created desc or orderBy=lastUpdated desc.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                    },
                    subject: {
                      type: "string",
                      optional: true,
                    },
                    requestTypeId: {
                      type: "string",
                      optional: true,
                    },
                    requesterUserIds: {
                      type: "array",
                      items: {
                        type: "string",
                      },
                    },
                    created: {
                      type: "string",
                      optional: true,
                    },
                    createdBy: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdated: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdatedBy: {
                      type: "string",
                      optional: true,
                    },
                    resolved: {
                      type: "string",
                      optional: true,
                    },
                    requestStatus: {
                      type: "string",
                      optional: true,
                    },
                    type: {
                      type: "string",
                      optional: true,
                    },
                    _links: {
                      type: "object",
                      schema: {
                        requestType: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                            type: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                        self: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                            type: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  next: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "createRequest",
      description:
        "Creates a request to access a resource in your organization.",
      jsDoc:
        "\n/** \n*@method createRequest \n*@desc This is an openAPI method. Creates a request to access a resource in your organization. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.requestTypeId \n * @param {string} parameters.subject \n * @param {Array<object>} parameters.requesterFieldValues \n * @param {string} parameters.requesterFieldValues[].id \n * @param {boolean} parameters.requesterFieldValues[].value \n * @param {string[]} parameters.requesterUserIds \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            requestTypeId: {
              type: "string",
              optional: false,
            },
            subject: {
              type: "string",
              optional: false,
            },
            requesterFieldValues: {
              type: "array",
              items: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                  },
                  value: {
                    type: "boolean",
                    optional: true,
                  },
                },
              },
            },
            requesterUserIds: {
              type: "array",
              items: {
                type: "string",
              },
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              subject: {
                type: "string",
                optional: true,
              },
              requestTypeId: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              createdBy: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              lastUpdatedBy: {
                type: "string",
                optional: true,
              },
              resolved: {
                type: "string",
                optional: true,
              },
              requestStatus: {
                type: "string",
                optional: true,
              },
              requesterUserIds: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              requesterFieldValues: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                    },
                    prompt: {
                      type: "string",
                      optional: true,
                    },
                    required: {
                      type: "boolean",
                      optional: true,
                    },
                    type: {
                      type: "boolean",
                      optional: true,
                    },
                    value: {
                      type: "boolean",
                      optional: true,
                    },
                  },
                },
              },
              approvals: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    status: {
                      type: "string",
                      optional: true,
                    },
                    approvalId: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
              actions: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    status: {
                      type: "string",
                      optional: true,
                    },
                    action: {
                      type: "string",
                      optional: true,
                    },
                    actionId: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
              type: {
                type: "string",
                optional: true,
              },
              _links: {
                type: "object",
                schema: {
                  requestType: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveSingleRequest",
      description: "Retrieves the full representation of a specific request.",
      jsDoc:
        "\n/** \n*@method retrieveSingleRequest \n*@desc This is an openAPI method. Retrieves the full representation of a specific request. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.requestId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            requestId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              subject: {
                type: "string",
                optional: true,
              },
              requestTypeId: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              createdBy: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              lastUpdatedBy: {
                type: "string",
                optional: true,
              },
              resolved: {
                type: "string",
                optional: true,
              },
              requestStatus: {
                type: "string",
                optional: true,
              },
              requesterUserIds: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              requesterFieldValues: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                    },
                    prompt: {
                      type: "string",
                      optional: true,
                    },
                    type: {
                      type: "string",
                      optional: true,
                    },
                    value: {
                      type: "string",
                      optional: true,
                    },
                    required: {
                      type: "boolean",
                      optional: true,
                    },
                  },
                },
              },
              approvals: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    status: {
                      type: "string",
                      optional: true,
                    },
                    approvalId: {
                      type: "string",
                      optional: true,
                    },
                    approverId: {
                      type: "string",
                      optional: true,
                    },
                    approverName: {
                      type: "string",
                      optional: true,
                    },
                    decision: {
                      type: "string",
                      optional: true,
                    },
                    decided: {
                      type: "string",
                      optional: true,
                    },
                    fieldValues: {
                      type: "array",
                      items: {
                        type: "object",
                        schema: {
                          id: {
                            type: "string",
                            optional: true,
                          },
                          type: {
                            type: "string",
                            optional: true,
                          },
                          prompt: {
                            type: "string",
                            optional: true,
                          },
                          required: {
                            type: "boolean",
                            optional: true,
                          },
                          value: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              actions: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    status: {
                      type: "string",
                      optional: true,
                    },
                    action: {
                      type: "string",
                      optional: true,
                    },
                    actionId: {
                      type: "string",
                      optional: true,
                    },
                    actionStatus: {
                      type: "string",
                      optional: true,
                    },
                    actionAttempted: {
                      type: "string",
                      optional: true,
                    },
                    resourceId: {
                      type: "string",
                      optional: true,
                    },
                    resourceName: {
                      type: "string",
                      optional: true,
                    },
                    resourceType: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
              type: {
                type: "string",
                optional: true,
              },
              _links: {
                type: "object",
                schema: {
                  requestType: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "createMessageForRequest",
      description: "Creates a message to add context to the request.",
      jsDoc:
        "\n/** \n*@method createMessageForRequest \n*@desc This is an openAPI method. Creates a message to add context to the request. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.requestId \n * @param {string} parameters.message \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            requestId: {
              type: "string",
              optional: false,
            },
            message: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "getAllEntitlements",
      description: "Get all Entitlements",
      jsDoc:
        '\n/** \n*@method getAllEntitlements \n*@desc This is an openAPI method. Get all Entitlements \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request. The value will be found in the href link under next attribute query param.\n * @param {string} parameters.filter - Apply various filters by using supported entitlements filtering properties. Resource filter is required before any other supported filtering. EX: parent.externalId eq "{externalId}" AND parent.type eq "APPLICATION". Supported filters are 1) Filter by resource. Ex: parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION". 2) Filter by resource ORN representing a single resource. Ex: parentResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ". 3) Filter by entitlement name starting with provided prefix. Ex: parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND name sw "License". 4) Filter by entitlement id. Ex: parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND (id eq "espfxqCAJWWGELFTYASJ" OR id eq "espfxqCAJWWGELFTYASI")\n * @param {string} parameters.limit - The maximum number of records that will be returned in a given result. Value must be in-between 1 to 200.\n * @param {string} parameters.orderBy - A field by which results can be sorted. For now, sorting by a single field is supported. For EX:- name asc\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description:
                "The after cursor provided by a prior request. The value will be found in the href link under next attribute query param.",
            },
            filter: {
              type: "string",
              optional: false,
              description:
                'Apply various filters by using supported entitlements filtering properties. Resource filter is required before any other supported filtering. EX: parent.externalId eq "{externalId}" AND parent.type eq "APPLICATION". Supported filters are 1) Filter by resource. Ex: parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION". 2) Filter by resource ORN representing a single resource. Ex: parentResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ". 3) Filter by entitlement name starting with provided prefix. Ex: parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND name sw "License". 4) Filter by entitlement id. Ex: parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND (id eq "espfxqCAJWWGELFTYASJ" OR id eq "espfxqCAJWWGELFTYASI")',
            },
            limit: {
              type: "string",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Value must be in-between 1 to 200.",
            },
            orderBy: {
              type: "string",
              optional: true,
              description:
                "A field by which results can be sorted. For now, sorting by a single field is supported. For EX:- name asc",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                      description: "The unique identifier for the entitlement",
                    },
                    name: {
                      type: "string",
                      optional: true,
                      description: "The name of the entitlement",
                    },
                    externalValue: {
                      type: "string",
                      optional: true,
                      description:
                        "An external value associated with the entitlement",
                    },
                    description: {
                      type: "string",
                      optional: true,
                      description: "A description of the entitlement",
                    },
                    multiValue: {
                      type: "boolean",
                      optional: true,
                      description:
                        "Indicates if the entitlement allows multiple values",
                    },
                    required: {
                      type: "boolean",
                      optional: true,
                      description: "Indicates if the entitlement is required",
                    },
                    dataType: {
                      type: "string",
                      optional: true,
                      description: "The data type of the entitlement",
                    },
                    parentResourceOrn: {
                      type: "string",
                      optional: true,
                      description:
                        "The parent resource's ORN (Object Resource Name)",
                    },
                    parent: {
                      type: "object",
                      schema: {
                        externalId: {
                          type: "string",
                          optional: true,
                          description: "The external identifier of the parent",
                        },
                        type: {
                          type: "string",
                          optional: true,
                          description: "The type of the parent resource",
                        },
                        name: {
                          type: "string",
                          optional: true,
                          description: "The name of the parent resource",
                        },
                      },
                      description: "Information about the parent resource",
                    },
                    values: {
                      type: "array",
                      items: {
                        type: "object",
                        schema: {
                          id: {
                            type: "string",
                            optional: true,
                            description: "The unique identifier for the value",
                          },
                          name: {
                            type: "string",
                            optional: true,
                            description: "The name of the value",
                          },
                          description: {
                            type: "string",
                            optional: true,
                            description: "A description of the value",
                          },
                          externalValue: {
                            type: "string",
                            optional: true,
                            description:
                              "An external value associated with the value",
                          },
                        },
                      },
                    },
                    metadata: {
                      type: "object",
                      schema: {
                        total: {
                          type: "integer",
                          optional: true,
                          description: "The total number of metadata items",
                        },
                      },
                      description: "Metadata related to the entitlement",
                    },
                    _links: {
                      type: "object",
                      schema: {
                        self: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                              description: "Link to the entitlement resource",
                            },
                          },
                          description: "Link to the entitlement resource",
                        },
                        values: {
                          type: "object",
                          schema: {
                            self: {
                              type: "object",
                              schema: {
                                href: {
                                  type: "string",
                                  optional: true,
                                  description:
                                    "Link to the values of the entitlement",
                                },
                              },
                              description:
                                "Link to the values of the entitlement",
                            },
                            next: {
                              type: "object",
                              schema: {
                                href: {
                                  type: "string",
                                  optional: true,
                                  description:
                                    "Link to the next set of values if available",
                                },
                              },
                              description:
                                "Link to the next set of values if available",
                            },
                          },
                          description: "Links related to entitlement values",
                        },
                      },
                      description: "Links associated with the entitlement",
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                        description: "Link to the entitlements resource",
                      },
                    },
                    description: "Link to the entitlements resource",
                  },
                },
                description: "Links associated with the response",
              },
              metadata: {
                type: "object",
                schema: {
                  total: {
                    type: "integer",
                    optional: true,
                    description:
                      "The total number of entitlements in the response",
                  },
                },
                description: "Metadata related to the response",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "createEntitlement",
      description: "Create an Entitlements",
      jsDoc:
        "\n/** \n*@method createEntitlement \n*@desc This is an openAPI method. Create an Entitlements \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.name - The name of the entitlement\n * @param {string} parameters.externalValue - An external value associated with the entitlement\n * @param {string} parameters.description - A description of the entitlement\n * @param {object} parameters.parent - Information about the parent resource\n * @param {string} parameters.parent.externalId - The external identifier of the parent\n * @param {string} parameters.parent.type - The type of the parent resource\n * @param {boolean} parameters.multiValue - Indicates if the entitlement allows multiple values\n * @param {string} parameters.dataType - The data type of the entitlement\n * @param {Array<object>} parameters.values \n * @param {string} parameters.values[].name - The name of the value\n * @param {string} parameters.values[].description - A description of the value\n * @param {string} parameters.values[].externalValue - An external value associated with the value\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            name: {
              type: "string",
              optional: false,
              description: "The name of the entitlement",
            },
            externalValue: {
              type: "string",
              optional: false,
              description: "An external value associated with the entitlement",
            },
            description: {
              type: "string",
              optional: true,
              description: "A description of the entitlement",
            },
            parent: {
              type: "object",
              schema: {
                externalId: {
                  type: "string",
                  optional: false,
                  description: "The external identifier of the parent",
                },
                type: {
                  type: "string",
                  optional: false,
                  description: "The type of the parent resource",
                },
              },
              description: "Information about the parent resource",
            },
            multiValue: {
              type: "boolean",
              optional: false,
              description:
                "Indicates if the entitlement allows multiple values",
            },
            dataType: {
              type: "string",
              optional: false,
              description: "The data type of the entitlement",
            },
            values: {
              type: "array",
              items: {
                type: "object",
                schema: {
                  name: {
                    type: "string",
                    optional: false,
                    description: "The name of the value",
                  },
                  description: {
                    type: "string",
                    optional: true,
                    description: "A description of the value",
                  },
                  externalValue: {
                    type: "string",
                    optional: false,
                    description: "An external value associated with the value",
                  },
                },
              },
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
                description: "The unique identifier for the entitlement",
              },
              name: {
                type: "string",
                optional: true,
                description: "The name of the entitlement",
              },
              externalValue: {
                type: "string",
                optional: true,
                description:
                  "An external value associated with the entitlement",
              },
              description: {
                type: "string",
                optional: true,
                description: "A description of the entitlement",
              },
              parentResourceOrn: {
                type: "string",
                optional: true,
                description: "The parent resource's ORN (Object Resource Name)",
              },
              parent: {
                type: "object",
                schema: {
                  externalId: {
                    type: "string",
                    optional: true,
                    description: "The external identifier of the parent",
                  },
                  type: {
                    type: "string",
                    optional: true,
                    description: "The type of the parent resource",
                  },
                },
                description: "Information about the parent resource",
              },
              multiValue: {
                type: "boolean",
                optional: true,
                description:
                  "Indicates if the entitlement allows multiple values",
              },
              dataType: {
                type: "string",
                optional: true,
                description: "The data type of the entitlement",
              },
              values: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                      description: "The unique identifier for the value",
                    },
                    name: {
                      type: "string",
                      optional: true,
                      description: "The name of the value",
                    },
                    description: {
                      type: "string",
                      optional: true,
                      description: "A description of the value",
                    },
                    externalValue: {
                      type: "string",
                      optional: true,
                      description:
                        "An external value associated with the value",
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveEntitlement",
      description: "Retrieve an entitlement",
      jsDoc:
        "\n/** \n*@method retrieveEntitlement \n*@desc This is an openAPI method. Retrieve an entitlement \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.entitlementId - The id of the entitlement.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            entitlementId: {
              type: "string",
              optional: false,
              description: "The id of the entitlement.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              parentResourceOrn: {
                type: "string",
                optional: false,
              },
              parent: {
                type: "object",
                schema: {
                  externalId: {
                    type: "string",
                    optional: false,
                  },
                  type: {
                    type: "string",
                    optional: false,
                  },
                },
              },
              values: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: false,
                    },
                    name: {
                      type: "string",
                      optional: false,
                    },
                    externalValue: {
                      type: "string",
                      optional: false,
                    },
                    externalId: {
                      type: "string",
                      optional: false,
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                      hints: {
                        type: "object",
                        schema: {},
                      },
                    },
                  },
                },
              },
              metadata: {
                type: "object",
                schema: {
                  total: {
                    type: "integer",
                    optional: false,
                  },
                },
              },
              id: {
                type: "string",
                optional: false,
              },
              name: {
                type: "string",
                optional: false,
              },
              externalValue: {
                type: "string",
                optional: false,
              },
              description: {
                type: "string",
                optional: false,
              },
              multiValue: {
                type: "boolean",
                optional: false,
              },
              required: {
                type: "boolean",
                optional: false,
              },
              dataType: {
                type: "string",
                optional: false,
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "replaceEntitlement",
      description: "Replace an entitlement",
      jsDoc:
        "\n/** \n*@method replaceEntitlement \n*@desc This is an openAPI method. Replace an entitlement \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.entitlementId - The id of the entitlement.\n * @param {string} parameters.dataType - The data type of the entitlement property\n * @param {string} parameters.externalValue - The value of an entitlement property\n * @param {string} parameters.id - The id of an entitlement property\n * @param {boolean} parameters.multiValue - Determines if the entitlement property can hold multiple values\n * @param {string} parameters.name - The display name for an entitlement property\n * @param {object} parameters.parent - Full representation of a resource\n * @param {string} parameters.parent.parentResourceOrn - The Okta App instance id in ORN format\n * @param {object} parameters._links - Links available in entitlements list response\n * @param {string} parameters.description - The description of an entitlement property\n * @param {object} parameters.metadata - Metadata describing the entitlement\n * @param {boolean} parameters.required - Determines if the entitlement property is a required attribute\n * @param {object[]} parameters.values - Collection of entitlement values\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            entitlementId: {
              type: "string",
              optional: false,
              description: "The id of the entitlement.",
            },
            dataType: {
              type: "string",
              optional: false,
              description: "The data type of the entitlement property",
            },
            externalValue: {
              type: "string",
              optional: false,
              description: "The value of an entitlement property",
            },
            id: {
              type: "string",
              optional: false,
              description: "The id of an entitlement property",
            },
            multiValue: {
              type: "boolean",
              optional: false,
              description:
                "Determines if the entitlement property can hold multiple values",
            },
            name: {
              type: "string",
              optional: false,
              description: "The display name for an entitlement property",
            },
            parent: {
              type: "object",
              schema: {
                parentResourceOrn: {
                  type: "string",
                  optional: false,
                  description: "The Okta App instance id in ORN format",
                },
              },
              description: "Full representation of a resource",
            },
            _links: {
              type: "object",
              schema: {},
              description: "Links available in entitlements list response",
            },
            description: {
              type: "string",
              optional: true,
              description: "The description of an entitlement property",
            },
            metadata: {
              type: "object",
              schema: {},
              description: "Metadata describing the entitlement",
            },
            required: {
              type: "boolean",
              optional: true,
              description:
                "Determines if the entitlement property is a required attribute",
            },
            values: {
              type: "array",
              items: {
                type: "object",
                schema: {},
              },
              description: "Collection of entitlement values",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              parentResourceOrn: {
                type: "string",
                optional: false,
              },
              parent: {
                type: "object",
                schema: {
                  externalId: {
                    type: "string",
                    optional: false,
                  },
                  type: {
                    type: "string",
                    optional: false,
                  },
                },
              },
              values: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: false,
                    },
                    name: {
                      type: "string",
                      optional: false,
                    },
                    externalValue: {
                      type: "string",
                      optional: false,
                    },
                    externalId: {
                      type: "string",
                      optional: false,
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                      hints: {
                        type: "object",
                        schema: {},
                      },
                    },
                  },
                },
              },
              metadata: {
                type: "object",
                schema: {
                  total: {
                    type: "integer",
                    optional: false,
                  },
                },
              },
              id: {
                type: "string",
                optional: false,
              },
              name: {
                type: "string",
                optional: false,
              },
              externalValue: {
                type: "string",
                optional: false,
              },
              description: {
                type: "string",
                optional: false,
              },
              multiValue: {
                type: "boolean",
                optional: false,
              },
              required: {
                type: "boolean",
                optional: false,
              },
              dataType: {
                type: "string",
                optional: false,
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deleteEntitlement",
      description: "Delete an entitlement",
      jsDoc:
        "\n/** \n*@method deleteEntitlement \n*@desc This is an openAPI method. Delete an entitlement \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.entitlementId - The id of the entitlement.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            entitlementId: {
              type: "string",
              optional: false,
              description: "The id of the entitlement.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "ListAllValuesForEntitlement",
      description: "List all values for an entitlement",
      jsDoc:
        '\n/** \n*@method ListAllValuesForEntitlement \n*@desc This is an openAPI method. List all values for an entitlement \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.entitlementId - The id of the entitlement.\n * @param {string} parameters.after - The after cursor provided by a prior request.\n * @param {string} parameters.filter - Apply various filters by using supported entitlement values filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by entitlement name starting with provided prefix\nQuery param: ?filter=name sw "License"\nfilter=name%20sw%20%22License%22\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default: 20\n * @param {string[]} parameters.orderBy - A field by which results can be sorted. For now, sorting by a single field is supported. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by name\nQuery param: ?orderBy=name asc\norderBy=name%20asc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            entitlementId: {
              type: "string",
              optional: false,
              description: "The id of the entitlement.",
            },
            after: {
              type: "string",
              optional: true,
              description: "The after cursor provided by a prior request.",
            },
            filter: {
              type: "string",
              optional: true,
              description:
                'Apply various filters by using supported entitlement values filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by entitlement name starting with provided prefix\nQuery param: ?filter=name sw "License"\nfilter=name%20sw%20%22License%22',
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default: 20",
            },
            orderBy: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                "A field by which results can be sorted. For now, sorting by a single field is supported. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by name\nQuery param: ?orderBy=name asc\norderBy=name%20asc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                    },
                    name: {
                      type: "string",
                      optional: true,
                    },
                    externalValue: {
                      type: "string",
                      optional: true,
                    },
                    externalId: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                      hints: {
                        type: "object",
                        schema: {},
                      },
                    },
                  },
                },
              },
              metadata: {
                type: "object",
                schema: {
                  total: {
                    type: "integer",
                    optional: false,
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllEntitlementValues",
      description: "List all Entitlement values",
      jsDoc:
        '\n/** \n*@method listAllEntitlementValues \n*@desc This is an openAPI method. List all Entitlement values \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request.\n * @param {string} parameters.filter - Apply various filters by using supported entitlements filtering properties. Resource filter is required before any other supported filtering. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by resource\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION"\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22\n- Filter by resource ORN representing a single resource\nQuery param: ?filter=parentResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ"\nfilter=parentResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22\n- Filter by entitlement value name starting with provided prefix\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND name sw "License"\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22%20AND%20name%20sw%20%22License%22\n- Filter by entitlement id\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND (entitlementId eq "espfxqCAJWWGELFTYASJ" OR entitlementId eq "espfxqCAJWWGELFTYASI")\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22%20AND%20%28entitlementId%20eq%20%22espfxqCAJWWGELFTYASJ%22%20OR%20entitlementId%20eq%20%22espfxqCAJWWGELFTYASI%22%29\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default: 200\n * @param {string[]} parameters.orderBy - A field by which results can be sorted. For now, sorting by a single field is supported. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by name\nQuery param: ?orderBy=name asc\norderBy=name%20asc\n- Order by id\nQuery param: ?orderBy=id desc\norderBy=id%20desc\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description: "The after cursor provided by a prior request.",
            },
            filter: {
              type: "string",
              optional: false,
              description:
                'Apply various filters by using supported entitlements filtering properties. Resource filter is required before any other supported filtering. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by resource\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION"\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22\n- Filter by resource ORN representing a single resource\nQuery param: ?filter=parentResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ"\nfilter=parentResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22\n- Filter by entitlement value name starting with provided prefix\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND name sw "License"\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22%20AND%20name%20sw%20%22License%22\n- Filter by entitlement id\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND (entitlementId eq "espfxqCAJWWGELFTYASJ" OR entitlementId eq "espfxqCAJWWGELFTYASI")\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22%20AND%20%28entitlementId%20eq%20%22espfxqCAJWWGELFTYASJ%22%20OR%20entitlementId%20eq%20%22espfxqCAJWWGELFTYASI%22%29',
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default: 200",
            },
            orderBy: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                "A field by which results can be sorted. For now, sorting by a single field is supported. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by name\nQuery param: ?orderBy=name asc\norderBy=name%20asc\n- Order by id\nQuery param: ?orderBy=id desc\norderBy=id%20desc",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                      description: "The unique identifier for the entitlement",
                    },
                    name: {
                      type: "string",
                      optional: true,
                      description: "The name of the entitlement",
                    },
                    externalValue: {
                      type: "string",
                      optional: true,
                      description:
                        "An external value associated with the entitlement",
                    },
                    externalId: {
                      type: "string",
                      optional: true,
                      description:
                        "An external value associated with the entitlement",
                    },
                    entitlementId: {
                      type: "string",
                      optional: true,
                      description:
                        "An external value associated with the entitlement",
                    },
                    parentResourceOrn: {
                      type: "string",
                      optional: true,
                      description:
                        "The parent resource's ORN (Object Resource Name)",
                    },
                    parent: {
                      type: "object",
                      schema: {
                        externalId: {
                          type: "string",
                          optional: true,
                          description: "The external identifier of the parent",
                        },
                        type: {
                          type: "string",
                          optional: true,
                          description: "The type of the parent resource",
                        },
                        name: {
                          type: "string",
                          optional: true,
                          description: "The name of the parent resource",
                        },
                      },
                      description: "Information about the parent resource",
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                        description: "Link to the entitlements resource",
                      },
                    },
                    description: "Link to the entitlements resource",
                  },
                },
                description: "Links associated with the response",
              },
              metadata: {
                type: "object",
                schema: {
                  total: {
                    type: "integer",
                    optional: true,
                    description:
                      "The total number of entitlements in the response",
                  },
                },
                description: "Metadata related to the response",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllEntitlementBundles",
      description: "List all entitlement bundles",
      jsDoc:
        '\n/** \n*@method listAllEntitlementBundles \n*@desc This is an openAPI method. List all entitlement bundles \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request.\n * @param {string} parameters.filter - Apply various filters by using supported entitlement-bundles filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by lastUpdated\nQuery param: ?filter=lastUpdated gt "2022-05-24T14:15:22Z"\nfilter=lastUpdated%20gt%20%222022-05-24T14%3A15%3A22Z%22\n- Filter by lastUpdated and id\nQuery param: ?filter=lastUpdated ge "2022-05-24T14:15:22Z" AND id gt "0bbfxqCAJWWGELFTYBBB"\nfilter=lastUpdated%20ge%20%222022-05-24T14%3A15%3A22Z%22%20AND%20id%20gt%20%220bbfxqCAJWWGELFTYBBB%22\n- Filter by lastUpdated or lastUpdated and id\nQuery param: ?filter=lastUpdated gt "2022-05-24T14:15:22Z" OR (lastUpdated ge "2022-05-24T14:15:22Z" AND id gt "0bbfxqCAJWWGELFTYBBB")\nfilter=lastUpdated%20gt%20%222022-05-24T14%3A15%3A22Z%22%20OR%20(lastUpdated%20ge%20%222022-05-24T14%3A15%3A22Z%22%20AND%20id%20gt%20%220bbfxqCAJWWGELFTYBBB%22)\n- Filter by target.externalId and target.type\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22\n- Filter by resource ORN representing a single resource\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22\n- Filter by status\nQuery param: ?filter=status eq "ACTIVE"\nfilter=status%20eq%20%22ACTIVE%22\n- Filter by name prefix\nQuery param: ?filter=name sw "sales"\nfilter=name%20sw%20%22sales%22\n * @param {string[]} parameters.include - The include filter adds additional properties that are available in the retrieve an entitlement bundle operation, but are omitted from the list response normally.\n\nExamples:\n- Include entitlements in response\nQuery param: ?include=full_entitlements\ninclude=full_entitlements\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default: 20\n * @param {string} parameters.orderBy - Apply an ordering of entitlement-bundles by specifying a supported entitlement bundle property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by lastUpdated\nQuery param: ?orderBy=lastUpdated desc\norderBy=lastUpdated%20desc\n- Order by lastUpdated and id\nQuery param: ?orderBy=lastUpdated asc,id asc\norderBy=lastUpdated%20asc%2Cid%20asc\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description: "The after cursor provided by a prior request.",
            },
            filter: {
              type: "string",
              optional: true,
              description:
                'Apply various filters by using supported entitlement-bundles filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by lastUpdated\nQuery param: ?filter=lastUpdated gt "2022-05-24T14:15:22Z"\nfilter=lastUpdated%20gt%20%222022-05-24T14%3A15%3A22Z%22\n- Filter by lastUpdated and id\nQuery param: ?filter=lastUpdated ge "2022-05-24T14:15:22Z" AND id gt "0bbfxqCAJWWGELFTYBBB"\nfilter=lastUpdated%20ge%20%222022-05-24T14%3A15%3A22Z%22%20AND%20id%20gt%20%220bbfxqCAJWWGELFTYBBB%22\n- Filter by lastUpdated or lastUpdated and id\nQuery param: ?filter=lastUpdated gt "2022-05-24T14:15:22Z" OR (lastUpdated ge "2022-05-24T14:15:22Z" AND id gt "0bbfxqCAJWWGELFTYBBB")\nfilter=lastUpdated%20gt%20%222022-05-24T14%3A15%3A22Z%22%20OR%20(lastUpdated%20ge%20%222022-05-24T14%3A15%3A22Z%22%20AND%20id%20gt%20%220bbfxqCAJWWGELFTYBBB%22)\n- Filter by target.externalId and target.type\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22\n- Filter by resource ORN representing a single resource\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22\n- Filter by status\nQuery param: ?filter=status eq "ACTIVE"\nfilter=status%20eq%20%22ACTIVE%22\n- Filter by name prefix\nQuery param: ?filter=name sw "sales"\nfilter=name%20sw%20%22sales%22',
            },
            include: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                "The include filter adds additional properties that are available in the retrieve an entitlement bundle operation, but are omitted from the list response normally.\n\nExamples:\n- Include entitlements in response\nQuery param: ?include=full_entitlements\ninclude=full_entitlements",
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default: 20",
            },
            orderBy: {
              type: "string",
              optional: true,
              description:
                "Apply an ordering of entitlement-bundles by specifying a supported entitlement bundle property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by lastUpdated\nQuery param: ?orderBy=lastUpdated desc\norderBy=lastUpdated%20desc\n- Order by lastUpdated and id\nQuery param: ?orderBy=lastUpdated asc,id asc\norderBy=lastUpdated%20asc%2Cid%20asc",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    targetResourceOrn: {
                      type: "string",
                      optional: false,
                    },
                    target: {
                      type: "object",
                      schema: {
                        externalId: {
                          type: "string",
                          optional: false,
                        },
                        type: {
                          type: "string",
                          optional: false,
                        },
                      },
                    },
                    status: {
                      type: "string",
                      optional: false,
                    },
                    entitlements: {
                      type: "array",
                      items: {},
                    },
                    _links: {
                      type: "object",
                      schema: {
                        self: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: false,
                            },
                            hints: {
                              type: "object",
                              schema: {},
                            },
                          },
                        },
                      },
                    },
                    name: {
                      type: "string",
                      optional: false,
                    },
                    description: {
                      type: "string",
                      optional: false,
                    },
                    id: {
                      type: "string",
                      optional: false,
                    },
                    createdBy: {
                      type: "string",
                      optional: false,
                    },
                    created: {
                      type: "string",
                      optional: false,
                    },
                    lastUpdated: {
                      type: "string",
                      optional: false,
                    },
                    lastUpdatedBy: {
                      type: "string",
                      optional: false,
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                      hints: {
                        type: "object",
                        schema: {},
                      },
                    },
                  },
                },
              },
              metadata: {
                type: "object",
                schema: {
                  total: {
                    type: "integer",
                    optional: false,
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveEntitlementBundle",
      description: "Retrieve an entitlement bundle",
      jsDoc:
        '\n/** \n*@method retrieveEntitlementBundle \n*@desc This is an openAPI method. Retrieve an entitlement bundle \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.entitlementBundleId - The id of the entitlement bundle.\n * @param {string[]} parameters.include - The include filter adds additional properties that are available in the retrieve an entitlement bundle operation, but are omitted from the list response normally. Items Value: "full_entitlements" Examples: Include entitlements in response Query param: ?include=full_entitlements include=full_entitlements\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            entitlementBundleId: {
              type: "string",
              optional: false,
              description: "The id of the entitlement bundle.",
            },
            include: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                'The include filter adds additional properties that are available in the retrieve an entitlement bundle operation, but are omitted from the list response normally. Items Value: "full_entitlements" Examples: Include entitlements in response Query param: ?include=full_entitlements include=full_entitlements',
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              targetResourceOrn: {
                type: "string",
                optional: true,
              },
              target: {
                type: "object",
                schema: {
                  externalId: {
                    type: "string",
                    optional: false,
                  },
                  type: {
                    type: "string",
                    optional: false,
                  },
                },
              },
              status: {
                type: "string",
                optional: true,
              },
              entitlements: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: false,
                    },
                    values: {
                      type: "array",
                      items: {
                        type: "object",
                        schema: {
                          id: {
                            type: "string",
                            optional: false,
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                      hints: {
                        type: "object",
                        schema: {},
                      },
                    },
                  },
                },
              },
              name: {
                type: "string",
                optional: true,
              },
              description: {
                type: "string",
                optional: true,
              },
              id: {
                type: "string",
                optional: true,
              },
              createdBy: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              lastUpdatedBy: {
                type: "string",
                optional: true,
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllCampaigns",
      description: "Lists all or a subset of campaigns in your organization.",
      jsDoc:
        '\n/** \n*@method listAllCampaigns \n*@desc This is an openAPI method. Lists all or a subset of campaigns in your organization. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request.\n * @param {string} parameters.filter - Apply various filters by using supported campaign filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by campaign name\nQuery param: ?filter=name eq "Sales Review"\nfilter=name%20eq%20%22Sales%20Review%22\n- Filter by campaign status\nQuery param: ?filter=status eq "SCHEDULED"\nfilter=status%20eq%20%22SCHEDULED%22\n- Filter by multiple campaign status\nQuery param: ?filter=status eq "COMPLETED" OR status eq "SCHEDULED"\nfilter=status%20eq%20%22COMPLETED%22%20OR%20status%20eq%20%22SCHEDULED%22\n- Filter by start date\nQuery param: ?filter=startDate gt "2022-05-24T14:15:22Z"\nfilter=startDate%20gt%20%222022-05-24T14%3A15%3A22Z%22\n- Filter by end date\nQuery param: ?filter=endDate gt "2022-05-24T14:15:22Z"\nfilter=endDate%20gt%20%222022-05-24T14%3A15%3A22Z%22\n- Filter by schedule type ONE_OFF\nQuery param: ?filter=scheduleType eq "ONE_OFF"\nfilter=scheduleType%20eq%20ONE_OFF\n- Filter by schedule type RECURRING\nQuery param: ?filter=scheduleType eq "RECURRING"\nfilter=scheduleType%20eq%20RECURRING\n- Filter by reviewer type USER\nQuery param: ?filter=reviewerType eq "USER"\nfilter=reviewerType%20eq%20USER\n- Filter by reviewer type GROUP\nQuery param: ?filter=reviewerType eq "GROUP"\nfilter=reviewerType%20eq%20GROUP\n- Filter by reviewer type RESOURCE_OWNER\nQuery param: ?filter=reviewerType eq "RESOURCE_OWNER"\nfilter=reviewerType%20eq%20RESOURCE_OWNER\n- Filter by reviewer type MULTI_LEVEL\nQuery param: ?filter=reviewerType eq "MULTI_LEVEL"\nfilter=reviewerType%20eq%20MULTI_LEVEL\n- Filter by recurring campaign id\nQuery param: ?filter=recurringCampaignId eq "icijNW29nev6qyksD0g1"\nfilter=recurringCampaignId%20eq%20%22icijNW29nev6qyksD0g1%22\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default: 20\n * @param {string[]} parameters.orderBy - Apply an ordering of campaigns by specifying a supported campaign property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by name\nQuery param: ?orderBy=name desc\norderBy=name%20desc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by startDate\nQuery param: ?orderBy=startDate desc\norderBy=startDate%20desc\n- Order by endDate\nQuery param: ?orderBy=endDate desc\norderBy=endDate%20desc\n- Order by status\nQuery param: ?orderBy=status desc\norderBy=status%20desc\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description: "The after cursor provided by a prior request.",
            },
            filter: {
              type: "string",
              optional: false,
              description:
                'Apply various filters by using supported campaign filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by campaign name\nQuery param: ?filter=name eq "Sales Review"\nfilter=name%20eq%20%22Sales%20Review%22\n- Filter by campaign status\nQuery param: ?filter=status eq "SCHEDULED"\nfilter=status%20eq%20%22SCHEDULED%22\n- Filter by multiple campaign status\nQuery param: ?filter=status eq "COMPLETED" OR status eq "SCHEDULED"\nfilter=status%20eq%20%22COMPLETED%22%20OR%20status%20eq%20%22SCHEDULED%22\n- Filter by start date\nQuery param: ?filter=startDate gt "2022-05-24T14:15:22Z"\nfilter=startDate%20gt%20%222022-05-24T14%3A15%3A22Z%22\n- Filter by end date\nQuery param: ?filter=endDate gt "2022-05-24T14:15:22Z"\nfilter=endDate%20gt%20%222022-05-24T14%3A15%3A22Z%22\n- Filter by schedule type ONE_OFF\nQuery param: ?filter=scheduleType eq "ONE_OFF"\nfilter=scheduleType%20eq%20ONE_OFF\n- Filter by schedule type RECURRING\nQuery param: ?filter=scheduleType eq "RECURRING"\nfilter=scheduleType%20eq%20RECURRING\n- Filter by reviewer type USER\nQuery param: ?filter=reviewerType eq "USER"\nfilter=reviewerType%20eq%20USER\n- Filter by reviewer type GROUP\nQuery param: ?filter=reviewerType eq "GROUP"\nfilter=reviewerType%20eq%20GROUP\n- Filter by reviewer type RESOURCE_OWNER\nQuery param: ?filter=reviewerType eq "RESOURCE_OWNER"\nfilter=reviewerType%20eq%20RESOURCE_OWNER\n- Filter by reviewer type MULTI_LEVEL\nQuery param: ?filter=reviewerType eq "MULTI_LEVEL"\nfilter=reviewerType%20eq%20MULTI_LEVEL\n- Filter by recurring campaign id\nQuery param: ?filter=recurringCampaignId eq "icijNW29nev6qyksD0g1"\nfilter=recurringCampaignId%20eq%20%22icijNW29nev6qyksD0g1%22',
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default: 20",
            },
            orderBy: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                "Apply an ordering of campaigns by specifying a supported campaign property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by name\nQuery param: ?orderBy=name desc\norderBy=name%20desc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by startDate\nQuery param: ?orderBy=startDate desc\norderBy=startDate%20desc\n- Order by endDate\nQuery param: ?orderBy=endDate desc\norderBy=endDate%20desc\n- Order by status\nQuery param: ?orderBy=status desc\norderBy=status%20desc",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: false,
                    },
                    created: {
                      type: "string",
                      optional: false,
                    },
                    createdBy: {
                      type: "string",
                      optional: false,
                    },
                    lastUpdated: {
                      type: "string",
                      optional: false,
                    },
                    lastUpdatedBy: {
                      type: "string",
                      optional: false,
                    },
                    name: {
                      type: "string",
                      optional: false,
                    },
                    description: {
                      type: "string",
                      optional: false,
                    },
                    scheduleType: {
                      type: "string",
                      optional: false,
                    },
                    startDate: {
                      type: "string",
                      optional: false,
                    },
                    endDate: {
                      type: "string",
                      optional: false,
                    },
                    status: {
                      type: "string",
                      optional: false,
                    },
                    _links: {
                      type: "object",
                      schema: {
                        launchCampaign: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                        endCampaign: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                        reviews: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                        self: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  next: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveCampaign",
      description: "Retrieves the full representation of a specific campaign.",
      jsDoc:
        "\n/** \n*@method retrieveCampaign \n*@desc This is an openAPI method. Retrieves the full representation of a specific campaign. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.campaignId - The id of the campaign.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            campaignId: {
              type: "string",
              optional: false,
              description: "The id of the campaign.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              createdBy: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              lastUpdatedBy: {
                type: "string",
                optional: true,
              },
              name: {
                type: "string",
                optional: true,
              },
              description: {
                type: "string",
                optional: true,
              },
              scheduleSettings: {
                type: "object",
                schema: {
                  type: {
                    type: "string",
                    optional: false,
                  },
                  startDate: {
                    type: "string",
                    optional: false,
                  },
                  endDate: {
                    type: "string",
                    optional: false,
                  },
                  durationInDays: {
                    type: "integer",
                    optional: false,
                  },
                  timeZone: {
                    type: "string",
                    optional: false,
                  },
                },
              },
              resourceSettings: {
                type: "object",
                schema: {
                  type: {
                    type: "string",
                    optional: false,
                  },
                  targetResources: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        resourceId: {
                          type: "string",
                          optional: false,
                        },
                      },
                    },
                  },
                },
              },
              principalScopeSettings: {
                type: "object",
                schema: {
                  type: {
                    type: "string",
                    optional: false,
                  },
                  userScope: {
                    type: "object",
                    schema: {
                      userScopeExpression: {
                        type: "string",
                        optional: false,
                      },
                      excludedUserIds: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                    },
                  },
                },
              },
              reviewerSettings: {
                type: "object",
                schema: {
                  type: {
                    type: "string",
                    optional: false,
                  },
                  reviewerId: {
                    type: "string",
                    optional: false,
                  },
                  isSelfReviewDisabled: {
                    type: "boolean",
                    optional: false,
                  },
                },
              },
              remediationSettings: {
                type: "object",
                schema: {
                  accessApproved: {
                    type: "string",
                    optional: false,
                  },
                  accessRevoked: {
                    type: "string",
                    optional: false,
                  },
                  noResponse: {
                    type: "string",
                    optional: false,
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  launchCampaign: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                    },
                  },
                  endCampaign: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                    },
                  },
                  campaignDetails: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                    },
                  },
                  reviews: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listReviews",
      description: "Lists reviews for your organization.",
      jsDoc:
        '\n/** \n*@method listReviews \n*@desc This is an openAPI method. Lists reviews for your organization. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request.\n * @param {string} parameters.filter - Apply various filters by using supported review filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by campaign id\nQuery param: ?filter=campaignId eq "icitdyhndQ6qstyvR8g5"\nfilter=campaignId%20eq%20%22icitdyhndQ6qstyvR8g5%22\n- Filter by review decisions\nQuery param: ?filter=decision eq "UNREVIEWED"\nfilter=decision%20eq%20%22UNREVIEWED%22\n- Filter by reviewerId\nQuery param: ?filter=reviewerId eq "00u5v5viPvg84h0W68g4"\nfilter=reviewerId%20eq%20%2200u5v5viPvg84h0W68g4%22\n- Filter by group resourceId\nQuery param: ?filter=resourceId eq "00gyqjxNrsh764hjs784"\nfilter=resourceId%20eq%20%2200gyqjxNrsh764hjs784%22\n- Filter by app resourceId\nQuery param: ?filter=resourceId eq "00ayqjxNrZD11n4w40g3"\nfilter=resourceId%20eq%20%2200ayqjxNrZD11n4w40g3%22\n- Filter by principalId\nQuery param: ?filter=principalId eq "2200u5v5viPvg84h0W68g4"\nfilter=principalId%20eq%20%2200u5v5viPvg84h0W68g4%22\n- Filter by reviewerType\nQuery param: ?filter=reviewerType eq "USER"\nfilter=reviewerType%20eq%20USER\n- Filter by reviewerLevel\nQuery param: ?filter=reviewerLevel eq "FIRST"\nfilter=reviewerLevel%20eq%20FIRST\n- Filter by entitlement value id\nQuery param: ?filter=entitlementValueId eq "enthzzPJAXvaYQ71T0g3"\nfilter=entitlementValueId%20eq%20%22enthzzPJAXvaYQ71T0g3%22\n- Filter by entitlement bundle id\nQuery param: ?filter=entitlementType eq "enbisi7xt3iBd39Bn0g3"\nfilter=entitlementBundleId%20eq%22enbisi7xt3iBd39Bn0g3%22\n- Filter by assignment type\nQuery param: ?filter=assignmentType eq "CUSTOM"\nfilter=assignmentType%20eq%20CUSTOM\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default: 20\n * @param {string[]} parameters.orderBy - Apply an ordering of campaigns by specifying a supported campaign property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by decided\nQuery param: ?orderBy=decided desc\norderBy=decided%20desc\n- Order by decision\nQuery param: ?orderBy=decision desc\norderBy=decision%20desc\n- Order by remediationStatus\nQuery param: ?orderBy=remediationStatus desc\norderBy=remediationStatus%20desc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by assignmentType\nQuery param: ?orderBy=assignmentType desc\norderBy=assignmentType%20desc\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description: "The after cursor provided by a prior request.",
            },
            filter: {
              type: "string",
              optional: false,
              description:
                'Apply various filters by using supported review filtering properties. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter by campaign id\nQuery param: ?filter=campaignId eq "icitdyhndQ6qstyvR8g5"\nfilter=campaignId%20eq%20%22icitdyhndQ6qstyvR8g5%22\n- Filter by review decisions\nQuery param: ?filter=decision eq "UNREVIEWED"\nfilter=decision%20eq%20%22UNREVIEWED%22\n- Filter by reviewerId\nQuery param: ?filter=reviewerId eq "00u5v5viPvg84h0W68g4"\nfilter=reviewerId%20eq%20%2200u5v5viPvg84h0W68g4%22\n- Filter by group resourceId\nQuery param: ?filter=resourceId eq "00gyqjxNrsh764hjs784"\nfilter=resourceId%20eq%20%2200gyqjxNrsh764hjs784%22\n- Filter by app resourceId\nQuery param: ?filter=resourceId eq "00ayqjxNrZD11n4w40g3"\nfilter=resourceId%20eq%20%2200ayqjxNrZD11n4w40g3%22\n- Filter by principalId\nQuery param: ?filter=principalId eq "2200u5v5viPvg84h0W68g4"\nfilter=principalId%20eq%20%2200u5v5viPvg84h0W68g4%22\n- Filter by reviewerType\nQuery param: ?filter=reviewerType eq "USER"\nfilter=reviewerType%20eq%20USER\n- Filter by reviewerLevel\nQuery param: ?filter=reviewerLevel eq "FIRST"\nfilter=reviewerLevel%20eq%20FIRST\n- Filter by entitlement value id\nQuery param: ?filter=entitlementValueId eq "enthzzPJAXvaYQ71T0g3"\nfilter=entitlementValueId%20eq%20%22enthzzPJAXvaYQ71T0g3%22\n- Filter by entitlement bundle id\nQuery param: ?filter=entitlementType eq "enbisi7xt3iBd39Bn0g3"\nfilter=entitlementBundleId%20eq%22enbisi7xt3iBd39Bn0g3%22\n- Filter by assignment type\nQuery param: ?filter=assignmentType eq "CUSTOM"\nfilter=assignmentType%20eq%20CUSTOM',
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default: 20",
            },
            orderBy: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                "Apply an ordering of campaigns by specifying a supported campaign property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by decided\nQuery param: ?orderBy=decided desc\norderBy=decided%20desc\n- Order by decision\nQuery param: ?orderBy=decision desc\norderBy=decision%20desc\n- Order by remediationStatus\nQuery param: ?orderBy=remediationStatus desc\norderBy=remediationStatus%20desc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by assignmentType\nQuery param: ?orderBy=assignmentType desc\norderBy=assignmentType%20desc",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    campaignId: {
                      type: "string",
                      optional: true,
                    },
                    resourceId: {
                      type: "string",
                      optional: true,
                    },
                    decided: {
                      type: "string",
                      optional: true,
                    },
                    principalProfile: {
                      type: "object",
                      schema: {
                        id: {
                          type: "string",
                          optional: true,
                        },
                        email: {
                          type: "string",
                          optional: true,
                        },
                        firstName: {
                          type: "string",
                          optional: true,
                        },
                        lastName: {
                          type: "string",
                          optional: true,
                        },
                        status: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                    reviewerProfile: {
                      type: "object",
                      schema: {
                        id: {
                          type: "string",
                          optional: true,
                        },
                        email: {
                          type: "string",
                          optional: true,
                        },
                        firstName: {
                          type: "string",
                          optional: true,
                        },
                        lastName: {
                          type: "string",
                          optional: true,
                        },
                        status: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                    assignmentType: {
                      type: "string",
                      optional: true,
                    },
                    decision: {
                      type: "string",
                      optional: true,
                    },
                    remediationStatus: {
                      type: "string",
                      optional: true,
                    },
                    reviewerType: {
                      type: "string",
                      optional: true,
                    },
                    id: {
                      type: "string",
                      optional: true,
                    },
                    created: {
                      type: "string",
                      optional: true,
                    },
                    createdBy: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdated: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdatedBy: {
                      type: "string",
                      optional: true,
                    },
                    _links: {
                      type: "object",
                      schema: {
                        self: {
                          type: "object",
                          schema: {},
                        },
                        reassignReview: {
                          type: "object",
                          schema: {},
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  next: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveReview",
      description: "Retrieves the full representation of a specific review.",
      jsDoc:
        "\n/** \n*@method retrieveReview \n*@desc This is an openAPI method. Retrieves the full representation of a specific review. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.reviewId - The id of the review.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            reviewId: {
              type: "string",
              optional: false,
              description: "The id of the review.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              campaignId: {
                type: "string",
                optional: true,
              },
              resourceId: {
                type: "string",
                optional: true,
              },
              decided: {
                type: "string",
                optional: true,
              },
              principalProfile: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                  },
                  email: {
                    type: "string",
                    optional: true,
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                  },
                  status: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              reviewerProfile: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                  },
                  email: {
                    type: "string",
                    optional: true,
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                  },
                  status: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              assignmentType: {
                type: "string",
                optional: true,
              },
              decision: {
                type: "string",
                optional: true,
              },
              remediationStatus: {
                type: "string",
                optional: true,
              },
              note: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                  },
                  note: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              id: {
                type: "string",
                optional: true,
              },
              reviewerType: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              createdBy: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              lastUpdatedBy: {
                type: "string",
                optional: true,
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  reassignReview: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listGrants",
      description: "Lists grants for your organization.",
      jsDoc:
        '\n/** \n*@method listGrants \n*@desc This is an openAPI method. Lists grants for your organization. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - The after cursor provided by a prior request. Must be non-empty.\n * @param {string} parameters.filter - Apply various filters by using supported grants filtering properties. List of grants require either target.externalId and target.type, or targetResourceOrn to filter grants for a specific resource. Required parameter. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter grants for a resource and user\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND targetPrincipal.externalId eq "00ub0oNGTSWTBKOLGLNR" AND targetPrincipal.type eq "OKTA_USER"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20targetPrincipal.externalId%20eq%20%2200ub0oNGTSWTBKOLGLNR%22%20AND%20targetPrincipal.type%20eq%20%22OKTA_USER%22\n- Filter grants for a resource and user using ORNs\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ" AND targetPrincipalOrn eq "orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22%20AND%20targetPrincipalOrn%20eq%20%22orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR%22\n- Filter all grants for a resource using target resource ORN\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22\n- Filter grants with resource and entitlement bundle\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ" AND entitlementBundleId eq "08ab2db568c7c300079fefd0"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22%20AND%20entitlementBundleId%20eq%20%2208ab2db568c7c300079fefd0%22\n- Filter grants with resource and entitlement value id\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND entitlements.values.id eq "entfxqCAJWWFTFUUYBBB"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20entitlements.values.id%20eq%20%22entfxqCAJWWFTFUUYBBB%22\n- Filter grants with resource and entitlement id\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND entitlements.id eq "espfxqCAJWWFTFUUYKKK"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20entitlements.id%20eq%20%22espfxqCAJWWFTFUUYKKK%22\n- Filter grants with multiple entitlement value id and entitlement bundle id\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND (entitlements.values.id eq "entfxqCAJWWFTFUUYBBB" OR entitlements.values.id eq "entfxqCAJWWFTFUUYXXX" OR entitlementBundleId eq "08ab2db568c7c300079fefd0")\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20(entitlements.values.id%20eq%20%22entfxqCAJWWFTFUUYBBB%22%20OR%20entitlements.values.id%20eq%20%22entfxqCAJWWFTFUUYXXX%22%20OR%20entitlementBundleId%20eq%20%2208ab2db568c7c300079fefd0%22)\n * @param {string[]} parameters.include - The include filter adds additional properties in the response.\n\nItems Value: "full_entitlements" Examples:\n- Include complete entitlements in the response\nQuery param: ?include=full_entitlements\ninclude=full_entitlements\n * @param {integer} parameters.limit - The maximum number of records that will be returned in a given result. Default: 20\n * @param {string[]} parameters.orderBy - Apply an ordering of campaigns by specifying a supported campaign property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by decided\nQuery param: ?orderBy=decided desc\norderBy=decided%20desc\n- Order by decision\nQuery param: ?orderBy=decision desc\norderBy=decision%20desc\n- Order by remediationStatus\nQuery param: ?orderBy=remediationStatus desc\norderBy=remediationStatus%20desc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by assignmentType\nQuery param: ?orderBy=assignmentType desc\norderBy=assignmentType%20desc\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description:
                "The after cursor provided by a prior request. Must be non-empty.",
            },
            filter: {
              type: "string",
              optional: false,
              description:
                'Apply various filters by using supported grants filtering properties. List of grants require either target.externalId and target.type, or targetResourceOrn to filter grants for a specific resource. Required parameter. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Filter grants for a resource and user\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND targetPrincipal.externalId eq "00ub0oNGTSWTBKOLGLNR" AND targetPrincipal.type eq "OKTA_USER"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20targetPrincipal.externalId%20eq%20%2200ub0oNGTSWTBKOLGLNR%22%20AND%20targetPrincipal.type%20eq%20%22OKTA_USER%22\n- Filter grants for a resource and user using ORNs\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ" AND targetPrincipalOrn eq "orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22%20AND%20targetPrincipalOrn%20eq%20%22orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR%22\n- Filter all grants for a resource using target resource ORN\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22\n- Filter grants with resource and entitlement bundle\nQuery param: ?filter=targetResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ" AND entitlementBundleId eq "08ab2db568c7c300079fefd0"\nfilter=targetResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22%20AND%20entitlementBundleId%20eq%20%2208ab2db568c7c300079fefd0%22\n- Filter grants with resource and entitlement value id\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND entitlements.values.id eq "entfxqCAJWWFTFUUYBBB"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20entitlements.values.id%20eq%20%22entfxqCAJWWFTFUUYBBB%22\n- Filter grants with resource and entitlement id\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND entitlements.id eq "espfxqCAJWWFTFUUYKKK"\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20entitlements.id%20eq%20%22espfxqCAJWWFTFUUYKKK%22\n- Filter grants with multiple entitlement value id and entitlement bundle id\nQuery param: ?filter=target.externalId eq "0oafxqCAJWWGELFTYASJ" AND target.type eq "APPLICATION" AND (entitlements.values.id eq "entfxqCAJWWFTFUUYBBB" OR entitlements.values.id eq "entfxqCAJWWFTFUUYXXX" OR entitlementBundleId eq "08ab2db568c7c300079fefd0")\nfilter=target.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20target.type%20eq%20%22APPLICATION%22%20AND%20(entitlements.values.id%20eq%20%22entfxqCAJWWFTFUUYBBB%22%20OR%20entitlements.values.id%20eq%20%22entfxqCAJWWFTFUUYXXX%22%20OR%20entitlementBundleId%20eq%20%2208ab2db568c7c300079fefd0%22)',
            },
            include: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                'The include filter adds additional properties in the response.\n\nItems Value: "full_entitlements" Examples:\n- Include complete entitlements in the response\nQuery param: ?include=full_entitlements\ninclude=full_entitlements',
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "The maximum number of records that will be returned in a given result. Default: 20",
            },
            orderBy: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                "Apply an ordering of campaigns by specifying a supported campaign property name with %20asc or %20desc suffix. Query parameter percent encoding is required. See Percent-encoding.\n\nExamples:\n- Order by decided\nQuery param: ?orderBy=decided desc\norderBy=decided%20desc\n- Order by decision\nQuery param: ?orderBy=decision desc\norderBy=decision%20desc\n- Order by remediationStatus\nQuery param: ?orderBy=remediationStatus desc\norderBy=remediationStatus%20desc\n- Order by created\nQuery param: ?orderBy=created desc\norderBy=created%20desc\n- Order by assignmentType\nQuery param: ?orderBy=assignmentType desc\norderBy=assignmentType%20desc",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                    },
                    created: {
                      type: "string",
                      optional: true,
                    },
                    createdBy: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdated: {
                      type: "string",
                      optional: true,
                    },
                    lastUpdatedBy: {
                      type: "string",
                      optional: true,
                    },
                    grantType: {
                      type: "string",
                      optional: true,
                    },
                    entitlementBundleId: {
                      type: "string",
                      optional: true,
                    },
                    action: {
                      type: "string",
                      optional: true,
                    },
                    actor: {
                      type: "string",
                      optional: true,
                    },
                    targetResourceOrn: {
                      type: "string",
                      optional: true,
                    },
                    target: {
                      type: "object",
                      schema: {
                        externalId: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                    targetPrincipalOrn: {
                      type: "string",
                      optional: true,
                    },
                    targetPrincipal: {
                      type: "object",
                      schema: {
                        externalId: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                    status: {
                      type: "string",
                      optional: true,
                    },
                    _links: {
                      type: "object",
                      schema: {
                        self: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                        entitlementBundle: {
                          type: "object",
                          schema: {
                            href: {
                              type: "string",
                              optional: true,
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveGrant",
      description: "Retrieves the full detail of a specific grant.",
      jsDoc:
        '\n/** \n*@method retrieveGrant \n*@desc This is an openAPI method. Retrieves the full detail of a specific grant. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.grantId - The id of the grant\n * @param {string[]} parameters.include - The include filter adds additional properties in the response.\n\nItems Value: "full_entitlements" Examples:\nInclude complete entitlements in the response\nQuery param: ?include=full_entitlements\ninclude=full_entitlements\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            grantId: {
              type: "string",
              optional: false,
              description: "The id of the grant",
            },
            include: {
              type: "array",
              items: {
                type: "string",
              },
              description:
                'The include filter adds additional properties in the response.\n\nItems Value: "full_entitlements" Examples:\nInclude complete entitlements in the response\nQuery param: ?include=full_entitlements\ninclude=full_entitlements',
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              createdBy: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              lastUpdatedBy: {
                type: "string",
                optional: true,
              },
              grantType: {
                type: "string",
                optional: true,
              },
              entitlementBundleId: {
                type: "string",
                optional: true,
              },
              action: {
                type: "string",
                optional: true,
              },
              actor: {
                type: "string",
                optional: true,
              },
              targetResourceOrn: {
                type: "string",
                optional: true,
              },
              target: {
                type: "object",
                schema: {
                  externalId: {
                    type: "string",
                    optional: true,
                  },
                  type: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              targetPrincipalOrn: {
                type: "string",
                optional: true,
              },
              targetPrincipal: {
                type: "object",
                schema: {
                  externalId: {
                    type: "string",
                    optional: true,
                  },
                  type: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              status: {
                type: "string",
                optional: true,
              },
              _links: {
                type: "object",
                schema: {
                  entitlementBundle: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listPrincipalEntitlements",
      description:
        "Retrieves the principal entitlements for a specific resource.",
      jsDoc:
        '\n/** \n*@method listPrincipalEntitlements \n*@desc This is an openAPI method. Retrieves the principal entitlements for a specific resource. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.filter - Apply various filters by using supported principal entitlements filtering properties.\n\nNote: Query parameter percent encoding is required. See Percent-encoding\n\nExamples:\n- Filter by user and application\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND targetPrincipal.externalId eq "00ub0oNGTSWTBKOLGLNR" AND targetPrincipal.type eq "OKTA_USER"\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22%20AND%20targetPrincipal.externalId%20eq%20%2200ub0oNGTSWTBKOLGLNR%22%20AND%20targetPrincipal.type%20eq%20%22OKTA_USER%22\n- Filter by user and application ORNs\nQuery param: ?filter=parentResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ" AND targetPrincipalOrn eq "orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR"\nfilter=parentResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22%20AND%20targetPrincipalOrn%20eq%20%22orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR%22\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            filter: {
              type: "string",
              optional: false,
              description:
                'Apply various filters by using supported principal entitlements filtering properties.\n\nNote: Query parameter percent encoding is required. See Percent-encoding\n\nExamples:\n- Filter by user and application\nQuery param: ?filter=parent.externalId eq "0oafxqCAJWWGELFTYASJ" AND parent.type eq "APPLICATION" AND targetPrincipal.externalId eq "00ub0oNGTSWTBKOLGLNR" AND targetPrincipal.type eq "OKTA_USER"\nfilter=parent.externalId%20eq%20%220oafxqCAJWWGELFTYASJ%22%20AND%20parent.type%20eq%20%22APPLICATION%22%20AND%20targetPrincipal.externalId%20eq%20%2200ub0oNGTSWTBKOLGLNR%22%20AND%20targetPrincipal.type%20eq%20%22OKTA_USER%22\n- Filter by user and application ORNs\nQuery param: ?filter=parentResourceOrn eq "orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ" AND targetPrincipalOrn eq "orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR"\nfilter=parentResourceOrn%20eq%20%22orn:okta:idp:00o11edPwGqbUrsDm0g4:apps:oidc:0oafxqCAJWWGELFTYASJ%22%20AND%20targetPrincipalOrn%20eq%20%22orn:okta:directory:00o11edPwGqbUrsDm0g4:users:00ub0oNGTSWTBKOLGLNR%22',
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              data: {
                type: "array",
                items: {
                  type: "object",
                  schema: {
                    id: {
                      type: "string",
                      optional: true,
                    },
                    name: {
                      type: "string",
                      optional: true,
                    },
                    externalValue: {
                      type: "string",
                      optional: true,
                    },
                    description: {
                      type: "string",
                      optional: true,
                    },
                    multiValue: {
                      type: "boolean",
                      optional: true,
                    },
                    required: {
                      type: "boolean",
                      optional: true,
                    },
                    dataType: {
                      type: "string",
                      optional: true,
                    },
                    targetPrincipalOrn: {
                      type: "string",
                      optional: true,
                    },
                    targetPrincipal: {
                      type: "object",
                      schema: {
                        externalId: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                    parentResourceOrn: {
                      type: "string",
                      optional: true,
                    },
                    parent: {
                      type: "object",
                      schema: {
                        externalId: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                    values: {
                      type: "array",
                      items: {},
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveRequestType",
      description:
        "Retrieves the full representation of a specific request type.",
      jsDoc:
        "\n/** \n*@method retrieveRequestType \n*@desc This is an openAPI method. Retrieves the full representation of a specific request type. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.requestTypeId - The id of the request type\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            requestTypeId: {
              type: "string",
              optional: false,
              description: "The id of the request type",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              name: {
                type: "string",
                optional: true,
              },
              description: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              createdBy: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              lastUpdatedBy: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              ownerId: {
                type: "string",
                optional: true,
              },
              resourceSettings: {
                type: "object",
                schema: {
                  type: {
                    type: "string",
                    optional: true,
                  },
                  targetResources: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        resourceId: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                },
              },
              requestSettings: {
                type: "object",
                schema: {
                  type: {
                    type: "string",
                    optional: true,
                  },
                  requesterFields: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        id: {
                          type: "string",
                          optional: true,
                        },
                        prompt: {
                          type: "string",
                          optional: true,
                        },
                        required: {
                          type: "boolean",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                },
              },
              approvalSettings: {
                type: "object",
                schema: {
                  type: {
                    type: "string",
                    optional: true,
                  },
                  approvals: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        approverType: {
                          type: "string",
                          optional: true,
                        },
                        description: {
                          type: "string",
                          optional: true,
                        },
                        approverMemberOf: {
                          type: "array",
                          items: {
                            type: "string",
                          },
                        },
                        approverFields: {
                          type: "array",
                          items: {
                            type: "string",
                          },
                        },
                      },
                    },
                  },
                },
              },
              lastUpdateSource: {
                type: "string",
                optional: true,
              },
              accessDuration: {
                type: "string",
                optional: true,
              },
              _links: {
                type: "object",
                schema: {
                  createRequest: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  requests: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listApplications",
      description: "listApplications",
      jsDoc:
        "\n/** \n*@method listApplications \n*@desc This is an openAPI method. listApplications \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after - Specifies the pagination cursor for the next page of apps\n * @param {string} parameters.expand - Traverses the users link relationship and optionally embeds the Application User resource\n * @param {string} parameters.filter - Filters apps by status, user.id, group.id, credentials.signing.kid, or name expression\n * @param {integer} parameters.limit - Specifies the number of results per page (maximum 200)\n * @param {string} parameters.q - Searches the name or label property of applications using startsWith that matches what the string starts with to the query\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
              description:
                "Specifies the pagination cursor for the next page of apps",
            },
            expand: {
              type: "string",
              optional: true,
              description:
                "Traverses the users link relationship and optionally embeds the Application User resource",
            },
            filter: {
              type: "string",
              optional: true,
              description:
                "Filters apps by status, user.id, group.id, credentials.signing.kid, or name expression",
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "Specifies the number of results per page (maximum 200)",
            },
            q: {
              type: "string",
              optional: true,
              description:
                "Searches the name or label property of applications using startsWith that matches what the string starts with to the query",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              name: {
                type: "string",
                optional: false,
              },
              label: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              accessibility: {
                type: "object",
                schema: {
                  selfService: {
                    type: "boolean",
                    optional: true,
                  },
                  errorRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                  loginRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              visibility: {
                type: "object",
                schema: {
                  autoSubmitToolbar: {
                    type: "boolean",
                    optional: true,
                  },
                  hide: {
                    type: "object",
                    schema: {
                      iOS: {
                        type: "boolean",
                        optional: true,
                      },
                      web: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                  appLinks: {
                    type: "object",
                    schema: {
                      login: {
                        type: "boolean",
                        optional: true,
                      },
                      testorgone_customsaml20app_1_link: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                },
              },
              features: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              signOnMode: {
                type: "string",
                optional: false,
              },
              credentials: {
                type: "object",
                schema: {
                  scheme: {
                    type: "string",
                    optional: true,
                  },
                  userNameTemplate: {
                    type: "object",
                    schema: {
                      template: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  signing: {
                    type: "object",
                    schema: {},
                  },
                },
              },
              settings: {
                type: "object",
                schema: {
                  app: {
                    type: "object",
                    schema: {
                      buttonField: {
                        type: "string",
                        optional: true,
                      },
                      passwordField: {
                        type: "string",
                        optional: true,
                      },
                      usernameField: {
                        type: "string",
                        optional: true,
                      },
                      url: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  notifications: {
                    type: "object",
                    schema: {
                      vpn: {
                        type: "object",
                        schema: {
                          network: {
                            type: "object",
                            schema: {
                              connection: {
                                type: "string",
                                optional: true,
                              },
                            },
                          },
                          message: {
                            type: "string",
                            optional: true,
                          },
                          helpUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                    },
                  },
                  signOn: {
                    type: "object",
                    schema: {
                      defaultRelayState: {
                        type: "string",
                        optional: true,
                      },
                      ssoAcsUrl: {
                        type: "string",
                        optional: true,
                      },
                      idpIssuer: {
                        type: "string",
                        optional: true,
                      },
                      audience: {
                        type: "string",
                        optional: true,
                      },
                      recipient: {
                        type: "string",
                        optional: true,
                      },
                      destination: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdTemplate: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdFormat: {
                        type: "string",
                        optional: true,
                      },
                      responseSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      assertionSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      signatureAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      digestAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      honorForceAuthn: {
                        type: "boolean",
                        optional: true,
                      },
                      authnContextClassRef: {
                        type: "string",
                        optional: true,
                      },
                      slo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          spIssuer: {
                            type: "string",
                            optional: true,
                          },
                          logoutUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      participateSlo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          logoutRequestUrl: {
                            type: "string",
                            optional: true,
                          },
                          sessionIndexRequired: {
                            type: "boolean",
                            optional: true,
                          },
                          bindingType: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      spCertificate: {
                        type: "object",
                        schema: {
                          x5c: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      requestCompressed: {
                        type: "boolean",
                        optional: true,
                      },
                      allowMultipleAcsEndpoints: {
                        type: "boolean",
                        optional: true,
                      },
                      acsEndpoints: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      attributeStatements: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {},
                        },
                      },
                      inlineHooks: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {
                            id: {
                              type: "string",
                              optional: true,
                            },
                            _links: {
                              type: "object",
                              schema: {
                                self: {
                                  type: "object",
                                  schema: {
                                    href: {
                                      type: "string",
                                      optional: true,
                                    },
                                    hints: {
                                      type: "object",
                                      schema: {
                                        allow: {
                                          type: "array",
                                          items: {
                                            type: "string",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  logo: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  appLinks: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  help: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  users: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  groups: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  metadata: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "createApplication",
      description: "createApplication",
      jsDoc:
        "\n/** \n*@method createApplication \n*@desc This is an openAPI method. createApplication \n * @param {object} parameters - Operation parameters\n * @param {boolean} parameters.activate - Executes activation lifecycle operation when creating the app.\n * @param {string} parameters.name \n * @param {string} parameters.label \n * @param {string} parameters.signOnMode \n * @param {object} parameters.settings \n * @param {object} parameters.settings.app \n * @param {boolean} parameters.settings.app.requestIntegration \n * @param {string} parameters.settings.app.url \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            activate: {
              type: "boolean",
              optional: true,
              description:
                "Executes activation lifecycle operation when creating the app.",
            },
            name: {
              type: "string",
              optional: false,
            },
            label: {
              type: "string",
              optional: false,
            },
            signOnMode: {
              type: "string",
              optional: false,
            },
            settings: {
              type: "object",
              schema: {
                app: {
                  type: "object",
                  schema: {
                    requestIntegration: {
                      type: "boolean",
                      optional: true,
                    },
                    url: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              name: {
                type: "string",
                optional: false,
              },
              label: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              accessibility: {
                type: "object",
                schema: {
                  selfService: {
                    type: "boolean",
                    optional: true,
                  },
                  errorRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                  loginRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              visibility: {
                type: "object",
                schema: {
                  autoSubmitToolbar: {
                    type: "boolean",
                    optional: true,
                  },
                  hide: {
                    type: "object",
                    schema: {
                      iOS: {
                        type: "boolean",
                        optional: true,
                      },
                      web: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                  appLinks: {
                    type: "object",
                    schema: {
                      login: {
                        type: "boolean",
                        optional: true,
                      },
                      testorgone_customsaml20app_1_link: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                },
              },
              features: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              signOnMode: {
                type: "string",
                optional: false,
              },
              credentials: {
                type: "object",
                schema: {
                  scheme: {
                    type: "string",
                    optional: true,
                  },
                  userNameTemplate: {
                    type: "object",
                    schema: {
                      template: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  signing: {
                    type: "object",
                    schema: {},
                  },
                },
              },
              settings: {
                type: "object",
                schema: {
                  app: {
                    type: "object",
                    schema: {
                      buttonField: {
                        type: "string",
                        optional: true,
                      },
                      passwordField: {
                        type: "string",
                        optional: true,
                      },
                      usernameField: {
                        type: "string",
                        optional: true,
                      },
                      url: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  notifications: {
                    type: "object",
                    schema: {
                      vpn: {
                        type: "object",
                        schema: {
                          network: {
                            type: "object",
                            schema: {
                              connection: {
                                type: "string",
                                optional: true,
                              },
                            },
                          },
                          message: {
                            type: "string",
                            optional: true,
                          },
                          helpUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                    },
                  },
                  signOn: {
                    type: "object",
                    schema: {
                      defaultRelayState: {
                        type: "string",
                        optional: true,
                      },
                      ssoAcsUrl: {
                        type: "string",
                        optional: true,
                      },
                      idpIssuer: {
                        type: "string",
                        optional: true,
                      },
                      audience: {
                        type: "string",
                        optional: true,
                      },
                      recipient: {
                        type: "string",
                        optional: true,
                      },
                      destination: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdTemplate: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdFormat: {
                        type: "string",
                        optional: true,
                      },
                      responseSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      assertionSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      signatureAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      digestAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      honorForceAuthn: {
                        type: "boolean",
                        optional: true,
                      },
                      authnContextClassRef: {
                        type: "string",
                        optional: true,
                      },
                      slo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          spIssuer: {
                            type: "string",
                            optional: true,
                          },
                          logoutUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      participateSlo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          logoutRequestUrl: {
                            type: "string",
                            optional: true,
                          },
                          sessionIndexRequired: {
                            type: "boolean",
                            optional: true,
                          },
                          bindingType: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      spCertificate: {
                        type: "object",
                        schema: {
                          x5c: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      requestCompressed: {
                        type: "boolean",
                        optional: true,
                      },
                      allowMultipleAcsEndpoints: {
                        type: "boolean",
                        optional: true,
                      },
                      acsEndpoints: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      attributeStatements: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {},
                        },
                      },
                      inlineHooks: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {
                            id: {
                              type: "string",
                              optional: true,
                            },
                            _links: {
                              type: "object",
                              schema: {
                                self: {
                                  type: "object",
                                  schema: {
                                    href: {
                                      type: "string",
                                      optional: true,
                                    },
                                    hints: {
                                      type: "object",
                                      schema: {
                                        allow: {
                                          type: "array",
                                          items: {
                                            type: "string",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  logo: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  appLinks: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  help: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  users: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  groups: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  metadata: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "getApplication",
      description: "getApplication",
      jsDoc:
        "\n/** \n*@method getApplication \n*@desc This is an openAPI method. getApplication \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              name: {
                type: "string",
                optional: false,
              },
              label: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              accessibility: {
                type: "object",
                schema: {
                  selfService: {
                    type: "boolean",
                    optional: true,
                  },
                  errorRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                  loginRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              visibility: {
                type: "object",
                schema: {
                  autoSubmitToolbar: {
                    type: "boolean",
                    optional: true,
                  },
                  hide: {
                    type: "object",
                    schema: {
                      iOS: {
                        type: "boolean",
                        optional: true,
                      },
                      web: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                  appLinks: {
                    type: "object",
                    schema: {
                      login: {
                        type: "boolean",
                        optional: true,
                      },
                      testorgone_customsaml20app_1_link: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                },
              },
              features: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              signOnMode: {
                type: "string",
                optional: false,
              },
              credentials: {
                type: "object",
                schema: {
                  scheme: {
                    type: "string",
                    optional: true,
                  },
                  userNameTemplate: {
                    type: "object",
                    schema: {
                      template: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  signing: {
                    type: "object",
                    schema: {},
                  },
                },
              },
              settings: {
                type: "object",
                schema: {
                  app: {
                    type: "object",
                    schema: {
                      buttonField: {
                        type: "string",
                        optional: true,
                      },
                      passwordField: {
                        type: "string",
                        optional: true,
                      },
                      usernameField: {
                        type: "string",
                        optional: true,
                      },
                      url: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  notifications: {
                    type: "object",
                    schema: {
                      vpn: {
                        type: "object",
                        schema: {
                          network: {
                            type: "object",
                            schema: {
                              connection: {
                                type: "string",
                                optional: true,
                              },
                            },
                          },
                          message: {
                            type: "string",
                            optional: true,
                          },
                          helpUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                    },
                  },
                  signOn: {
                    type: "object",
                    schema: {
                      defaultRelayState: {
                        type: "string",
                        optional: true,
                      },
                      ssoAcsUrl: {
                        type: "string",
                        optional: true,
                      },
                      idpIssuer: {
                        type: "string",
                        optional: true,
                      },
                      audience: {
                        type: "string",
                        optional: true,
                      },
                      recipient: {
                        type: "string",
                        optional: true,
                      },
                      destination: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdTemplate: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdFormat: {
                        type: "string",
                        optional: true,
                      },
                      responseSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      assertionSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      signatureAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      digestAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      honorForceAuthn: {
                        type: "boolean",
                        optional: true,
                      },
                      authnContextClassRef: {
                        type: "string",
                        optional: true,
                      },
                      slo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          spIssuer: {
                            type: "string",
                            optional: true,
                          },
                          logoutUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      participateSlo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          logoutRequestUrl: {
                            type: "string",
                            optional: true,
                          },
                          sessionIndexRequired: {
                            type: "boolean",
                            optional: true,
                          },
                          bindingType: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      spCertificate: {
                        type: "object",
                        schema: {
                          x5c: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      requestCompressed: {
                        type: "boolean",
                        optional: true,
                      },
                      allowMultipleAcsEndpoints: {
                        type: "boolean",
                        optional: true,
                      },
                      acsEndpoints: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      attributeStatements: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {},
                        },
                      },
                      inlineHooks: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {
                            id: {
                              type: "string",
                              optional: true,
                            },
                            _links: {
                              type: "object",
                              schema: {
                                self: {
                                  type: "object",
                                  schema: {
                                    href: {
                                      type: "string",
                                      optional: true,
                                    },
                                    hints: {
                                      type: "object",
                                      schema: {
                                        allow: {
                                          type: "array",
                                          items: {
                                            type: "string",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  logo: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  appLinks: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  help: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  users: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  groups: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  metadata: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "updateApplication",
      description: "updateApplication",
      jsDoc:
        "\n/** \n*@method updateApplication \n*@desc This is an openAPI method. updateApplication \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId \n * @param {string} parameters.name \n * @param {string} parameters.label \n * @param {string} parameters.status \n * @param {object} parameters.accessibility \n * @param {boolean} parameters.accessibility.selfService \n * @param {string} parameters.accessibility.errorRedirectUrl \n * @param {object} parameters.visibility \n * @param {boolean} parameters.visibility.autoSubmitToolbar \n * @param {object} parameters.visibility.hide \n * @param {boolean} parameters.visibility.hide.iOS \n * @param {boolean} parameters.visibility.hide.web \n * @param {object} parameters.visibility.appLinks \n * @param {boolean} parameters.visibility.appLinks.login \n * @param {string[]} parameters.features \n * @param {string} parameters.signOnMode \n * @param {object} parameters.credentials \n * @param {string} parameters.credentials.scheme \n * @param {object} parameters.credentials.userNameTemplate \n * @param {string} parameters.credentials.userNameTemplate.template \n * @param {string} parameters.credentials.userNameTemplate.type \n * @param {object} parameters.settings \n * @param {object} parameters.settings.app \n * @param {string} parameters.settings.app.buttonField \n * @param {string} parameters.settings.app.passwordField \n * @param {string} parameters.settings.app.usernameField \n * @param {string} parameters.settings.app.url \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
            },
            name: {
              type: "string",
              optional: true,
            },
            label: {
              type: "string",
              optional: true,
            },
            status: {
              type: "string",
              optional: true,
            },
            accessibility: {
              type: "object",
              schema: {
                selfService: {
                  type: "boolean",
                  optional: true,
                },
                errorRedirectUrl: {
                  type: "string",
                  optional: true,
                },
              },
            },
            visibility: {
              type: "object",
              schema: {
                autoSubmitToolbar: {
                  type: "boolean",
                  optional: true,
                },
                hide: {
                  type: "object",
                  schema: {
                    iOS: {
                      type: "boolean",
                      optional: true,
                    },
                    web: {
                      type: "boolean",
                      optional: true,
                    },
                  },
                },
                appLinks: {
                  type: "object",
                  schema: {
                    login: {
                      type: "boolean",
                      optional: true,
                    },
                  },
                },
              },
            },
            features: {
              type: "array",
              items: {
                type: "string",
              },
            },
            signOnMode: {
              type: "string",
              optional: true,
            },
            credentials: {
              type: "object",
              schema: {
                scheme: {
                  type: "string",
                  optional: true,
                },
                userNameTemplate: {
                  type: "object",
                  schema: {
                    template: {
                      type: "string",
                      optional: true,
                    },
                    type: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
            },
            settings: {
              type: "object",
              schema: {
                app: {
                  type: "object",
                  schema: {
                    buttonField: {
                      type: "string",
                      optional: true,
                    },
                    passwordField: {
                      type: "string",
                      optional: true,
                    },
                    usernameField: {
                      type: "string",
                      optional: true,
                    },
                    url: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              name: {
                type: "string",
                optional: false,
              },
              label: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              accessibility: {
                type: "object",
                schema: {
                  selfService: {
                    type: "boolean",
                    optional: true,
                  },
                  errorRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                  loginRedirectUrl: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              visibility: {
                type: "object",
                schema: {
                  autoSubmitToolbar: {
                    type: "boolean",
                    optional: true,
                  },
                  hide: {
                    type: "object",
                    schema: {
                      iOS: {
                        type: "boolean",
                        optional: true,
                      },
                      web: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                  appLinks: {
                    type: "object",
                    schema: {
                      login: {
                        type: "boolean",
                        optional: true,
                      },
                      testorgone_customsaml20app_1_link: {
                        type: "boolean",
                        optional: true,
                      },
                    },
                  },
                },
              },
              features: {
                type: "array",
                items: {
                  type: "string",
                },
              },
              signOnMode: {
                type: "string",
                optional: false,
              },
              credentials: {
                type: "object",
                schema: {
                  scheme: {
                    type: "string",
                    optional: true,
                  },
                  userNameTemplate: {
                    type: "object",
                    schema: {
                      template: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  signing: {
                    type: "object",
                    schema: {},
                  },
                },
              },
              settings: {
                type: "object",
                schema: {
                  app: {
                    type: "object",
                    schema: {
                      buttonField: {
                        type: "string",
                        optional: true,
                      },
                      passwordField: {
                        type: "string",
                        optional: true,
                      },
                      usernameField: {
                        type: "string",
                        optional: true,
                      },
                      url: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  notifications: {
                    type: "object",
                    schema: {
                      vpn: {
                        type: "object",
                        schema: {
                          network: {
                            type: "object",
                            schema: {
                              connection: {
                                type: "string",
                                optional: true,
                              },
                            },
                          },
                          message: {
                            type: "string",
                            optional: true,
                          },
                          helpUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                    },
                  },
                  signOn: {
                    type: "object",
                    schema: {
                      defaultRelayState: {
                        type: "string",
                        optional: true,
                      },
                      ssoAcsUrl: {
                        type: "string",
                        optional: true,
                      },
                      idpIssuer: {
                        type: "string",
                        optional: true,
                      },
                      audience: {
                        type: "string",
                        optional: true,
                      },
                      recipient: {
                        type: "string",
                        optional: true,
                      },
                      destination: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdTemplate: {
                        type: "string",
                        optional: true,
                      },
                      subjectNameIdFormat: {
                        type: "string",
                        optional: true,
                      },
                      responseSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      assertionSigned: {
                        type: "boolean",
                        optional: true,
                      },
                      signatureAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      digestAlgorithm: {
                        type: "string",
                        optional: true,
                      },
                      honorForceAuthn: {
                        type: "boolean",
                        optional: true,
                      },
                      authnContextClassRef: {
                        type: "string",
                        optional: true,
                      },
                      slo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          spIssuer: {
                            type: "string",
                            optional: true,
                          },
                          logoutUrl: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      participateSlo: {
                        type: "object",
                        schema: {
                          enabled: {
                            type: "boolean",
                            optional: true,
                          },
                          logoutRequestUrl: {
                            type: "string",
                            optional: true,
                          },
                          sessionIndexRequired: {
                            type: "boolean",
                            optional: true,
                          },
                          bindingType: {
                            type: "string",
                            optional: true,
                          },
                        },
                      },
                      spCertificate: {
                        type: "object",
                        schema: {
                          x5c: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      requestCompressed: {
                        type: "boolean",
                        optional: true,
                      },
                      allowMultipleAcsEndpoints: {
                        type: "boolean",
                        optional: true,
                      },
                      acsEndpoints: {
                        type: "array",
                        items: {
                          type: "string",
                        },
                      },
                      attributeStatements: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {},
                        },
                      },
                      inlineHooks: {
                        type: "array",
                        items: {
                          type: "object",
                          schema: {
                            id: {
                              type: "string",
                              optional: true,
                            },
                            _links: {
                              type: "object",
                              schema: {
                                self: {
                                  type: "object",
                                  schema: {
                                    href: {
                                      type: "string",
                                      optional: true,
                                    },
                                    hints: {
                                      type: "object",
                                      schema: {
                                        allow: {
                                          type: "array",
                                          items: {
                                            type: "string",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  logo: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  appLinks: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        name: {
                          type: "string",
                          optional: true,
                        },
                        href: {
                          type: "string",
                          optional: true,
                        },
                        type: {
                          type: "string",
                          optional: true,
                        },
                      },
                    },
                  },
                  help: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  users: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  groups: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  metadata: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                      type: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deleteApplication",
      description: "deleteApplication",
      jsDoc:
        "\n/** \n*@method deleteApplication \n*@desc This is an openAPI method. deleteApplication \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "updateApplicationPolicy",
      description: "updateApplicationPolicy",
      jsDoc:
        "\n/** \n*@method updateApplicationPolicy \n*@desc This is an openAPI method. updateApplicationPolicy \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - The ID of the application.\n * @param {string} parameters.policyId - The ID of the policy.\n * @param {object} requestBody - Request body\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "The ID of the application.",
            },
            policyId: {
              type: "string",
              optional: false,
              description: "The ID of the policy.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "activateApplication",
      description: "activateApplication",
      jsDoc:
        "\n/** \n*@method activateApplication \n*@desc This is an openAPI method. activateApplication \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - The ID of the application.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "The ID of the application.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deactivateApplication",
      description: "deactivateApplication",
      jsDoc:
        "\n/** \n*@method deactivateApplication \n*@desc This is an openAPI method. deactivateApplication \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - The ID of the application.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "The ID of the application.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listApplicationUsers",
      description: "listApplicationUsers",
      jsDoc:
        "\n/** \n*@method listApplicationUsers \n*@desc This is an openAPI method. listApplicationUsers \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId \n * @param {string} parameters.after - Specifies the pagination cursor for the next page of assignments\n * @param {integer} parameters.limit - Specifies the number of results per page (maximum 200)\n * @param {string} parameters.q - Returns a filtered list of app users. The value of q is matched against an application user profile's userName, firstName, lastName, and email. Note: This operation only supports startsWith that matches what the string starts with to the query.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
            },
            after: {
              type: "string",
              optional: true,
              description:
                "Specifies the pagination cursor for the next page of assignments",
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "Specifies the number of results per page (maximum 200)",
            },
            q: {
              type: "string",
              optional: true,
              description:
                "Returns a filtered list of app users. The value of q is matched against an application user profile's userName, firstName, lastName, and email. Note: This operation only supports startsWith that matches what the string starts with to the query.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: false,
              },
              externalId: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              scope: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              statusChanged: {
                type: "string",
                optional: true,
              },
              passwordChanged: {
                type: "string",
                optional: true,
              },
              syncState: {
                type: "string",
                optional: true,
              },
              lastSync: {
                type: "string",
                optional: true,
              },
              credentials: {
                type: "object",
                schema: {
                  userName: {
                    type: "string",
                    optional: true,
                  },
                  password: {
                    type: "object",
                    schema: {},
                  },
                },
              },
              profile: {
                type: "object",
                schema: {
                  secondEmail: {
                    type: "string",
                    optional: true,
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                  },
                  mobilePhone: {
                    type: "string",
                    optional: true,
                  },
                  email: {
                    type: "string",
                    optional: true,
                  },
                  salesforceGroups: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  role: {
                    type: "string",
                    optional: true,
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                  },
                  profile: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  app: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "addApplicationUser",
      description: "addApplicationUser",
      jsDoc:
        "\n/** \n*@method addApplicationUser \n*@desc This is an openAPI method. addApplicationUser \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId \n * @param {string} parameters.id \n * @param {string} parameters.externalId \n * @param {string} parameters.created \n * @param {string} parameters.lastUpdated \n * @param {string} parameters.scope \n * @param {string} parameters.status \n * @param {string} parameters.statusChanged \n * @param {string} parameters.passwordChanged \n * @param {string} parameters.syncState \n * @param {string} parameters.lastSync \n * @param {object} parameters.credentials \n * @param {string} parameters.credentials.userName \n * @param {object} parameters.credentials.password \n * @param {object} parameters.profile \n * @param {string} parameters.profile.secondEmail \n * @param {string} parameters.profile.lastName \n * @param {string} parameters.profile.mobilePhone \n * @param {string} parameters.profile.email \n * @param {string[]} parameters.profile.salesforceGroups \n * @param {string} parameters.profile.role \n * @param {string} parameters.profile.firstName \n * @param {string} parameters.profile.profile \n * @param {object} parameters._links \n * @param {object} parameters._links.app \n * @param {string} parameters._links.app.href \n * @param {object} parameters._links.user \n * @param {string} parameters._links.user.href \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
            },
            id: {
              type: "string",
              optional: false,
            },
            externalId: {
              type: "string",
              optional: true,
            },
            created: {
              type: "string",
              optional: true,
            },
            lastUpdated: {
              type: "string",
              optional: true,
            },
            scope: {
              type: "string",
              optional: true,
            },
            status: {
              type: "string",
              optional: true,
            },
            statusChanged: {
              type: "string",
              optional: true,
            },
            passwordChanged: {
              type: "string",
              optional: true,
            },
            syncState: {
              type: "string",
              optional: true,
            },
            lastSync: {
              type: "string",
              optional: true,
            },
            credentials: {
              type: "object",
              schema: {
                userName: {
                  type: "string",
                  optional: true,
                },
                password: {
                  type: "object",
                  schema: {},
                },
              },
            },
            profile: {
              type: "object",
              schema: {
                secondEmail: {
                  type: "string",
                  optional: true,
                },
                lastName: {
                  type: "string",
                  optional: true,
                },
                mobilePhone: {
                  type: "string",
                  optional: true,
                },
                email: {
                  type: "string",
                  optional: true,
                },
                salesforceGroups: {
                  type: "array",
                  items: {
                    type: "string",
                  },
                },
                role: {
                  type: "string",
                  optional: true,
                },
                firstName: {
                  type: "string",
                  optional: true,
                },
                profile: {
                  type: "string",
                  optional: true,
                },
              },
            },
            _links: {
              type: "object",
              schema: {
                app: {
                  type: "object",
                  schema: {
                    href: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
                user: {
                  type: "object",
                  schema: {
                    href: {
                      type: "string",
                      optional: true,
                    },
                  },
                },
              },
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: false,
              },
              externalId: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              scope: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              statusChanged: {
                type: "string",
                optional: true,
              },
              passwordChanged: {
                type: "string",
                optional: true,
              },
              syncState: {
                type: "string",
                optional: true,
              },
              lastSync: {
                type: "string",
                optional: true,
              },
              credentials: {
                type: "object",
                schema: {
                  userName: {
                    type: "string",
                    optional: true,
                  },
                  password: {
                    type: "object",
                    schema: {},
                  },
                },
              },
              profile: {
                type: "object",
                schema: {
                  secondEmail: {
                    type: "string",
                    optional: true,
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                  },
                  mobilePhone: {
                    type: "string",
                    optional: true,
                  },
                  email: {
                    type: "string",
                    optional: true,
                  },
                  salesforceGroups: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  role: {
                    type: "string",
                    optional: true,
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                  },
                  profile: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  app: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "getApplicationUser",
      description: "Retrieves a user assignments of an application.",
      jsDoc:
        "\n/** \n*@method getApplicationUser \n*@desc This is an openAPI method. Retrieves a user assignments of an application. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - ID of the application\n * @param {string} parameters.userId - ID of the user\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "ID of the application",
            },
            userId: {
              type: "string",
              optional: false,
              description: "ID of the user",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: false,
              },
              externalId: {
                type: "string",
                optional: true,
              },
              created: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              scope: {
                type: "string",
                optional: true,
              },
              status: {
                type: "string",
                optional: true,
              },
              statusChanged: {
                type: "string",
                optional: true,
              },
              passwordChanged: {
                type: "string",
                optional: true,
              },
              syncState: {
                type: "string",
                optional: true,
              },
              lastSync: {
                type: "string",
                optional: true,
              },
              credentials: {
                type: "object",
                schema: {
                  userName: {
                    type: "string",
                    optional: true,
                  },
                  password: {
                    type: "object",
                    schema: {},
                  },
                },
              },
              profile: {
                type: "object",
                schema: {
                  secondEmail: {
                    type: "string",
                    optional: true,
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                  },
                  mobilePhone: {
                    type: "string",
                    optional: true,
                  },
                  email: {
                    type: "string",
                    optional: true,
                  },
                  salesforceGroups: {
                    type: "array",
                    items: {
                      type: "string",
                    },
                  },
                  role: {
                    type: "string",
                    optional: true,
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                  },
                  profile: {
                    type: "string",
                    optional: true,
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  app: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: true,
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deleteUserFromApp",
      description:
        "This API is used to delete/ disconnect user from apps like Active Directory or LDAP etc.",
      jsDoc:
        "\n/** \n*@method deleteUserFromApp \n*@desc This is an openAPI method. This API is used to delete/ disconnect user from apps like Active Directory or LDAP etc. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - Get the app Id from OKta UI. In case of AD ,get the Active Directory APP Id by going to the Okta UI on the AD Integration from which you want to disconnect the user from ( Directory > Directory Integrations ) and get the AppID from the URL.\n * @param {string} parameters.userId - Provide the User Id. Get the UserID of the user you want to disconnect from the AD Integration (UserID can be retrieved via Admin UI from the URL bar while on the user's profile.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description:
                "Get the app Id from OKta UI. In case of AD ,get the Active Directory APP Id by going to the Okta UI on the AD Integration from which you want to disconnect the user from ( Directory > Directory Integrations ) and get the AppID from the URL.",
            },
            userId: {
              type: "string",
              optional: false,
              description:
                "Provide the User Id. Get the UserID of the user you want to disconnect from the AD Integration (UserID can be retrieved via Admin UI from the URL bar while on the user's profile.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listApplicationGroups",
      description: "Retrieves all group assignments for an application.",
      jsDoc:
        "\n/** \n*@method listApplicationGroups \n*@desc This is an openAPI method. Retrieves all group assignments for an application. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - ID of the application\n * @param {integer} parameters.limit - Specifies the number of results per page (maximum 200).\n * @param {string} parameters.after - Specifies the pagination cursor for the next page of assignments\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "ID of the application",
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "Specifies the number of results per page (maximum 200).",
            },
            after: {
              type: "string",
              optional: true,
              description:
                "Specifies the pagination cursor for the next page of assignments",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              priority: {
                type: "integer",
                optional: true,
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "getApplicationGroup",
      description: "Retrieves the group assignment for an application by ID.",
      jsDoc:
        "\n/** \n*@method getApplicationGroup \n*@desc This is an openAPI method. Retrieves the group assignment for an application by ID. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - ID of the application\n * @param {string} parameters.groupId - ID of the group\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "ID of the application",
            },
            groupId: {
              type: "string",
              optional: false,
              description: "ID of the group",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              priority: {
                type: "integer",
                optional: true,
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "updateApplicationGroup",
      description: "Assigns a group to an application.",
      jsDoc:
        "\n/** \n*@method updateApplicationGroup \n*@desc This is an openAPI method. Assigns a group to an application. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - ID of the application\n * @param {string} parameters.groupId - ID of the group\n * @param {object} requestBody - Request body\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "ID of the application",
            },
            groupId: {
              type: "string",
              optional: false,
              description: "ID of the group",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              id: {
                type: "string",
                optional: true,
              },
              lastUpdated: {
                type: "string",
                optional: true,
              },
              priority: {
                type: "integer",
                optional: true,
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deleteApplicationGroup",
      description: "Removes a group assignment from an application.",
      jsDoc:
        "\n/** \n*@method deleteApplicationGroup \n*@desc This is an openAPI method. Removes a group assignment from an application. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.appId - ID of the application\n * @param {string} parameters.groupId - ID of the group\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            appId: {
              type: "string",
              optional: false,
              description: "ID of the application",
            },
            groupId: {
              type: "string",
              optional: false,
              description: "ID of the group",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllUsersOpenAPI",
      description:
        "Lists Users in your org, with pagination in most cases. A subset of Users can be returned that match a supported filter expression or search criteria.",
      jsDoc:
        '\n/** \n*@method listAllUsersOpenAPI \n*@desc This is an openAPI method. Lists Users in your org, with pagination in most cases. A subset of Users can be returned that match a supported filter expression or search criteria. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.q - Finds users who match the specified query. This doesn\'t support pagination. This might not deliver optimal performance for large orgs, and is deprecated for such use cases. To ensure optimal performance, use a search parameter instead. Use the q parameter for a simple lookup of users by name, for example when creating a people picker. The value of q is matched against firstName, lastName, or email. This performs a startsWith match, but this is an implementation detail and can change without notice. You don\'t need to specify firstName, lastName, or email.\n * @param {string} parameters.after - The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the Link response header. See Pagination.\n * @param {integer} parameters.limit - Specifies the number of results returned. Defaults to 200 if not specified.\n * @param {string} parameters.filter - Filters users with a supported expression for a subset of properties. This requires URL encoding. For example, filter=lastUpdated gt "2013-06-01T00:00:00.000Z" is encoded as filter=lastUpdated%20gt%20%222013-06-01T00:00:00.000Z%22. Filtering is case-sensitive for attribute names and query values, while attribute operators are case-insensitive. Filtering supports the following limited number of properties: status, lastUpdated, id, profile.login, profile.email, profile.firstName, and profile.lastName. Additionally, filtering supports only the equal eq operator from the standard Okta API filtering semantics, except in the case of the lastUpdated property. This property can also use the inequality operators (gt, ge, lt, and le). For logical operators, only the logical operators and and or are supported. The not operator isn\'t supported.\n * @param {string} parameters.search - Searches for users with a supported filtering expression for most properties. Okta recommends using this parameter for search for best performance. This operation supports pagination. Use an ID lookup for records that you update to ensure your results contain the latest data. Property names in the search parameter are case sensitive, whereas operators (eq, sw, and so on) and string values are case insensitive. Unlike with user logins, diacritical marks are significant in search string values: a search for isaac.brock finds Isaac.Brock, but doesn\'t find a property whose value is isáàc.bröck. This operation requires URL encoding. For example, search=profile.department eq "Engineering" is encoded as search=profile.department%20eq%20%22Engineering%22. Note: If you use the special character " within a quoted string, it must also be escaped \\ and encoded. For example, search=profile.lastName eq "bob"smith" is encoded as search=profile.lastName%20eq%20%22bob%5C%22smith%22. This operation searches many properties: Any user profile property, including custom-defined properties. The top-level properties id, status, created, activated, statusChanged, and lastUpdated. The User Type accessed as type.id. You can also use sortBy and sortOrder parameters. The ne (not equal) operator isn\'t supported, but you can obtain the same result by using lt ... or ... gt. For example, to see all users except those that have a status of STAGED, use (status lt "STAGED" or status gt "STAGED"). You can search properties that are arrays. If any element matches the search term, the entire array (object) is returned. Okta follows the SCIM Protocol Specification for searching arrays. You can search multiple arrays, multiple values in an array, as well as using the standard logical and filtering operators. See Filter.\n * @param {string} parameters.sortBy - Specifies field to sort by (for search queries only). This can be any single property, for example sortBy=profile.lastName. Users with the same value for the sortBy property will be ordered by id.\n * @param {string} parameters.sortOrder - Specifies sort order asc or desc (for search queries only). Sorting is done in ASCII sort order (that is, by ASCII character value), but isn\'t case sensitive. sortOrder is ignored if sortBy is not present.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/',
      params: [
        {
          type: "object",
          schema: {
            q: {
              type: "string",
              optional: true,
              description:
                "Finds users who match the specified query. This doesn't support pagination. This might not deliver optimal performance for large orgs, and is deprecated for such use cases. To ensure optimal performance, use a search parameter instead. Use the q parameter for a simple lookup of users by name, for example when creating a people picker. The value of q is matched against firstName, lastName, or email. This performs a startsWith match, but this is an implementation detail and can change without notice. You don't need to specify firstName, lastName, or email.",
            },
            after: {
              type: "string",
              optional: true,
              description:
                "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the Link response header. See Pagination.",
            },
            limit: {
              type: "integer",
              optional: true,
              description:
                "Specifies the number of results returned. Defaults to 200 if not specified.",
            },
            filter: {
              type: "string",
              optional: true,
              description:
                'Filters users with a supported expression for a subset of properties. This requires URL encoding. For example, filter=lastUpdated gt "2013-06-01T00:00:00.000Z" is encoded as filter=lastUpdated%20gt%20%222013-06-01T00:00:00.000Z%22. Filtering is case-sensitive for attribute names and query values, while attribute operators are case-insensitive. Filtering supports the following limited number of properties: status, lastUpdated, id, profile.login, profile.email, profile.firstName, and profile.lastName. Additionally, filtering supports only the equal eq operator from the standard Okta API filtering semantics, except in the case of the lastUpdated property. This property can also use the inequality operators (gt, ge, lt, and le). For logical operators, only the logical operators and and or are supported. The not operator isn\'t supported.',
            },
            search: {
              type: "string",
              optional: true,
              description:
                'Searches for users with a supported filtering expression for most properties. Okta recommends using this parameter for search for best performance. This operation supports pagination. Use an ID lookup for records that you update to ensure your results contain the latest data. Property names in the search parameter are case sensitive, whereas operators (eq, sw, and so on) and string values are case insensitive. Unlike with user logins, diacritical marks are significant in search string values: a search for isaac.brock finds Isaac.Brock, but doesn\'t find a property whose value is isáàc.bröck. This operation requires URL encoding. For example, search=profile.department eq "Engineering" is encoded as search=profile.department%20eq%20%22Engineering%22. Note: If you use the special character " within a quoted string, it must also be escaped \\ and encoded. For example, search=profile.lastName eq "bob"smith" is encoded as search=profile.lastName%20eq%20%22bob%5C%22smith%22. This operation searches many properties: Any user profile property, including custom-defined properties. The top-level properties id, status, created, activated, statusChanged, and lastUpdated. The User Type accessed as type.id. You can also use sortBy and sortOrder parameters. The ne (not equal) operator isn\'t supported, but you can obtain the same result by using lt ... or ... gt. For example, to see all users except those that have a status of STAGED, use (status lt "STAGED" or status gt "STAGED"). You can search properties that are arrays. If any element matches the search term, the entire array (object) is returned. Okta follows the SCIM Protocol Specification for searching arrays. You can search multiple arrays, multiple values in an array, as well as using the standard logical and filtering operators. See Filter.',
            },
            sortBy: {
              type: "string",
              optional: true,
              description:
                "Specifies field to sort by (for search queries only). This can be any single property, for example sortBy=profile.lastName. Users with the same value for the sortBy property will be ordered by id.",
            },
            sortOrder: {
              type: "string",
              optional: true,
              description:
                "Specifies sort order asc or desc (for search queries only). Sorting is done in ASCII sort order (that is, by ASCII character value), but isn't case sensitive. sortOrder is ignored if sortBy is not present.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "createUserOpenAPI",
      description:
        "Creates a new User in your Okta org with or without credentials. After a User is added to the Okta directory, they receive an activation email. As part of signing up for this service, you agreed not to use Okta's service/product to spam and/or send unsolicited messages. Please refrain from adding unrelated accounts to the directory as Okta is not responsible for, and disclaims any and all liability associated with, the activation email's content. You, and you alone, bear responsibility for the emails sent to any recipients.\n\nAll responses return the created User. Activation of a User is an asynchronous operation. The system performs group reconciliation during activation and assigns the User to all apps via direct or indirect relationships (group memberships). The user's transitioningToStatus property is ACTIVE during activation to indicate that the User hasn't completed the asynchronous operation. The user's status is ACTIVE when the activation process is complete. The User is emailed a one-time activation token if activated without a password.\n\nNote: If the User is assigned to an app that is configured for provisioning, the activation process triggers downstream provisioning to the app. It is possible for a User to sign in before these apps have been successfully provisioned for the User.\n\nImportant: Do not generate or send a one-time activation token when activating Users with an assigned password. Users should sign in with their assigned password.\n\nFor more information about the various scenarios of creating a user listed in the examples, see User Scenario Creations section in the Users API description.",
      jsDoc:
        "\n/** \n*@method createUserOpenAPI \n*@desc This is an openAPI method. Creates a new User in your Okta org with or without credentials. After a User is added to the Okta directory, they receive an activation email. As part of signing up for this service, you agreed not to use Okta's service/product to spam and/or send unsolicited messages. Please refrain from adding unrelated accounts to the directory as Okta is not responsible for, and disclaims any and all liability associated with, the activation email's content. You, and you alone, bear responsibility for the emails sent to any recipients.\n\nAll responses return the created User. Activation of a User is an asynchronous operation. The system performs group reconciliation during activation and assigns the User to all apps via direct or indirect relationships (group memberships). The user's transitioningToStatus property is ACTIVE during activation to indicate that the User hasn't completed the asynchronous operation. The user's status is ACTIVE when the activation process is complete. The User is emailed a one-time activation token if activated without a password.\n\nNote: If the User is assigned to an app that is configured for provisioning, the activation process triggers downstream provisioning to the app. It is possible for a User to sign in before these apps have been successfully provisioned for the User.\n\nImportant: Do not generate or send a one-time activation token when activating Users with an assigned password. Users should sign in with their assigned password.\n\nFor more information about the various scenarios of creating a user listed in the examples, see User Scenario Creations section in the Users API description. \n * @param {object} parameters - Operation parameters\n * @param {boolean} parameters.activate - Executes an activation lifecycle operation when creating the User\n * @param {boolean} parameters.provider - Indicates whether to create a User with a specified authentication provider\n * @param {string} parameters.nextLogin - With activate=true, if nextLogin=changePassword, a User is created, activated, and the password is set to EXPIRED. The User must change it the next time they sign in.\n * @param {object} parameters.profile - Specifies the default and custom profile properties for a user.\n * @param {string} parameters.profile.city - The city or locality of the User's address (locality).\n * @param {string} parameters.profile.costCenter - Name of the cost center assigned to a user.\n * @param {string} parameters.profile.countryCode - The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.\n * @param {string} parameters.profile.department - Name of the User's department.\n * @param {string} parameters.profile.displayName - Name of the User suitable for display to end users.\n * @param {string} parameters.profile.division - Name of the User's division.\n * @param {string} parameters.profile.email - The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.\n * @param {string} parameters.profile.employeeNumber - The organization or company assigned unique identifier for the user.\n * @param {string} parameters.profile.firstName - Given name of the User (givenName).\n * @param {string} parameters.profile.honorificPrefix - Honorific prefix(es) of the user, or title in most Western languages.\n * @param {string} parameters.profile.honorificSuffix - Honorific suffix(es) of the User.\n * @param {string} parameters.profile.lastName - The family name of the User (familyName).\n * @param {string} parameters.profile.locale - The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.\n * @param {string} parameters.profile.login - The unique identifier for the User (username). For validation, see Login pattern validation.\n * @param {string} parameters.profile.manager - The displayName of the User's manager.\n * @param {string} parameters.profile.managerId - The id of the User's manager.\n * @param {string} parameters.profile.middleName - The middle name of the user.\n * @param {string} parameters.profile.mobilePhone - The mobile phone number of the user.\n * @param {string} parameters.profile.nickName - The casual way to address the User in real life.\n * @param {string} parameters.profile.organization - Name of the User's organization.\n * @param {string} parameters.profile.postalAddress - Mailing address component of the User's address.\n * @param {string} parameters.profile.preferredLanguage - The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.\n * @param {string} parameters.profile.primaryPhone - The primary phone number of the User such as a home number.\n * @param {string} parameters.profile.profileUrl - The URL of the User's online profile. For example, a web page. See URL.\n * @param {string} parameters.profile.secondEmail - The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.\n * @param {string} parameters.profile.state - The state or region component of the User's address (region).\n * @param {string} parameters.profile.streetAddress - The full street address component of the User's address.\n * @param {string} parameters.profile.timezone - The User's time zone.\n * @param {string} parameters.profile.title - The User's title, such as Vice President.\n * @param {string} parameters.profile.userType - The property used to describe the organization-to-user relationship, such as employee or contractor.\n * @param {string} parameters.profile.zipCode - The ZIP code or postal code component of the User's address (postalCode).\n * @param {object} parameters.credentials - Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.\n * @param {object} parameters.credentials.hash - The hash details of the password. Only applicable when password hashing is used.\n * @param {string} parameters.credentials.hash.algorithm - The algorithm used to generate the hash.\n * @param {string} parameters.credentials.hash.digestAlgorithm - The digest algorithm used for PBKDF2 hashing.\n * @param {integer} parameters.credentials.hash.iterationCount - Number of iterations used in PBKDF2 hashing.\n * @param {integer} parameters.credentials.hash.keySize - Size of the derived key in bytes for PBKDF2.\n * @param {string} parameters.credentials.hash.salt - Base64-encoded salt used to generate the hash.\n * @param {string} parameters.credentials.hash.saltOrder - Order in which salt is applied to the password before hashing.\n * @param {string} parameters.credentials.hash.value - Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.\n * @param {integer} parameters.credentials.hash.workFactor - Strength of the hash for BCRYPT algorithm.\n * @param {object} parameters.credentials.hook - Details of the password hook used for managing passwords.\n * @param {string} parameters.credentials.hook.type - The type of password inline hook. Currently, must be set to default.\n * @param {string} parameters.credentials.value - The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.\n * @param {string[]} parameters.groupIds - Array of group IDs to assign the user to.\n * @param {string} parameters.realmId - The ID of the Realm in which the User is residing.\n * @param {object} parameters.type - The ID of the User Type.\n * @param {string} parameters.type.id - The ID of the User Type.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            activate: {
              type: "boolean",
              optional: true,
              description:
                "Executes an activation lifecycle operation when creating the User",
            },
            provider: {
              type: "boolean",
              optional: true,
              description:
                "Indicates whether to create a User with a specified authentication provider",
            },
            nextLogin: {
              type: "string",
              optional: true,
              description:
                "With activate=true, if nextLogin=changePassword, a User is created, activated, and the password is set to EXPIRED. The User must change it the next time they sign in.",
            },
            profile: {
              type: "object",
              schema: {
                city: {
                  type: "string",
                  optional: true,
                  description:
                    "The city or locality of the User's address (locality).",
                },
                costCenter: {
                  type: "string",
                  optional: true,
                  description: "Name of the cost center assigned to a user.",
                },
                countryCode: {
                  type: "string",
                  optional: true,
                  description:
                    "The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.",
                },
                department: {
                  type: "string",
                  optional: false,
                  description: "Name of the User's department.",
                },
                displayName: {
                  type: "string",
                  optional: true,
                  description:
                    "Name of the User suitable for display to end users.",
                },
                division: {
                  type: "string",
                  optional: true,
                  description: "Name of the User's division.",
                },
                email: {
                  type: "string",
                  optional: true,
                  description:
                    "The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.",
                },
                employeeNumber: {
                  type: "string",
                  optional: false,
                  description:
                    "The organization or company assigned unique identifier for the user.",
                },
                firstName: {
                  type: "string",
                  optional: true,
                  description: "Given name of the User (givenName).",
                },
                honorificPrefix: {
                  type: "string",
                  optional: true,
                  description:
                    "Honorific prefix(es) of the user, or title in most Western languages.",
                },
                honorificSuffix: {
                  type: "string",
                  optional: true,
                  description: "Honorific suffix(es) of the User.",
                },
                lastName: {
                  type: "string",
                  optional: true,
                  description: "The family name of the User (familyName).",
                },
                locale: {
                  type: "string",
                  optional: false,
                  description:
                    "The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.",
                },
                login: {
                  type: "string",
                  optional: false,
                  description:
                    "The unique identifier for the User (username). For validation, see Login pattern validation.",
                },
                manager: {
                  type: "string",
                  optional: true,
                  description: "The displayName of the User's manager.",
                },
                managerId: {
                  type: "string",
                  optional: true,
                  description: "The id of the User's manager.",
                },
                middleName: {
                  type: "string",
                  optional: true,
                  description: "The middle name of the user.",
                },
                mobilePhone: {
                  type: "string",
                  optional: true,
                  description: "The mobile phone number of the user.",
                },
                nickName: {
                  type: "string",
                  optional: true,
                  description:
                    "The casual way to address the User in real life.",
                },
                organization: {
                  type: "string",
                  optional: true,
                  description: "Name of the User's organization.",
                },
                postalAddress: {
                  type: "string",
                  optional: true,
                  description:
                    "Mailing address component of the User's address.",
                },
                preferredLanguage: {
                  type: "string",
                  optional: true,
                  description:
                    "The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.",
                },
                primaryPhone: {
                  type: "string",
                  optional: true,
                  description:
                    "The primary phone number of the User such as a home number.",
                },
                profileUrl: {
                  type: "string",
                  optional: true,
                  description:
                    "The URL of the User's online profile. For example, a web page. See URL.",
                },
                secondEmail: {
                  type: "string",
                  optional: true,
                  description:
                    "The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.",
                },
                state: {
                  type: "string",
                  optional: true,
                  description:
                    "The state or region component of the User's address (region).",
                },
                streetAddress: {
                  type: "string",
                  optional: true,
                  description:
                    "The full street address component of the User's address.",
                },
                timezone: {
                  type: "string",
                  optional: true,
                  description: "The User's time zone.",
                },
                title: {
                  type: "string",
                  optional: true,
                  description: "The User's title, such as Vice President.",
                },
                userType: {
                  type: "string",
                  optional: true,
                  description:
                    "The property used to describe the organization-to-user relationship, such as employee or contractor.",
                },
                zipCode: {
                  type: "string",
                  optional: true,
                  description:
                    "The ZIP code or postal code component of the User's address (postalCode).",
                },
              },
              description:
                "Specifies the default and custom profile properties for a user.",
            },
            credentials: {
              type: "object",
              schema: {
                hash: {
                  type: "object",
                  schema: {
                    algorithm: {
                      type: "string",
                      optional: true,
                      description: "The algorithm used to generate the hash.",
                    },
                    digestAlgorithm: {
                      type: "string",
                      optional: true,
                      description:
                        "The digest algorithm used for PBKDF2 hashing.",
                    },
                    iterationCount: {
                      type: "integer",
                      optional: true,
                      description:
                        "Number of iterations used in PBKDF2 hashing.",
                    },
                    keySize: {
                      type: "integer",
                      optional: true,
                      description:
                        "Size of the derived key in bytes for PBKDF2.",
                    },
                    salt: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded salt used to generate the hash.",
                    },
                    saltOrder: {
                      type: "string",
                      optional: true,
                      description:
                        "Order in which salt is applied to the password before hashing.",
                    },
                    value: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                    },
                    workFactor: {
                      type: "integer",
                      optional: true,
                      description: "Strength of the hash for BCRYPT algorithm.",
                    },
                  },
                  description:
                    "The hash details of the password. Only applicable when password hashing is used.",
                },
                hook: {
                  type: "object",
                  schema: {
                    type: {
                      type: "string",
                      optional: true,
                      description:
                        "The type of password inline hook. Currently, must be set to default.",
                    },
                  },
                  description:
                    "Details of the password hook used for managing passwords.",
                },
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                },
              },
              description:
                "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
            },
            groupIds: {
              type: "array",
              items: {
                type: "string",
              },
              description: "Array of group IDs to assign the user to.",
            },
            realmId: {
              type: "string",
              optional: true,
              description: "The ID of the Realm in which the User is residing.",
            },
            type: {
              type: "object",
              schema: {
                id: {
                  type: "string",
                  optional: true,
                  description: "The ID of the User Type.",
                },
              },
              description: "The ID of the User Type.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              activated: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User status transitioned to ACTIVE.",
              },
              created: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was created.",
              },
              credentials: {
                type: "object",
                schema: {
                  password: {
                    type: "object",
                    schema: {
                      hash: {
                        type: "object",
                        schema: {
                          algorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The algorithm used to generate the hash.",
                          },
                          digestAlgorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The digest algorithm used for PBKDF2 hashing.",
                          },
                          iterationCount: {
                            type: "integer",
                            optional: true,
                            description:
                              "Number of iterations used in PBKDF2 hashing.",
                          },
                          keySize: {
                            type: "integer",
                            optional: true,
                            description:
                              "Size of the derived key in bytes for PBKDF2.",
                          },
                          salt: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded salt used to generate the hash.",
                          },
                          saltOrder: {
                            type: "string",
                            optional: true,
                            description:
                              "Order in which salt is applied to the password before hashing.",
                          },
                          value: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                          },
                          workFactor: {
                            type: "integer",
                            optional: true,
                            description:
                              "Strength of the hash for BCRYPT algorithm.",
                          },
                        },
                        description:
                          "The hash details of the password. Only applicable when password hashing is used.",
                      },
                      hook: {
                        type: "object",
                        schema: {
                          type: {
                            type: "string",
                            optional: true,
                            description:
                              "The type of password inline hook. Currently, must be set to default.",
                          },
                        },
                        description:
                          "Details of the password hook used for managing passwords.",
                      },
                      value: {
                        type: "string",
                        optional: true,
                        description:
                          "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                      },
                    },
                    description:
                      "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
                  },
                  provider: {
                    type: "object",
                    schema: {
                      name: {
                        type: "string",
                        optional: true,
                        description: "The name of the authentication provider.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                      },
                    },
                    description:
                      "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
                  },
                  recovery_question: {
                    type: "object",
                    schema: {
                      question: {
                        type: "string",
                        optional: true,
                        description:
                          "The recovery question. Must be between 1 and 100 characters long.",
                      },
                    },
                    description:
                      "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
                  },
                },
              },
              id: {
                type: "string",
                optional: true,
                description: "The unique key for the user.",
              },
              lastLogin: {
                type: "string",
                optional: true,
                description: "The timestamp of the last login.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was last updated.",
              },
              passwordChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User's password was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  city: {
                    type: "string",
                    optional: true,
                    description:
                      "The city or locality of the User's address (locality).",
                  },
                  costCenter: {
                    type: "string",
                    optional: true,
                    description: "Name of the cost center assigned to a user.",
                  },
                  countryCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.",
                  },
                  department: {
                    type: "string",
                    optional: false,
                    description: "Name of the User's department.",
                  },
                  displayName: {
                    type: "string",
                    optional: true,
                    description:
                      "Name of the User suitable for display to end users.",
                  },
                  division: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's division.",
                  },
                  email: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  employeeNumber: {
                    type: "string",
                    optional: false,
                    description:
                      "The organization or company assigned unique identifier for the user.",
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                    description: "Given name of the User (givenName).",
                  },
                  honorificPrefix: {
                    type: "string",
                    optional: true,
                    description:
                      "Honorific prefix(es) of the user, or title in most Western languages.",
                  },
                  honorificSuffix: {
                    type: "string",
                    optional: true,
                    description: "Honorific suffix(es) of the User.",
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                    description: "The family name of the User (familyName).",
                  },
                  locale: {
                    type: "string",
                    optional: false,
                    description:
                      "The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.",
                  },
                  login: {
                    type: "string",
                    optional: false,
                    description:
                      "The unique identifier for the User (username). For validation, see Login pattern validation.",
                  },
                  manager: {
                    type: "string",
                    optional: true,
                    description: "The displayName of the User's manager.",
                  },
                  managerId: {
                    type: "string",
                    optional: true,
                    description: "The id of the User's manager.",
                  },
                  middleName: {
                    type: "string",
                    optional: true,
                    description: "The middle name of the user.",
                  },
                  mobilePhone: {
                    type: "string",
                    optional: true,
                    description: "The mobile phone number of the user.",
                  },
                  nickName: {
                    type: "string",
                    optional: true,
                    description:
                      "The casual way to address the User in real life.",
                  },
                  organization: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's organization.",
                  },
                  postalAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "Mailing address component of the User's address.",
                  },
                  preferredLanguage: {
                    type: "string",
                    optional: true,
                    description:
                      "The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.",
                  },
                  primaryPhone: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary phone number of the User such as a home number.",
                  },
                  profileUrl: {
                    type: "string",
                    optional: true,
                    description:
                      "The URL of the User's online profile. For example, a web page. See URL.",
                  },
                  secondEmail: {
                    type: "string",
                    optional: true,
                    description:
                      "The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  state: {
                    type: "string",
                    optional: true,
                    description:
                      "The state or region component of the User's address (region).",
                  },
                  streetAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "The full street address component of the User's address.",
                  },
                  timezone: {
                    type: "string",
                    optional: true,
                    description: "The User's time zone.",
                  },
                  title: {
                    type: "string",
                    optional: true,
                    description: "The User's title, such as Vice President.",
                  },
                  userType: {
                    type: "string",
                    optional: true,
                    description:
                      "The property used to describe the organization-to-user relationship, such as employee or contractor.",
                  },
                  zipCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The ZIP code or postal code component of the User's address (postalCode).",
                  },
                },
                description:
                  "Specifies the default and custom profile properties for a user.",
              },
              realmId: {
                type: "string",
                optional: true,
                description:
                  "The ID of the Realm in which the User is residing.",
              },
              status: {
                type: "string",
                optional: true,
                description: "The current status of the user.",
              },
              statusChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the status of the User last changed.",
              },
              transitioningToStatus: {
                type: "string",
                optional: true,
                description:
                  "The target status of an in-progress asynchronous status transition.",
              },
              type: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                    description: "The ID of the User type.",
                  },
                },
                description:
                  "The User type that determines the schema for the User's profile.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources related to the User.",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetFactors: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  expirePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  forgotPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changeRecoveryQuestion: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  reactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  schema: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  suspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unsuspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unlock: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  type: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
                description: "Link relations for the user.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveUserOpenAPI",
      description:
        "Retrieves a User from your Okta org. You can substitute `me` for the `id` to fetch the current User linked to an API token or session cookie. The request returns the User linked to the API token specified in the Authorization header, not the User linked to the active session.",
      jsDoc:
        "\n/** \n*@method retrieveUserOpenAPI \n*@desc This is an openAPI method. Retrieves a User from your Okta org. You can substitute `me` for the `id` to fetch the current User linked to an API token or session cookie. The request returns the User linked to the API token specified in the Authorization header, not the User linked to the active session. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.expand \n * @param {string} parameters.Content-Type \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            expand: {
              type: "string",
              optional: true,
            },
            '"Content-Type"': {
              type: "string",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              activated: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User status transitioned to ACTIVE.",
              },
              created: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was created.",
              },
              credentials: {
                type: "object",
                schema: {
                  password: {
                    type: "object",
                    schema: {
                      hash: {
                        type: "object",
                        schema: {
                          algorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The algorithm used to generate the hash.",
                          },
                          digestAlgorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The digest algorithm used for PBKDF2 hashing.",
                          },
                          iterationCount: {
                            type: "integer",
                            optional: true,
                            description:
                              "Number of iterations used in PBKDF2 hashing.",
                          },
                          keySize: {
                            type: "integer",
                            optional: true,
                            description:
                              "Size of the derived key in bytes for PBKDF2.",
                          },
                          salt: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded salt used to generate the hash.",
                          },
                          saltOrder: {
                            type: "string",
                            optional: true,
                            description:
                              "Order in which salt is applied to the password before hashing.",
                          },
                          value: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                          },
                          workFactor: {
                            type: "integer",
                            optional: true,
                            description:
                              "Strength of the hash for BCRYPT algorithm.",
                          },
                        },
                        description:
                          "The hash details of the password. Only applicable when password hashing is used.",
                      },
                      hook: {
                        type: "object",
                        schema: {
                          type: {
                            type: "string",
                            optional: true,
                            description:
                              "The type of password inline hook. Currently, must be set to default.",
                          },
                        },
                        description:
                          "Details of the password hook used for managing passwords.",
                      },
                      value: {
                        type: "string",
                        optional: true,
                        description:
                          "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                      },
                    },
                    description:
                      "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
                  },
                  provider: {
                    type: "object",
                    schema: {
                      name: {
                        type: "string",
                        optional: true,
                        description: "The name of the authentication provider.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                      },
                    },
                    description:
                      "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
                  },
                  recovery_question: {
                    type: "object",
                    schema: {
                      question: {
                        type: "string",
                        optional: true,
                        description:
                          "The recovery question. Must be between 1 and 100 characters long.",
                      },
                    },
                    description:
                      "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
                  },
                },
              },
              id: {
                type: "string",
                optional: true,
                description: "The unique key for the user.",
              },
              lastLogin: {
                type: "string",
                optional: true,
                description: "The timestamp of the last login.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was last updated.",
              },
              passwordChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User's password was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  city: {
                    type: "string",
                    optional: true,
                    description:
                      "The city or locality of the User's address (locality).",
                  },
                  costCenter: {
                    type: "string",
                    optional: true,
                    description: "Name of the cost center assigned to a user.",
                  },
                  countryCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.",
                  },
                  department: {
                    type: "string",
                    optional: false,
                    description: "Name of the User's department.",
                  },
                  displayName: {
                    type: "string",
                    optional: true,
                    description:
                      "Name of the User suitable for display to end users.",
                  },
                  division: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's division.",
                  },
                  email: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  employeeNumber: {
                    type: "string",
                    optional: false,
                    description:
                      "The organization or company assigned unique identifier for the user.",
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                    description: "Given name of the User (givenName).",
                  },
                  honorificPrefix: {
                    type: "string",
                    optional: true,
                    description:
                      "Honorific prefix(es) of the user, or title in most Western languages.",
                  },
                  honorificSuffix: {
                    type: "string",
                    optional: true,
                    description: "Honorific suffix(es) of the User.",
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                    description: "The family name of the User (familyName).",
                  },
                  locale: {
                    type: "string",
                    optional: false,
                    description:
                      "The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.",
                  },
                  login: {
                    type: "string",
                    optional: false,
                    description:
                      "The unique identifier for the User (username). For validation, see Login pattern validation.",
                  },
                  manager: {
                    type: "string",
                    optional: true,
                    description: "The displayName of the User's manager.",
                  },
                  managerId: {
                    type: "string",
                    optional: true,
                    description: "The id of the User's manager.",
                  },
                  middleName: {
                    type: "string",
                    optional: true,
                    description: "The middle name of the user.",
                  },
                  mobilePhone: {
                    type: "string",
                    optional: true,
                    description: "The mobile phone number of the user.",
                  },
                  nickName: {
                    type: "string",
                    optional: true,
                    description:
                      "The casual way to address the User in real life.",
                  },
                  organization: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's organization.",
                  },
                  postalAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "Mailing address component of the User's address.",
                  },
                  preferredLanguage: {
                    type: "string",
                    optional: true,
                    description:
                      "The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.",
                  },
                  primaryPhone: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary phone number of the User such as a home number.",
                  },
                  profileUrl: {
                    type: "string",
                    optional: true,
                    description:
                      "The URL of the User's online profile. For example, a web page. See URL.",
                  },
                  secondEmail: {
                    type: "string",
                    optional: true,
                    description:
                      "The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  state: {
                    type: "string",
                    optional: true,
                    description:
                      "The state or region component of the User's address (region).",
                  },
                  streetAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "The full street address component of the User's address.",
                  },
                  timezone: {
                    type: "string",
                    optional: true,
                    description: "The User's time zone.",
                  },
                  title: {
                    type: "string",
                    optional: true,
                    description: "The User's title, such as Vice President.",
                  },
                  userType: {
                    type: "string",
                    optional: true,
                    description:
                      "The property used to describe the organization-to-user relationship, such as employee or contractor.",
                  },
                  zipCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The ZIP code or postal code component of the User's address (postalCode).",
                  },
                },
                description:
                  "Specifies the default and custom profile properties for a user.",
              },
              realmId: {
                type: "string",
                optional: true,
                description:
                  "The ID of the Realm in which the User is residing.",
              },
              status: {
                type: "string",
                optional: true,
                description: "The current status of the user.",
              },
              statusChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the status of the User last changed.",
              },
              transitioningToStatus: {
                type: "string",
                optional: true,
                description:
                  "The target status of an in-progress asynchronous status transition.",
              },
              type: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                    description: "The ID of the User type.",
                  },
                },
                description:
                  "The User type that determines the schema for the User's profile.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources related to the User.",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetFactors: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  expirePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  forgotPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changeRecoveryQuestion: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  reactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  schema: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  suspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unsuspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unlock: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  type: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
                description: "Link relations for the user.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "updateUserOpenAPI",
      description:
        "Updates a user's profile or credentials with partial update semantics. You can update profile and credentials independently or together with a single request. Use the POST method for partial updates; unspecified properties are set to null with PUT. Note: The User Type of a User can only be changed via a full replacement PUT operation.",
      jsDoc:
        "\n/** \n*@method updateUserOpenAPI \n*@desc This is an openAPI method. Updates a user's profile or credentials with partial update semantics. You can update profile and credentials independently or together with a single request. Use the POST method for partial updates; unspecified properties are set to null with PUT. Note: The User Type of a User can only be changed via a full replacement PUT operation. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.strict \n * @param {object} parameters.profile - Specifies the default and custom profile properties for a user.\n * @param {string} parameters.profile.city - The city or locality of the User's address (locality).\n * @param {string} parameters.profile.costCenter - Name of the cost center assigned to a user.\n * @param {string} parameters.profile.countryCode - The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.\n * @param {string} parameters.profile.department - Name of the User's department.\n * @param {string} parameters.profile.displayName - Name of the User suitable for display to end users.\n * @param {string} parameters.profile.division - Name of the User's division.\n * @param {string} parameters.profile.email - The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.\n * @param {string} parameters.profile.employeeNumber - The organization or company assigned unique identifier for the user.\n * @param {string} parameters.profile.firstName - Given name of the User (givenName).\n * @param {string} parameters.profile.honorificPrefix - Honorific prefix(es) of the user, or title in most Western languages.\n * @param {string} parameters.profile.honorificSuffix - Honorific suffix(es) of the User.\n * @param {string} parameters.profile.lastName - The family name of the User (familyName).\n * @param {string} parameters.profile.locale - The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.\n * @param {string} parameters.profile.login - The unique identifier for the User (username). For validation, see Login pattern validation.\n * @param {string} parameters.profile.manager - The displayName of the User's manager.\n * @param {string} parameters.profile.managerId - The id of the User's manager.\n * @param {string} parameters.profile.middleName - The middle name of the user.\n * @param {string} parameters.profile.mobilePhone - The mobile phone number of the user.\n * @param {string} parameters.profile.nickName - The casual way to address the User in real life.\n * @param {string} parameters.profile.organization - Name of the User's organization.\n * @param {string} parameters.profile.postalAddress - Mailing address component of the User's address.\n * @param {string} parameters.profile.preferredLanguage - The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.\n * @param {string} parameters.profile.primaryPhone - The primary phone number of the User such as a home number.\n * @param {string} parameters.profile.profileUrl - The URL of the User's online profile. For example, a web page. See URL.\n * @param {string} parameters.profile.secondEmail - The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.\n * @param {string} parameters.profile.state - The state or region component of the User's address (region).\n * @param {string} parameters.profile.streetAddress - The full street address component of the User's address.\n * @param {string} parameters.profile.timezone - The User's time zone.\n * @param {string} parameters.profile.title - The User's title, such as Vice President.\n * @param {string} parameters.profile.userType - The property used to describe the organization-to-user relationship, such as employee or contractor.\n * @param {string} parameters.profile.zipCode - The ZIP code or postal code component of the User's address (postalCode).\n * @param {object} parameters.credentials - Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.\n * @param {object} parameters.credentials.hash - The hash details of the password. Only applicable when password hashing is used.\n * @param {string} parameters.credentials.hash.algorithm - The algorithm used to generate the hash.\n * @param {string} parameters.credentials.hash.digestAlgorithm - The digest algorithm used for PBKDF2 hashing.\n * @param {integer} parameters.credentials.hash.iterationCount - Number of iterations used in PBKDF2 hashing.\n * @param {integer} parameters.credentials.hash.keySize - Size of the derived key in bytes for PBKDF2.\n * @param {string} parameters.credentials.hash.salt - Base64-encoded salt used to generate the hash.\n * @param {string} parameters.credentials.hash.saltOrder - Order in which salt is applied to the password before hashing.\n * @param {string} parameters.credentials.hash.value - Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.\n * @param {integer} parameters.credentials.hash.workFactor - Strength of the hash for BCRYPT algorithm.\n * @param {object} parameters.credentials.hook - Details of the password hook used for managing passwords.\n * @param {string} parameters.credentials.hook.type - The type of password inline hook. Currently, must be set to default.\n * @param {string} parameters.credentials.value - The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.\n * @param {string} parameters.realmId - The ID of the Realm in which the User is residing.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            strict: {
              type: "boolean",
              optional: true,
            },
            profile: {
              type: "object",
              schema: {
                city: {
                  type: "string",
                  optional: true,
                  description:
                    "The city or locality of the User's address (locality).",
                },
                costCenter: {
                  type: "string",
                  optional: true,
                  description: "Name of the cost center assigned to a user.",
                },
                countryCode: {
                  type: "string",
                  optional: true,
                  description:
                    "The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.",
                },
                department: {
                  type: "string",
                  optional: false,
                  description: "Name of the User's department.",
                },
                displayName: {
                  type: "string",
                  optional: true,
                  description:
                    "Name of the User suitable for display to end users.",
                },
                division: {
                  type: "string",
                  optional: true,
                  description: "Name of the User's division.",
                },
                email: {
                  type: "string",
                  optional: true,
                  description:
                    "The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.",
                },
                employeeNumber: {
                  type: "string",
                  optional: false,
                  description:
                    "The organization or company assigned unique identifier for the user.",
                },
                firstName: {
                  type: "string",
                  optional: true,
                  description: "Given name of the User (givenName).",
                },
                honorificPrefix: {
                  type: "string",
                  optional: true,
                  description:
                    "Honorific prefix(es) of the user, or title in most Western languages.",
                },
                honorificSuffix: {
                  type: "string",
                  optional: true,
                  description: "Honorific suffix(es) of the User.",
                },
                lastName: {
                  type: "string",
                  optional: true,
                  description: "The family name of the User (familyName).",
                },
                locale: {
                  type: "string",
                  optional: false,
                  description:
                    "The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.",
                },
                login: {
                  type: "string",
                  optional: false,
                  description:
                    "The unique identifier for the User (username). For validation, see Login pattern validation.",
                },
                manager: {
                  type: "string",
                  optional: true,
                  description: "The displayName of the User's manager.",
                },
                managerId: {
                  type: "string",
                  optional: true,
                  description: "The id of the User's manager.",
                },
                middleName: {
                  type: "string",
                  optional: true,
                  description: "The middle name of the user.",
                },
                mobilePhone: {
                  type: "string",
                  optional: true,
                  description: "The mobile phone number of the user.",
                },
                nickName: {
                  type: "string",
                  optional: true,
                  description:
                    "The casual way to address the User in real life.",
                },
                organization: {
                  type: "string",
                  optional: true,
                  description: "Name of the User's organization.",
                },
                postalAddress: {
                  type: "string",
                  optional: true,
                  description:
                    "Mailing address component of the User's address.",
                },
                preferredLanguage: {
                  type: "string",
                  optional: true,
                  description:
                    "The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.",
                },
                primaryPhone: {
                  type: "string",
                  optional: true,
                  description:
                    "The primary phone number of the User such as a home number.",
                },
                profileUrl: {
                  type: "string",
                  optional: true,
                  description:
                    "The URL of the User's online profile. For example, a web page. See URL.",
                },
                secondEmail: {
                  type: "string",
                  optional: true,
                  description:
                    "The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.",
                },
                state: {
                  type: "string",
                  optional: true,
                  description:
                    "The state or region component of the User's address (region).",
                },
                streetAddress: {
                  type: "string",
                  optional: true,
                  description:
                    "The full street address component of the User's address.",
                },
                timezone: {
                  type: "string",
                  optional: true,
                  description: "The User's time zone.",
                },
                title: {
                  type: "string",
                  optional: true,
                  description: "The User's title, such as Vice President.",
                },
                userType: {
                  type: "string",
                  optional: true,
                  description:
                    "The property used to describe the organization-to-user relationship, such as employee or contractor.",
                },
                zipCode: {
                  type: "string",
                  optional: true,
                  description:
                    "The ZIP code or postal code component of the User's address (postalCode).",
                },
              },
              description:
                "Specifies the default and custom profile properties for a user.",
            },
            credentials: {
              type: "object",
              schema: {
                hash: {
                  type: "object",
                  schema: {
                    algorithm: {
                      type: "string",
                      optional: true,
                      description: "The algorithm used to generate the hash.",
                    },
                    digestAlgorithm: {
                      type: "string",
                      optional: true,
                      description:
                        "The digest algorithm used for PBKDF2 hashing.",
                    },
                    iterationCount: {
                      type: "integer",
                      optional: true,
                      description:
                        "Number of iterations used in PBKDF2 hashing.",
                    },
                    keySize: {
                      type: "integer",
                      optional: true,
                      description:
                        "Size of the derived key in bytes for PBKDF2.",
                    },
                    salt: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded salt used to generate the hash.",
                    },
                    saltOrder: {
                      type: "string",
                      optional: true,
                      description:
                        "Order in which salt is applied to the password before hashing.",
                    },
                    value: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                    },
                    workFactor: {
                      type: "integer",
                      optional: true,
                      description: "Strength of the hash for BCRYPT algorithm.",
                    },
                  },
                  description:
                    "The hash details of the password. Only applicable when password hashing is used.",
                },
                hook: {
                  type: "object",
                  schema: {
                    type: {
                      type: "string",
                      optional: true,
                      description:
                        "The type of password inline hook. Currently, must be set to default.",
                    },
                  },
                  description:
                    "Details of the password hook used for managing passwords.",
                },
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                },
              },
              description:
                "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
            },
            realmId: {
              type: "string",
              optional: true,
              description: "The ID of the Realm in which the User is residing.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              activated: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User status transitioned to ACTIVE.",
              },
              created: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was created.",
              },
              credentials: {
                type: "object",
                schema: {
                  password: {
                    type: "object",
                    schema: {
                      hash: {
                        type: "object",
                        schema: {
                          algorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The algorithm used to generate the hash.",
                          },
                          digestAlgorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The digest algorithm used for PBKDF2 hashing.",
                          },
                          iterationCount: {
                            type: "integer",
                            optional: true,
                            description:
                              "Number of iterations used in PBKDF2 hashing.",
                          },
                          keySize: {
                            type: "integer",
                            optional: true,
                            description:
                              "Size of the derived key in bytes for PBKDF2.",
                          },
                          salt: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded salt used to generate the hash.",
                          },
                          saltOrder: {
                            type: "string",
                            optional: true,
                            description:
                              "Order in which salt is applied to the password before hashing.",
                          },
                          value: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                          },
                          workFactor: {
                            type: "integer",
                            optional: true,
                            description:
                              "Strength of the hash for BCRYPT algorithm.",
                          },
                        },
                        description:
                          "The hash details of the password. Only applicable when password hashing is used.",
                      },
                      hook: {
                        type: "object",
                        schema: {
                          type: {
                            type: "string",
                            optional: true,
                            description:
                              "The type of password inline hook. Currently, must be set to default.",
                          },
                        },
                        description:
                          "Details of the password hook used for managing passwords.",
                      },
                      value: {
                        type: "string",
                        optional: true,
                        description:
                          "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                      },
                    },
                    description:
                      "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
                  },
                  provider: {
                    type: "object",
                    schema: {
                      name: {
                        type: "string",
                        optional: true,
                        description: "The name of the authentication provider.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                      },
                    },
                    description:
                      "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
                  },
                  recovery_question: {
                    type: "object",
                    schema: {
                      question: {
                        type: "string",
                        optional: true,
                        description:
                          "The recovery question. Must be between 1 and 100 characters long.",
                      },
                    },
                    description:
                      "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
                  },
                },
              },
              id: {
                type: "string",
                optional: true,
                description: "The unique key for the user.",
              },
              lastLogin: {
                type: "string",
                optional: true,
                description: "The timestamp of the last login.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was last updated.",
              },
              passwordChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User's password was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  city: {
                    type: "string",
                    optional: true,
                    description:
                      "The city or locality of the User's address (locality).",
                  },
                  costCenter: {
                    type: "string",
                    optional: true,
                    description: "Name of the cost center assigned to a user.",
                  },
                  countryCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.",
                  },
                  department: {
                    type: "string",
                    optional: false,
                    description: "Name of the User's department.",
                  },
                  displayName: {
                    type: "string",
                    optional: true,
                    description:
                      "Name of the User suitable for display to end users.",
                  },
                  division: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's division.",
                  },
                  email: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  employeeNumber: {
                    type: "string",
                    optional: false,
                    description:
                      "The organization or company assigned unique identifier for the user.",
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                    description: "Given name of the User (givenName).",
                  },
                  honorificPrefix: {
                    type: "string",
                    optional: true,
                    description:
                      "Honorific prefix(es) of the user, or title in most Western languages.",
                  },
                  honorificSuffix: {
                    type: "string",
                    optional: true,
                    description: "Honorific suffix(es) of the User.",
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                    description: "The family name of the User (familyName).",
                  },
                  locale: {
                    type: "string",
                    optional: false,
                    description:
                      "The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.",
                  },
                  login: {
                    type: "string",
                    optional: false,
                    description:
                      "The unique identifier for the User (username). For validation, see Login pattern validation.",
                  },
                  manager: {
                    type: "string",
                    optional: true,
                    description: "The displayName of the User's manager.",
                  },
                  managerId: {
                    type: "string",
                    optional: true,
                    description: "The id of the User's manager.",
                  },
                  middleName: {
                    type: "string",
                    optional: true,
                    description: "The middle name of the user.",
                  },
                  mobilePhone: {
                    type: "string",
                    optional: true,
                    description: "The mobile phone number of the user.",
                  },
                  nickName: {
                    type: "string",
                    optional: true,
                    description:
                      "The casual way to address the User in real life.",
                  },
                  organization: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's organization.",
                  },
                  postalAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "Mailing address component of the User's address.",
                  },
                  preferredLanguage: {
                    type: "string",
                    optional: true,
                    description:
                      "The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.",
                  },
                  primaryPhone: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary phone number of the User such as a home number.",
                  },
                  profileUrl: {
                    type: "string",
                    optional: true,
                    description:
                      "The URL of the User's online profile. For example, a web page. See URL.",
                  },
                  secondEmail: {
                    type: "string",
                    optional: true,
                    description:
                      "The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  state: {
                    type: "string",
                    optional: true,
                    description:
                      "The state or region component of the User's address (region).",
                  },
                  streetAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "The full street address component of the User's address.",
                  },
                  timezone: {
                    type: "string",
                    optional: true,
                    description: "The User's time zone.",
                  },
                  title: {
                    type: "string",
                    optional: true,
                    description: "The User's title, such as Vice President.",
                  },
                  userType: {
                    type: "string",
                    optional: true,
                    description:
                      "The property used to describe the organization-to-user relationship, such as employee or contractor.",
                  },
                  zipCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The ZIP code or postal code component of the User's address (postalCode).",
                  },
                },
                description:
                  "Specifies the default and custom profile properties for a user.",
              },
              realmId: {
                type: "string",
                optional: true,
                description:
                  "The ID of the Realm in which the User is residing.",
              },
              status: {
                type: "string",
                optional: true,
                description: "The current status of the user.",
              },
              statusChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the status of the User last changed.",
              },
              transitioningToStatus: {
                type: "string",
                optional: true,
                description:
                  "The target status of an in-progress asynchronous status transition.",
              },
              type: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                    description: "The ID of the User type.",
                  },
                },
                description:
                  "The User type that determines the schema for the User's profile.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources related to the User.",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetFactors: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  expirePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  forgotPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changeRecoveryQuestion: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  reactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  schema: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  suspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unsuspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unlock: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  type: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
                description: "Link relations for the user.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "replaceUserOpenAPI",
      description:
        "Replaces a User's profile, credentials, or both using strict-update semantics. All profile properties must be specified when updating a User's profile with a PUT method. Any property not specified in the request is deleted. Note: Don't use a PUT method for partial updates.",
      jsDoc:
        "\n/** \n*@method replaceUserOpenAPI \n*@desc This is an openAPI method. Replaces a User's profile, credentials, or both using strict-update semantics. All profile properties must be specified when updating a User's profile with a PUT method. Any property not specified in the request is deleted. Note: Don't use a PUT method for partial updates. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.strict \n * @param {object} parameters.profile - Specifies the default and custom profile properties for a user.\n * @param {string} parameters.profile.city - The city or locality of the User's address (locality).\n * @param {string} parameters.profile.costCenter - Name of the cost center assigned to a user.\n * @param {string} parameters.profile.countryCode - The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.\n * @param {string} parameters.profile.department - Name of the User's department.\n * @param {string} parameters.profile.displayName - Name of the User suitable for display to end users.\n * @param {string} parameters.profile.division - Name of the User's division.\n * @param {string} parameters.profile.email - The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.\n * @param {string} parameters.profile.employeeNumber - The organization or company assigned unique identifier for the user.\n * @param {string} parameters.profile.firstName - Given name of the User (givenName).\n * @param {string} parameters.profile.honorificPrefix - Honorific prefix(es) of the user, or title in most Western languages.\n * @param {string} parameters.profile.honorificSuffix - Honorific suffix(es) of the User.\n * @param {string} parameters.profile.lastName - The family name of the User (familyName).\n * @param {string} parameters.profile.locale - The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.\n * @param {string} parameters.profile.login - The unique identifier for the User (username). For validation, see Login pattern validation.\n * @param {string} parameters.profile.manager - The displayName of the User's manager.\n * @param {string} parameters.profile.managerId - The id of the User's manager.\n * @param {string} parameters.profile.middleName - The middle name of the user.\n * @param {string} parameters.profile.mobilePhone - The mobile phone number of the user.\n * @param {string} parameters.profile.nickName - The casual way to address the User in real life.\n * @param {string} parameters.profile.organization - Name of the User's organization.\n * @param {string} parameters.profile.postalAddress - Mailing address component of the User's address.\n * @param {string} parameters.profile.preferredLanguage - The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.\n * @param {string} parameters.profile.primaryPhone - The primary phone number of the User such as a home number.\n * @param {string} parameters.profile.profileUrl - The URL of the User's online profile. For example, a web page. See URL.\n * @param {string} parameters.profile.secondEmail - The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.\n * @param {string} parameters.profile.state - The state or region component of the User's address (region).\n * @param {string} parameters.profile.streetAddress - The full street address component of the User's address.\n * @param {string} parameters.profile.timezone - The User's time zone.\n * @param {string} parameters.profile.title - The User's title, such as Vice President.\n * @param {string} parameters.profile.userType - The property used to describe the organization-to-user relationship, such as employee or contractor.\n * @param {string} parameters.profile.zipCode - The ZIP code or postal code component of the User's address (postalCode).\n * @param {object} parameters.credentials - Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.\n * @param {object} parameters.credentials.hash - The hash details of the password. Only applicable when password hashing is used.\n * @param {string} parameters.credentials.hash.algorithm - The algorithm used to generate the hash.\n * @param {string} parameters.credentials.hash.digestAlgorithm - The digest algorithm used for PBKDF2 hashing.\n * @param {integer} parameters.credentials.hash.iterationCount - Number of iterations used in PBKDF2 hashing.\n * @param {integer} parameters.credentials.hash.keySize - Size of the derived key in bytes for PBKDF2.\n * @param {string} parameters.credentials.hash.salt - Base64-encoded salt used to generate the hash.\n * @param {string} parameters.credentials.hash.saltOrder - Order in which salt is applied to the password before hashing.\n * @param {string} parameters.credentials.hash.value - Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.\n * @param {integer} parameters.credentials.hash.workFactor - Strength of the hash for BCRYPT algorithm.\n * @param {object} parameters.credentials.hook - Details of the password hook used for managing passwords.\n * @param {string} parameters.credentials.hook.type - The type of password inline hook. Currently, must be set to default.\n * @param {string} parameters.credentials.value - The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.\n * @param {string} parameters.realmId - The ID of the Realm in which the User is residing.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            strict: {
              type: "boolean",
              optional: true,
            },
            profile: {
              type: "object",
              schema: {
                city: {
                  type: "string",
                  optional: true,
                  description:
                    "The city or locality of the User's address (locality).",
                },
                costCenter: {
                  type: "string",
                  optional: true,
                  description: "Name of the cost center assigned to a user.",
                },
                countryCode: {
                  type: "string",
                  optional: true,
                  description:
                    "The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.",
                },
                department: {
                  type: "string",
                  optional: false,
                  description: "Name of the User's department.",
                },
                displayName: {
                  type: "string",
                  optional: true,
                  description:
                    "Name of the User suitable for display to end users.",
                },
                division: {
                  type: "string",
                  optional: true,
                  description: "Name of the User's division.",
                },
                email: {
                  type: "string",
                  optional: true,
                  description:
                    "The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.",
                },
                employeeNumber: {
                  type: "string",
                  optional: false,
                  description:
                    "The organization or company assigned unique identifier for the user.",
                },
                firstName: {
                  type: "string",
                  optional: true,
                  description: "Given name of the User (givenName).",
                },
                honorificPrefix: {
                  type: "string",
                  optional: true,
                  description:
                    "Honorific prefix(es) of the user, or title in most Western languages.",
                },
                honorificSuffix: {
                  type: "string",
                  optional: true,
                  description: "Honorific suffix(es) of the User.",
                },
                lastName: {
                  type: "string",
                  optional: true,
                  description: "The family name of the User (familyName).",
                },
                locale: {
                  type: "string",
                  optional: false,
                  description:
                    "The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.",
                },
                login: {
                  type: "string",
                  optional: false,
                  description:
                    "The unique identifier for the User (username). For validation, see Login pattern validation.",
                },
                manager: {
                  type: "string",
                  optional: true,
                  description: "The displayName of the User's manager.",
                },
                managerId: {
                  type: "string",
                  optional: true,
                  description: "The id of the User's manager.",
                },
                middleName: {
                  type: "string",
                  optional: true,
                  description: "The middle name of the user.",
                },
                mobilePhone: {
                  type: "string",
                  optional: true,
                  description: "The mobile phone number of the user.",
                },
                nickName: {
                  type: "string",
                  optional: true,
                  description:
                    "The casual way to address the User in real life.",
                },
                organization: {
                  type: "string",
                  optional: true,
                  description: "Name of the User's organization.",
                },
                postalAddress: {
                  type: "string",
                  optional: true,
                  description:
                    "Mailing address component of the User's address.",
                },
                preferredLanguage: {
                  type: "string",
                  optional: true,
                  description:
                    "The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.",
                },
                primaryPhone: {
                  type: "string",
                  optional: true,
                  description:
                    "The primary phone number of the User such as a home number.",
                },
                profileUrl: {
                  type: "string",
                  optional: true,
                  description:
                    "The URL of the User's online profile. For example, a web page. See URL.",
                },
                secondEmail: {
                  type: "string",
                  optional: true,
                  description:
                    "The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.",
                },
                state: {
                  type: "string",
                  optional: true,
                  description:
                    "The state or region component of the User's address (region).",
                },
                streetAddress: {
                  type: "string",
                  optional: true,
                  description:
                    "The full street address component of the User's address.",
                },
                timezone: {
                  type: "string",
                  optional: true,
                  description: "The User's time zone.",
                },
                title: {
                  type: "string",
                  optional: true,
                  description: "The User's title, such as Vice President.",
                },
                userType: {
                  type: "string",
                  optional: true,
                  description:
                    "The property used to describe the organization-to-user relationship, such as employee or contractor.",
                },
                zipCode: {
                  type: "string",
                  optional: true,
                  description:
                    "The ZIP code or postal code component of the User's address (postalCode).",
                },
              },
              description:
                "Specifies the default and custom profile properties for a user.",
            },
            credentials: {
              type: "object",
              schema: {
                hash: {
                  type: "object",
                  schema: {
                    algorithm: {
                      type: "string",
                      optional: true,
                      description: "The algorithm used to generate the hash.",
                    },
                    digestAlgorithm: {
                      type: "string",
                      optional: true,
                      description:
                        "The digest algorithm used for PBKDF2 hashing.",
                    },
                    iterationCount: {
                      type: "integer",
                      optional: true,
                      description:
                        "Number of iterations used in PBKDF2 hashing.",
                    },
                    keySize: {
                      type: "integer",
                      optional: true,
                      description:
                        "Size of the derived key in bytes for PBKDF2.",
                    },
                    salt: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded salt used to generate the hash.",
                    },
                    saltOrder: {
                      type: "string",
                      optional: true,
                      description:
                        "Order in which salt is applied to the password before hashing.",
                    },
                    value: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                    },
                    workFactor: {
                      type: "integer",
                      optional: true,
                      description: "Strength of the hash for BCRYPT algorithm.",
                    },
                  },
                  description:
                    "The hash details of the password. Only applicable when password hashing is used.",
                },
                hook: {
                  type: "object",
                  schema: {
                    type: {
                      type: "string",
                      optional: true,
                      description:
                        "The type of password inline hook. Currently, must be set to default.",
                    },
                  },
                  description:
                    "Details of the password hook used for managing passwords.",
                },
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                },
              },
              description:
                "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
            },
            realmId: {
              type: "string",
              optional: true,
              description: "The ID of the Realm in which the User is residing.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              activated: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User status transitioned to ACTIVE.",
              },
              created: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was created.",
              },
              credentials: {
                type: "object",
                schema: {
                  password: {
                    type: "object",
                    schema: {
                      hash: {
                        type: "object",
                        schema: {
                          algorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The algorithm used to generate the hash.",
                          },
                          digestAlgorithm: {
                            type: "string",
                            optional: true,
                            description:
                              "The digest algorithm used for PBKDF2 hashing.",
                          },
                          iterationCount: {
                            type: "integer",
                            optional: true,
                            description:
                              "Number of iterations used in PBKDF2 hashing.",
                          },
                          keySize: {
                            type: "integer",
                            optional: true,
                            description:
                              "Size of the derived key in bytes for PBKDF2.",
                          },
                          salt: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded salt used to generate the hash.",
                          },
                          saltOrder: {
                            type: "string",
                            optional: true,
                            description:
                              "Order in which salt is applied to the password before hashing.",
                          },
                          value: {
                            type: "string",
                            optional: true,
                            description:
                              "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                          },
                          workFactor: {
                            type: "integer",
                            optional: true,
                            description:
                              "Strength of the hash for BCRYPT algorithm.",
                          },
                        },
                        description:
                          "The hash details of the password. Only applicable when password hashing is used.",
                      },
                      hook: {
                        type: "object",
                        schema: {
                          type: {
                            type: "string",
                            optional: true,
                            description:
                              "The type of password inline hook. Currently, must be set to default.",
                          },
                        },
                        description:
                          "Details of the password hook used for managing passwords.",
                      },
                      value: {
                        type: "string",
                        optional: true,
                        description:
                          "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                      },
                    },
                    description:
                      "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
                  },
                  provider: {
                    type: "object",
                    schema: {
                      name: {
                        type: "string",
                        optional: true,
                        description: "The name of the authentication provider.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                      },
                    },
                    description:
                      "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
                  },
                  recovery_question: {
                    type: "object",
                    schema: {
                      question: {
                        type: "string",
                        optional: true,
                        description:
                          "The recovery question. Must be between 1 and 100 characters long.",
                      },
                    },
                    description:
                      "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
                  },
                },
              },
              id: {
                type: "string",
                optional: true,
                description: "The unique key for the user.",
              },
              lastLogin: {
                type: "string",
                optional: true,
                description: "The timestamp of the last login.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "The timestamp when the User was last updated.",
              },
              passwordChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the User's password was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  city: {
                    type: "string",
                    optional: true,
                    description:
                      "The city or locality of the User's address (locality).",
                  },
                  costCenter: {
                    type: "string",
                    optional: true,
                    description: "Name of the cost center assigned to a user.",
                  },
                  countryCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The country name component of the User's address (country). For validation, see ISO 3166-1 alpha 2 'short' code format.",
                  },
                  department: {
                    type: "string",
                    optional: false,
                    description: "Name of the User's department.",
                  },
                  displayName: {
                    type: "string",
                    optional: true,
                    description:
                      "Name of the User suitable for display to end users.",
                  },
                  division: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's division.",
                  },
                  email: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary email address of the user. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  employeeNumber: {
                    type: "string",
                    optional: false,
                    description:
                      "The organization or company assigned unique identifier for the user.",
                  },
                  firstName: {
                    type: "string",
                    optional: true,
                    description: "Given name of the User (givenName).",
                  },
                  honorificPrefix: {
                    type: "string",
                    optional: true,
                    description:
                      "Honorific prefix(es) of the user, or title in most Western languages.",
                  },
                  honorificSuffix: {
                    type: "string",
                    optional: true,
                    description: "Honorific suffix(es) of the User.",
                  },
                  lastName: {
                    type: "string",
                    optional: true,
                    description: "The family name of the User (familyName).",
                  },
                  locale: {
                    type: "string",
                    optional: false,
                    description:
                      "The User's default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is en_US by default.",
                  },
                  login: {
                    type: "string",
                    optional: false,
                    description:
                      "The unique identifier for the User (username). For validation, see Login pattern validation.",
                  },
                  manager: {
                    type: "string",
                    optional: true,
                    description: "The displayName of the User's manager.",
                  },
                  managerId: {
                    type: "string",
                    optional: true,
                    description: "The id of the User's manager.",
                  },
                  middleName: {
                    type: "string",
                    optional: true,
                    description: "The middle name of the user.",
                  },
                  mobilePhone: {
                    type: "string",
                    optional: true,
                    description: "The mobile phone number of the user.",
                  },
                  nickName: {
                    type: "string",
                    optional: true,
                    description:
                      "The casual way to address the User in real life.",
                  },
                  organization: {
                    type: "string",
                    optional: true,
                    description: "Name of the User's organization.",
                  },
                  postalAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "Mailing address component of the User's address.",
                  },
                  preferredLanguage: {
                    type: "string",
                    optional: true,
                    description:
                      "The User's preferred written or spoken language. For validation, see RFC 7231 Section 5.3.5.",
                  },
                  primaryPhone: {
                    type: "string",
                    optional: true,
                    description:
                      "The primary phone number of the User such as a home number.",
                  },
                  profileUrl: {
                    type: "string",
                    optional: true,
                    description:
                      "The URL of the User's online profile. For example, a web page. See URL.",
                  },
                  secondEmail: {
                    type: "string",
                    optional: true,
                    description:
                      "The secondary email address of the User typically used for account recovery. For validation, see RFC 5322 Section 3.2.3.",
                  },
                  state: {
                    type: "string",
                    optional: true,
                    description:
                      "The state or region component of the User's address (region).",
                  },
                  streetAddress: {
                    type: "string",
                    optional: true,
                    description:
                      "The full street address component of the User's address.",
                  },
                  timezone: {
                    type: "string",
                    optional: true,
                    description: "The User's time zone.",
                  },
                  title: {
                    type: "string",
                    optional: true,
                    description: "The User's title, such as Vice President.",
                  },
                  userType: {
                    type: "string",
                    optional: true,
                    description:
                      "The property used to describe the organization-to-user relationship, such as employee or contractor.",
                  },
                  zipCode: {
                    type: "string",
                    optional: true,
                    description:
                      "The ZIP code or postal code component of the User's address (postalCode).",
                  },
                },
                description:
                  "Specifies the default and custom profile properties for a user.",
              },
              realmId: {
                type: "string",
                optional: true,
                description:
                  "The ID of the Realm in which the User is residing.",
              },
              status: {
                type: "string",
                optional: true,
                description: "The current status of the user.",
              },
              statusChanged: {
                type: "string",
                optional: true,
                description:
                  "The timestamp when the status of the User last changed.",
              },
              transitioningToStatus: {
                type: "string",
                optional: true,
                description:
                  "The target status of an in-progress asynchronous status transition.",
              },
              type: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                    description: "The ID of the User type.",
                  },
                },
                description:
                  "The User type that determines the schema for the User's profile.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources related to the User.",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resetFactors: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  expirePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  forgotPassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changeRecoveryQuestion: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  reactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  changePassword: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  schema: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  suspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unsuspend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  unlock: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  type: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
                description: "Link relations for the user.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deleteUserOpenAPI",
      description:
        "Deletes a User permanently. This operation can only be performed on Users that have a DEPROVISIONED status. This action can't be recovered. If the User is not deactivated, the delete operation will deactivate the User first. A second delete operation is required to delete the User permanently. You can also perform user deletion asynchronously by passing the HTTP header Prefer: respond-async.",
      jsDoc:
        "\n/** \n*@method deleteUserOpenAPI \n*@desc This is an openAPI method. Deletes a User permanently. This operation can only be performed on Users that have a DEPROVISIONED status. This action can't be recovered. If the User is not deactivated, the delete operation will deactivate the User first. A second delete operation is required to delete the User permanently. You can also perform user deletion asynchronously by passing the HTTP header Prefer: respond-async. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.sendEmail \n * @param {string} parameters.Prefer \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            sendEmail: {
              type: "boolean",
              optional: true,
            },
            Prefer: {
              type: "string",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllUserAppLinks",
      description:
        "Lists all application links for all direct or indirect (via group membership) assigned applications for a specified user.",
      jsDoc:
        "\n/** \n*@method listAllUserAppLinks \n*@desc This is an openAPI method. Lists all application links for all direct or indirect (via group membership) assigned applications for a specified user. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              appAssignmentId: {
                type: "string",
                optional: false,
                description: "Unique identifier for the app assignment",
              },
              appInstanceId: {
                type: "string",
                optional: false,
                description: "Unique identifier for the app instance",
              },
              appName: {
                type: "string",
                optional: false,
                description: "Name of the application",
              },
              credentialsSetup: {
                type: "boolean",
                optional: false,
                description: "Indicates if credentials are set up",
              },
              hidden: {
                type: "boolean",
                optional: false,
                description: "Indicates if the app link is hidden",
              },
              id: {
                type: "string",
                optional: false,
                description: "Unique identifier for the app link",
              },
              label: {
                type: "string",
                optional: false,
                description: "Label of the app link",
              },
              linkUrl: {
                type: "string",
                optional: false,
                description: "URL of the application link",
              },
              logoUrl: {
                type: "string",
                optional: false,
                description: "URL of the application's logo",
              },
              sortOrder: {
                type: "integer",
                optional: false,
                description: "Sort order of the app link",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllUserBlocks",
      description:
        "Lists information about how the user is blocked from accessing their account.",
      jsDoc:
        "\n/** \n*@method listAllUserBlocks \n*@desc This is an openAPI method. Lists information about how the user is blocked from accessing their account. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              type: {
                type: "string",
                optional: false,
                description: "The type of block",
              },
              appliesTo: {
                type: "string",
                optional: false,
                description: "The scope of the block",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllUserGroups",
      description: "Lists all groups of which the specified user is a member.",
      jsDoc:
        "\n/** \n*@method listAllUserGroups \n*@desc This is an openAPI method. Lists all groups of which the specified user is a member. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.after \n * @param {integer} parameters.limit \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            after: {
              type: "string",
              optional: true,
            },
            limit: {
              type: "integer",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the group was created",
              },
              id: {
                type: "string",
                optional: false,
                description: "ID of the group",
              },
              lastMembershipUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the last membership was updated",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the group was last updated",
              },
              objectClass: {
                type: "array",
                items: {
                  type: "string",
                },
                description: "Object classes associated with the group",
              },
              profile: {
                type: "object",
                schema: {
                  description: {
                    type: "string",
                    optional: true,
                    description: "Description of the group",
                  },
                  name: {
                    type: "string",
                    optional: false,
                    description: "Name of the group",
                  },
                },
              },
              type: {
                type: "string",
                optional: false,
                description: "Type of the group",
              },
              _embedded: {
                type: "object",
                schema: {},
                description:
                  "Additional properties embedded in the group object",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      hints: {
                        type: "object",
                        schema: {
                          allow: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      href: {
                        type: "string",
                        optional: false,
                        description: "URL to the group resource",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Name of the link",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description: "Indicates if the link is templated",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description: "Type of the link",
                      },
                    },
                  },
                  apps: {
                    type: "object",
                    schema: {
                      hints: {
                        type: "object",
                        schema: {
                          allow: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      href: {
                        type: "string",
                        optional: true,
                        description: "URL to the group's apps",
                      },
                    },
                  },
                  logo: {
                    type: "array",
                    items: {
                      type: "object",
                      schema: {
                        hints: {
                          type: "object",
                          schema: {
                            allow: {
                              type: "array",
                              items: {
                                type: "string",
                              },
                            },
                          },
                        },
                        href: {
                          type: "string",
                          optional: true,
                          description: "URL to the group's logo",
                        },
                      },
                    },
                  },
                  source: {
                    type: "object",
                    schema: {
                      hints: {
                        type: "object",
                        schema: {
                          allow: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      href: {
                        type: "string",
                        optional: true,
                        description: "URL to the group's source",
                      },
                    },
                  },
                  users: {
                    type: "object",
                    schema: {
                      hints: {
                        type: "object",
                        schema: {
                          allow: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                          },
                        },
                      },
                      href: {
                        type: "string",
                        optional: true,
                        description: "URL to the group's users",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "updateUserPassword",
      description:
        "Updates a User's password by validating the User's current password. This operation provides an option to delete all sessions of the specified User. Note that if the request is made in the context of a session owned by the specified User, that session isn't cleared. The User must be in STAGED, ACTIVE, PASSWORD_EXPIRED, or RECOVERY status with a valid password credential. The User transitions to ACTIVE status when successfully invoked in RECOVERY status.",
      jsDoc:
        "\n/** \n*@method updateUserPassword \n*@desc This is an openAPI method. Updates a User's password by validating the User's current password. This operation provides an option to delete all sessions of the specified User. Note that if the request is made in the context of a session owned by the specified User, that session isn't cleared. The User must be in STAGED, ACTIVE, PASSWORD_EXPIRED, or RECOVERY status with a valid password credential. The User transitions to ACTIVE status when successfully invoked in RECOVERY status. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.strict \n * @param {object} parameters.newPassword - Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.\n * @param {object} parameters.newPassword.hash - The hash details of the password. Only applicable when password hashing is used.\n * @param {string} parameters.newPassword.hash.algorithm - The algorithm used to generate the hash.\n * @param {string} parameters.newPassword.hash.digestAlgorithm - The digest algorithm used for PBKDF2 hashing.\n * @param {integer} parameters.newPassword.hash.iterationCount - Number of iterations used in PBKDF2 hashing.\n * @param {integer} parameters.newPassword.hash.keySize - Size of the derived key in bytes for PBKDF2.\n * @param {string} parameters.newPassword.hash.salt - Base64-encoded salt used to generate the hash.\n * @param {string} parameters.newPassword.hash.saltOrder - Order in which salt is applied to the password before hashing.\n * @param {string} parameters.newPassword.hash.value - Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.\n * @param {integer} parameters.newPassword.hash.workFactor - Strength of the hash for BCRYPT algorithm.\n * @param {object} parameters.newPassword.hook - Details of the password hook used for managing passwords.\n * @param {string} parameters.newPassword.hook.type - The type of password inline hook. Currently, must be set to default.\n * @param {string} parameters.newPassword.value - The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.\n * @param {object} parameters.oldPassword - Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.\n * @param {object} parameters.oldPassword.hash - The hash details of the password. Only applicable when password hashing is used.\n * @param {string} parameters.oldPassword.hash.algorithm - The algorithm used to generate the hash.\n * @param {string} parameters.oldPassword.hash.digestAlgorithm - The digest algorithm used for PBKDF2 hashing.\n * @param {integer} parameters.oldPassword.hash.iterationCount - Number of iterations used in PBKDF2 hashing.\n * @param {integer} parameters.oldPassword.hash.keySize - Size of the derived key in bytes for PBKDF2.\n * @param {string} parameters.oldPassword.hash.salt - Base64-encoded salt used to generate the hash.\n * @param {string} parameters.oldPassword.hash.saltOrder - Order in which salt is applied to the password before hashing.\n * @param {string} parameters.oldPassword.hash.value - Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.\n * @param {integer} parameters.oldPassword.hash.workFactor - Strength of the hash for BCRYPT algorithm.\n * @param {object} parameters.oldPassword.hook - Details of the password hook used for managing passwords.\n * @param {string} parameters.oldPassword.hook.type - The type of password inline hook. Currently, must be set to default.\n * @param {string} parameters.oldPassword.value - The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.\n * @param {boolean} parameters.revokeSessions - When set to true, revokes all User sessions, except for the current session.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            strict: {
              type: "boolean",
              optional: true,
            },
            newPassword: {
              type: "object",
              schema: {
                hash: {
                  type: "object",
                  schema: {
                    algorithm: {
                      type: "string",
                      optional: true,
                      description: "The algorithm used to generate the hash.",
                    },
                    digestAlgorithm: {
                      type: "string",
                      optional: true,
                      description:
                        "The digest algorithm used for PBKDF2 hashing.",
                    },
                    iterationCount: {
                      type: "integer",
                      optional: true,
                      description:
                        "Number of iterations used in PBKDF2 hashing.",
                    },
                    keySize: {
                      type: "integer",
                      optional: true,
                      description:
                        "Size of the derived key in bytes for PBKDF2.",
                    },
                    salt: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded salt used to generate the hash.",
                    },
                    saltOrder: {
                      type: "string",
                      optional: true,
                      description:
                        "Order in which salt is applied to the password before hashing.",
                    },
                    value: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                    },
                    workFactor: {
                      type: "integer",
                      optional: true,
                      description: "Strength of the hash for BCRYPT algorithm.",
                    },
                  },
                  description:
                    "The hash details of the password. Only applicable when password hashing is used.",
                },
                hook: {
                  type: "object",
                  schema: {
                    type: {
                      type: "string",
                      optional: true,
                      description:
                        "The type of password inline hook. Currently, must be set to default.",
                    },
                  },
                  description:
                    "Details of the password hook used for managing passwords.",
                },
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                },
              },
              description:
                "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
            },
            oldPassword: {
              type: "object",
              schema: {
                hash: {
                  type: "object",
                  schema: {
                    algorithm: {
                      type: "string",
                      optional: true,
                      description: "The algorithm used to generate the hash.",
                    },
                    digestAlgorithm: {
                      type: "string",
                      optional: true,
                      description:
                        "The digest algorithm used for PBKDF2 hashing.",
                    },
                    iterationCount: {
                      type: "integer",
                      optional: true,
                      description:
                        "Number of iterations used in PBKDF2 hashing.",
                    },
                    keySize: {
                      type: "integer",
                      optional: true,
                      description:
                        "Size of the derived key in bytes for PBKDF2.",
                    },
                    salt: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded salt used to generate the hash.",
                    },
                    saltOrder: {
                      type: "string",
                      optional: true,
                      description:
                        "Order in which salt is applied to the password before hashing.",
                    },
                    value: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                    },
                    workFactor: {
                      type: "integer",
                      optional: true,
                      description: "Strength of the hash for BCRYPT algorithm.",
                    },
                  },
                  description:
                    "The hash details of the password. Only applicable when password hashing is used.",
                },
                hook: {
                  type: "object",
                  schema: {
                    type: {
                      type: "string",
                      optional: true,
                      description:
                        "The type of password inline hook. Currently, must be set to default.",
                    },
                  },
                  description:
                    "Details of the password hook used for managing passwords.",
                },
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                },
              },
              description:
                "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
            },
            revokeSessions: {
              type: "boolean",
              optional: true,
              description:
                "When set to true, revokes all User sessions, except for the current session.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              password: {
                type: "object",
                schema: {
                  hash: {
                    type: "object",
                    schema: {
                      algorithm: {
                        type: "string",
                        optional: true,
                        description: "The algorithm used to generate the hash.",
                      },
                      digestAlgorithm: {
                        type: "string",
                        optional: true,
                        description:
                          "The digest algorithm used for PBKDF2 hashing.",
                      },
                      iterationCount: {
                        type: "integer",
                        optional: true,
                        description:
                          "Number of iterations used in PBKDF2 hashing.",
                      },
                      keySize: {
                        type: "integer",
                        optional: true,
                        description:
                          "Size of the derived key in bytes for PBKDF2.",
                      },
                      salt: {
                        type: "string",
                        optional: true,
                        description:
                          "Base64-encoded salt used to generate the hash.",
                      },
                      saltOrder: {
                        type: "string",
                        optional: true,
                        description:
                          "Order in which salt is applied to the password before hashing.",
                      },
                      value: {
                        type: "string",
                        optional: true,
                        description:
                          "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                      },
                      workFactor: {
                        type: "integer",
                        optional: true,
                        description:
                          "Strength of the hash for BCRYPT algorithm.",
                      },
                    },
                    description:
                      "The hash details of the password. Only applicable when password hashing is used.",
                  },
                  hook: {
                    type: "object",
                    schema: {
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The type of password inline hook. Currently, must be set to default.",
                      },
                    },
                    description:
                      "Details of the password hook used for managing passwords.",
                  },
                  value: {
                    type: "string",
                    optional: true,
                    description:
                      "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                  },
                },
                description:
                  "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
              },
              provider: {
                type: "object",
                schema: {
                  name: {
                    type: "string",
                    optional: true,
                    description: "The name of the authentication provider.",
                  },
                  type: {
                    type: "string",
                    optional: true,
                    description:
                      "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                  },
                },
                description:
                  "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
              },
              recovery_question: {
                type: "object",
                schema: {
                  question: {
                    type: "string",
                    optional: true,
                    description:
                      "The recovery question. Must be between 1 and 100 characters long.",
                  },
                },
                description:
                  "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "updateRecoveryQuestion",
      description:
        "Updates a User's Recovery Question and answer credential by validating the User's current Password.",
      jsDoc:
        "\n/** \n*@method updateRecoveryQuestion \n*@desc This is an openAPI method. Updates a User's Recovery Question and answer credential by validating the User's current Password. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {object} parameters.password - Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.\n * @param {object} parameters.password.hash - The hash details of the password. Only applicable when password hashing is used.\n * @param {string} parameters.password.hash.algorithm - The algorithm used to generate the hash.\n * @param {string} parameters.password.hash.digestAlgorithm - The digest algorithm used for PBKDF2 hashing.\n * @param {integer} parameters.password.hash.iterationCount - Number of iterations used in PBKDF2 hashing.\n * @param {integer} parameters.password.hash.keySize - Size of the derived key in bytes for PBKDF2.\n * @param {string} parameters.password.hash.salt - Base64-encoded salt used to generate the hash.\n * @param {string} parameters.password.hash.saltOrder - Order in which salt is applied to the password before hashing.\n * @param {string} parameters.password.hash.value - Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.\n * @param {integer} parameters.password.hash.workFactor - Strength of the hash for BCRYPT algorithm.\n * @param {object} parameters.password.hook - Details of the password hook used for managing passwords.\n * @param {string} parameters.password.hook.type - The type of password inline hook. Currently, must be set to default.\n * @param {string} parameters.password.value - The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.\n * @param {object} parameters.provider - Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.\n * @param {string} parameters.provider.name - The name of the authentication provider.\n * @param {string} parameters.provider.type - The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n * @param {object} parameters.recovery_question - Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.\n * @param {string} parameters.recovery_question.question - The recovery question. Must be between 1 and 100 characters long.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            password: {
              type: "object",
              schema: {
                hash: {
                  type: "object",
                  schema: {
                    algorithm: {
                      type: "string",
                      optional: true,
                      description: "The algorithm used to generate the hash.",
                    },
                    digestAlgorithm: {
                      type: "string",
                      optional: true,
                      description:
                        "The digest algorithm used for PBKDF2 hashing.",
                    },
                    iterationCount: {
                      type: "integer",
                      optional: true,
                      description:
                        "Number of iterations used in PBKDF2 hashing.",
                    },
                    keySize: {
                      type: "integer",
                      optional: true,
                      description:
                        "Size of the derived key in bytes for PBKDF2.",
                    },
                    salt: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded salt used to generate the hash.",
                    },
                    saltOrder: {
                      type: "string",
                      optional: true,
                      description:
                        "Order in which salt is applied to the password before hashing.",
                    },
                    value: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                    },
                    workFactor: {
                      type: "integer",
                      optional: true,
                      description: "Strength of the hash for BCRYPT algorithm.",
                    },
                  },
                  description:
                    "The hash details of the password. Only applicable when password hashing is used.",
                },
                hook: {
                  type: "object",
                  schema: {
                    type: {
                      type: "string",
                      optional: true,
                      description:
                        "The type of password inline hook. Currently, must be set to default.",
                    },
                  },
                  description:
                    "Details of the password hook used for managing passwords.",
                },
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                },
              },
              description:
                "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
            },
            provider: {
              type: "object",
              schema: {
                name: {
                  type: "string",
                  optional: true,
                  description: "The name of the authentication provider.",
                },
                type: {
                  type: "string",
                  optional: true,
                  description:
                    "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                },
              },
              description:
                "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
            },
            recovery_question: {
              type: "object",
              schema: {
                question: {
                  type: "string",
                  optional: true,
                  description:
                    "The recovery question. Must be between 1 and 100 characters long.",
                },
              },
              description:
                "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              password: {
                type: "object",
                schema: {
                  hash: {
                    type: "object",
                    schema: {
                      algorithm: {
                        type: "string",
                        optional: true,
                        description: "The algorithm used to generate the hash.",
                      },
                      digestAlgorithm: {
                        type: "string",
                        optional: true,
                        description:
                          "The digest algorithm used for PBKDF2 hashing.",
                      },
                      iterationCount: {
                        type: "integer",
                        optional: true,
                        description:
                          "Number of iterations used in PBKDF2 hashing.",
                      },
                      keySize: {
                        type: "integer",
                        optional: true,
                        description:
                          "Size of the derived key in bytes for PBKDF2.",
                      },
                      salt: {
                        type: "string",
                        optional: true,
                        description:
                          "Base64-encoded salt used to generate the hash.",
                      },
                      saltOrder: {
                        type: "string",
                        optional: true,
                        description:
                          "Order in which salt is applied to the password before hashing.",
                      },
                      value: {
                        type: "string",
                        optional: true,
                        description:
                          "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                      },
                      workFactor: {
                        type: "integer",
                        optional: true,
                        description:
                          "Strength of the hash for BCRYPT algorithm.",
                      },
                    },
                    description:
                      "The hash details of the password. Only applicable when password hashing is used.",
                  },
                  hook: {
                    type: "object",
                    schema: {
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The type of password inline hook. Currently, must be set to default.",
                      },
                    },
                    description:
                      "Details of the password hook used for managing passwords.",
                  },
                  value: {
                    type: "string",
                    optional: true,
                    description:
                      "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                  },
                },
                description:
                  "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
              },
              provider: {
                type: "object",
                schema: {
                  name: {
                    type: "string",
                    optional: true,
                    description: "The name of the authentication provider.",
                  },
                  type: {
                    type: "string",
                    optional: true,
                    description:
                      "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                  },
                },
                description:
                  "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
              },
              recovery_question: {
                type: "object",
                schema: {
                  question: {
                    type: "string",
                    optional: true,
                    description:
                      "The recovery question. Must be between 1 and 100 characters long.",
                  },
                },
                description:
                  "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "startForgotPasswordFlow",
      description:
        "Starts the forgot password flow. Generates a one-time token (OTT) that you can use to reset a User's Password. The User must validate their security question's answer when visiting the reset link. This operation can only be performed on Users with an ACTIVE status and a valid Recovery Question credential.",
      jsDoc:
        "\n/** \n*@method startForgotPasswordFlow \n*@desc This is an openAPI method. Starts the forgot password flow. Generates a one-time token (OTT) that you can use to reset a User's Password. The User must validate their security question's answer when visiting the reset link. This operation can only be performed on Users with an ACTIVE status and a valid Recovery Question credential. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.sendEmail \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            sendEmail: {
              type: "boolean",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              resetPasswordUrl: {
                type: "string",
                optional: true,
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "resetPasswordWithRecoveryQuestion",
      description:
        "Resets the User's password to the specified password if the provided answer to the recovery question is correct. You must include the Recovery Question answer with the submission.",
      jsDoc:
        "\n/** \n*@method resetPasswordWithRecoveryQuestion \n*@desc This is an openAPI method. Resets the User's password to the specified password if the provided answer to the recovery question is correct. You must include the Recovery Question answer with the submission. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.sendEmail \n * @param {object} parameters.password - Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.\n * @param {object} parameters.password.hash - The hash details of the password. Only applicable when password hashing is used.\n * @param {string} parameters.password.hash.algorithm - The algorithm used to generate the hash.\n * @param {string} parameters.password.hash.digestAlgorithm - The digest algorithm used for PBKDF2 hashing.\n * @param {integer} parameters.password.hash.iterationCount - Number of iterations used in PBKDF2 hashing.\n * @param {integer} parameters.password.hash.keySize - Size of the derived key in bytes for PBKDF2.\n * @param {string} parameters.password.hash.salt - Base64-encoded salt used to generate the hash.\n * @param {string} parameters.password.hash.saltOrder - Order in which salt is applied to the password before hashing.\n * @param {string} parameters.password.hash.value - Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.\n * @param {integer} parameters.password.hash.workFactor - Strength of the hash for BCRYPT algorithm.\n * @param {object} parameters.password.hook - Details of the password hook used for managing passwords.\n * @param {string} parameters.password.hook.type - The type of password inline hook. Currently, must be set to default.\n * @param {string} parameters.password.value - The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.\n * @param {object} parameters.provider - Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.\n * @param {string} parameters.provider.name - The name of the authentication provider.\n * @param {string} parameters.provider.type - The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n * @param {object} parameters.recovery_question - Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.\n * @param {string} parameters.recovery_question.question - The recovery question. Must be between 1 and 100 characters long.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            sendEmail: {
              type: "boolean",
              optional: true,
            },
            password: {
              type: "object",
              schema: {
                hash: {
                  type: "object",
                  schema: {
                    algorithm: {
                      type: "string",
                      optional: true,
                      description: "The algorithm used to generate the hash.",
                    },
                    digestAlgorithm: {
                      type: "string",
                      optional: true,
                      description:
                        "The digest algorithm used for PBKDF2 hashing.",
                    },
                    iterationCount: {
                      type: "integer",
                      optional: true,
                      description:
                        "Number of iterations used in PBKDF2 hashing.",
                    },
                    keySize: {
                      type: "integer",
                      optional: true,
                      description:
                        "Size of the derived key in bytes for PBKDF2.",
                    },
                    salt: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded salt used to generate the hash.",
                    },
                    saltOrder: {
                      type: "string",
                      optional: true,
                      description:
                        "Order in which salt is applied to the password before hashing.",
                    },
                    value: {
                      type: "string",
                      optional: true,
                      description:
                        "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                    },
                    workFactor: {
                      type: "integer",
                      optional: true,
                      description: "Strength of the hash for BCRYPT algorithm.",
                    },
                  },
                  description:
                    "The hash details of the password. Only applicable when password hashing is used.",
                },
                hook: {
                  type: "object",
                  schema: {
                    type: {
                      type: "string",
                      optional: true,
                      description:
                        "The type of password inline hook. Currently, must be set to default.",
                    },
                  },
                  description:
                    "Details of the password hook used for managing passwords.",
                },
                value: {
                  type: "string",
                  optional: true,
                  description:
                    "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                },
              },
              description:
                "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
            },
            provider: {
              type: "object",
              schema: {
                name: {
                  type: "string",
                  optional: true,
                  description: "The name of the authentication provider.",
                },
                type: {
                  type: "string",
                  optional: true,
                  description:
                    "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                },
              },
              description:
                "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
            },
            recovery_question: {
              type: "object",
              schema: {
                question: {
                  type: "string",
                  optional: true,
                  description:
                    "The recovery question. Must be between 1 and 100 characters long.",
                },
              },
              description:
                "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              password: {
                type: "object",
                schema: {
                  hash: {
                    type: "object",
                    schema: {
                      algorithm: {
                        type: "string",
                        optional: true,
                        description: "The algorithm used to generate the hash.",
                      },
                      digestAlgorithm: {
                        type: "string",
                        optional: true,
                        description:
                          "The digest algorithm used for PBKDF2 hashing.",
                      },
                      iterationCount: {
                        type: "integer",
                        optional: true,
                        description:
                          "Number of iterations used in PBKDF2 hashing.",
                      },
                      keySize: {
                        type: "integer",
                        optional: true,
                        description:
                          "Size of the derived key in bytes for PBKDF2.",
                      },
                      salt: {
                        type: "string",
                        optional: true,
                        description:
                          "Base64-encoded salt used to generate the hash.",
                      },
                      saltOrder: {
                        type: "string",
                        optional: true,
                        description:
                          "Order in which salt is applied to the password before hashing.",
                      },
                      value: {
                        type: "string",
                        optional: true,
                        description:
                          "Base64-encoded hash value of the password or Radix-64 encoded hash for BCRYPT.",
                      },
                      workFactor: {
                        type: "integer",
                        optional: true,
                        description:
                          "Strength of the hash for BCRYPT algorithm.",
                      },
                    },
                    description:
                      "The hash details of the password. Only applicable when password hashing is used.",
                  },
                  hook: {
                    type: "object",
                    schema: {
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The type of password inline hook. Currently, must be set to default.",
                      },
                    },
                    description:
                      "Details of the password hook used for managing passwords.",
                  },
                  value: {
                    type: "string",
                    optional: true,
                    description:
                      "The password value for the user. This property is omitted when the password is already valid or managed through other means like imported hashed passwords or hooks.",
                  },
                },
                description:
                  "Specifies a password for a user. When a User has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, password: {}). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator: Security > Authenticators > Password (or for Okta Classic orgs, use Security > Authentication > Password). For information on defaults and configuring your password policies, see Configure the password authenticator in the help documentation.",
              },
              provider: {
                type: "object",
                schema: {
                  name: {
                    type: "string",
                    optional: true,
                    description: "The name of the authentication provider.",
                  },
                  type: {
                    type: "string",
                    optional: true,
                    description:
                      "The type of authentication provider. The following values are supported:\n\n- ACTIVE_DIRECTORY: Specifies the directory instance name as the name property.\n- FEDERATION: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.\n- IMPORT: Specifies a hashed password that was imported from an external source.\n- LDAP: Specifies the directory instance name as the name property.\n- OKTA: Specifies the Okta Identity Provider.\n- SOCIAL: Doesn't support a password or recovery question credential and must authenticate through a trusted Identity Provider.",
                  },
                },
                description:
                  "Specifies the authentication provider that validates the User's password credential. The User's current provider is managed by the Delegated Authentication settings for your organization. The provider object is read-only.",
              },
              recovery_question: {
                type: "object",
                schema: {
                  question: {
                    type: "string",
                    optional: true,
                    description:
                      "The recovery question. Must be between 1 and 100 characters long.",
                  },
                },
                description:
                  "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "expirePassword",
      description:
        "Expires the password. This operation transitions the User status to PASSWORD_EXPIRED so that the User must change their password the next time that they sign in. If you have integrated Okta with your on-premises Active Directory (AD), then setting a User's Password as expired in Okta also expires the Password in AD. When the User tries to sign in to Okta, delegated authentication finds the password-expired status in AD, and the User is presented with the password-expired page where they can change their Password.",
      jsDoc:
        "\n/** \n*@method expirePassword \n*@desc This is an openAPI method. Expires the password. This operation transitions the User status to PASSWORD_EXPIRED so that the User must change their password the next time that they sign in. If you have integrated Okta with your on-premises Active Directory (AD), then setting a User's Password as expired in Okta also expires the Password in AD. When the User tries to sign in to Okta, delegated authentication finds the password-expired status in AD, and the User is presented with the password-expired page where they can change their Password. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "expirePasswordWithTemporaryPassword",
      description:
        "Expires the password and resets the User's Password to a temporary password. This operation transitions the User status to PASSWORD_EXPIRED so that the User must change their password the next time that they sign in. User's Password is reset to a temporary password that is returned, and then the User's Password is expired. If revokeSessions is included in the request with a value of true, the User's current outstanding sessions are revoked and require re-authentication. If you have integrated Okta with your on-premises Active Directory (AD), then setting a User's Password as expired in Okta also expires the Password in AD. When the User tries to sign in to Okta, delegated authentication finds the password-expired status in AD, and the User is presented with the password-expired page where they can change their Password.",
      jsDoc:
        "\n/** \n*@method expirePasswordWithTemporaryPassword \n*@desc This is an openAPI method. Expires the password and resets the User's Password to a temporary password. This operation transitions the User status to PASSWORD_EXPIRED so that the User must change their password the next time that they sign in. User's Password is reset to a temporary password that is returned, and then the User's Password is expired. If revokeSessions is included in the request with a value of true, the User's current outstanding sessions are revoked and require re-authentication. If you have integrated Okta with your on-premises Active Directory (AD), then setting a User's Password as expired in Okta also expires the Password in AD. When the User tries to sign in to Okta, delegated authentication finds the password-expired status in AD, and the User is presented with the password-expired page where they can change their Password. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.revokeSessions \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            revokeSessions: {
              type: "boolean",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "resetPassword",
      description:
        "Resets password. Generates a one-time token (OTT) that you can use to reset a User's password. You can automatically email the OTT link to the User or return the OTT to the API caller and distribute using a custom flow. This operation transitions the User to the RECOVERY status. The User is then not able to sign in or initiate a forgot password flow until they complete the reset flow. This operation provides an option to delete all the User's sessions. However, if the request is made in the context of a session owned by the specified User, that session isn't cleared. Note: You can also use this API to convert a User with the Okta Credential Provider to use a Federated Provider. After this conversion, the User can't directly sign in with a password. To convert a federated User back to an Okta User, use the default API call. If an email address is associated with multiple Users, keep in mind the following to ensure a successful password recovery lookup: Okta no longer includes deactivated Users in the lookup. The lookup searches sign-in IDs first, then primary email addresses, and then secondary email addresses. If sendEmail is false, returns a link for the User to reset their password.",
      jsDoc:
        "\n/** \n*@method resetPassword \n*@desc This is an openAPI method. Resets password. Generates a one-time token (OTT) that you can use to reset a User's password. You can automatically email the OTT link to the User or return the OTT to the API caller and distribute using a custom flow. This operation transitions the User to the RECOVERY status. The User is then not able to sign in or initiate a forgot password flow until they complete the reset flow. This operation provides an option to delete all the User's sessions. However, if the request is made in the context of a session owned by the specified User, that session isn't cleared. Note: You can also use this API to convert a User with the Okta Credential Provider to use a Federated Provider. After this conversion, the User can't directly sign in with a password. To convert a federated User back to an Okta User, use the default API call. If an email address is associated with multiple Users, keep in mind the following to ensure a successful password recovery lookup: Okta no longer includes deactivated Users in the lookup. The lookup searches sign-in IDs first, then primary email addresses, and then secondary email addresses. If sendEmail is false, returns a link for the User to reset their password. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.sendEmail \n * @param {boolean} parameters.revokeSessions \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            sendEmail: {
              type: "boolean",
              optional: false,
            },
            revokeSessions: {
              type: "boolean",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              resetPasswordUrl: {
                type: "string",
                optional: true,
                description: "URL for the User to reset their password.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listYubiKeyTokens",
      description: "Lists all YubiKey OTP Tokens.",
      jsDoc:
        "\n/** \n*@method listYubiKeyTokens \n*@desc This is an openAPI method. Lists all YubiKey OTP Tokens. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after \n * @param {string} parameters.expand \n * @param {string} parameters.filter \n * @param {boolean} parameters.forDownload \n * @param {integer} parameters.limit \n * @param {string} parameters.sortBy \n * @param {string} parameters.sortOrder \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
            },
            expand: {
              type: "string",
              optional: true,
            },
            filter: {
              type: "string",
              optional: true,
            },
            forDownload: {
              type: "boolean",
              optional: true,
            },
            limit: {
              type: "integer",
              optional: true,
            },
            sortBy: {
              type: "string",
              optional: true,
            },
            sortOrder: {
              type: "string",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was created.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Token.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was last updated.",
              },
              lastVerified: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was last verified.",
              },
              profile: {
                type: "object",
                schema: {},
                description: "Specified profile information for token.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Token status.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "uploadYubiKeySeed",
      description: "Uploads a seed for a user to enroll a YubiKey OTP.",
      jsDoc:
        "\n/** \n*@method uploadYubiKeySeed \n*@desc This is an openAPI method. Uploads a seed for a user to enroll a YubiKey OTP. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.after \n * @param {string} parameters.expand \n * @param {string} parameters.filter \n * @param {boolean} parameters.forDownload \n * @param {integer} parameters.limit \n * @param {string} parameters.sortBy \n * @param {string} parameters.sortOrder \n * @param {string} parameters.serialNumber - The unique identifier assigned to each YubiKey device.\n * @param {string} parameters.publicId - The Yubikey's public ID.\n * @param {string} parameters.privateId - The Yubikey's private ID.\n * @param {string} parameters.aesKey - The cryptographic key used in the AES algorithm to encrypt and decrypt YubiKey OTP.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            after: {
              type: "string",
              optional: true,
            },
            expand: {
              type: "string",
              optional: true,
            },
            filter: {
              type: "string",
              optional: true,
            },
            forDownload: {
              type: "boolean",
              optional: true,
            },
            limit: {
              type: "integer",
              optional: true,
            },
            sortBy: {
              type: "string",
              optional: true,
            },
            sortOrder: {
              type: "string",
              optional: true,
            },
            serialNumber: {
              type: "string",
              optional: true,
              description:
                "The unique identifier assigned to each YubiKey device.",
            },
            publicId: {
              type: "string",
              optional: true,
              description: "The Yubikey's public ID.",
            },
            privateId: {
              type: "string",
              optional: true,
              description: "The Yubikey's private ID.",
            },
            aesKey: {
              type: "string",
              optional: true,
              description:
                "The cryptographic key used in the AES algorithm to encrypt and decrypt YubiKey OTP.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was created.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Token.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was last updated.",
              },
              lastVerified: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was last verified.",
              },
              profile: {
                type: "object",
                schema: {},
                description: "Specified profile information for token.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Token status.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveYubiKeyOtpToken",
      description: "Retrieves the specified YubiKey OTP Token by ID.",
      jsDoc:
        "\n/** \n*@method retrieveYubiKeyOtpToken \n*@desc This is an openAPI method. Retrieves the specified YubiKey OTP Token by ID. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.tokenId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            tokenId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was created.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Token.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was last updated.",
              },
              lastVerified: {
                type: "string",
                optional: true,
                description: "Timestamp when the Token was last verified.",
              },
              profile: {
                type: "object",
                schema: {},
                description: "Specified profile information for token.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Token status.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllEnrolledFactors",
      description: "Lists all enrolled Factors for the specified user.",
      jsDoc:
        "\n/** \n*@method listAllEnrolledFactors \n*@desc This is an openAPI method. Lists all enrolled Factors for the specified user. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was enrolled.",
              },
              factorType: {
                type: "string",
                optional: true,
                description: "Type of Factor.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Factor.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  phoneExtension: {
                    type: "string",
                    optional: true,
                    description: "Extension of the associated phoneNumber.",
                  },
                  phoneNumber: {
                    type: "string",
                    optional: true,
                    description:
                      "Phone number of the Factor. Format phone numbers to use the E.164 standard.",
                  },
                },
                description: "Specific attributes related to the Factor.",
              },
              provider: {
                type: "string",
                optional: true,
                description: "Provider for the Factor.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status of the Factor.",
              },
              vendorName: {
                type: "string",
                optional: true,
                description:
                  "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "enrollFactor",
      description:
        "Enrolls a supported Factor for the specified user.\n\n**OAuth 2.0:** okta.users.manage\n\n**Note:** All responses return the enrolled Factor with a status of either PENDING_ACTIVATION or ACTIVE.\n\n**Additional SMS/Call Factor Information:**\nRate limits: Okta may return a 429 Too Many Requests status code if you attempt to resend an SMS or a voice call challenge (OTP) within the same time window. The current rate limit is one SMS/CALL challenge per phone number every 30 seconds.\nExisting phone numbers: Okta may return a 400 Bad Request status code if a user attempts to enroll with a different phone number when the user has an existing mobile phone or has an existing phone with voice call capability. A user can enroll only one mobile phone for SMS and enroll only one voice call capable phone for call factor.\n\n**Additional WebAuthn Factor Information:**\nFor detailed information on the WebAuthn standard, including an up-to-date list of supported browsers, see [webauthn.me](https://webauthn.me).\n\nIn the enroll API response, the response._embedded.activation object contains properties used to help the client to create a new WebAuthn credential for use with Okta. See the WebAuthn spec for PublicKeyCredentialCreationOptions.\n\n**Additional Custom TOTP Factor Information:**\nThe enrollment process involves passing both the factorProfileId and sharedSecret properties for a token.\n\nA Factor Profile represents a particular configuration of the Custom TOTP factor. It includes certain properties that match the hardware token that end users possess, such as the HMAC algorithm, passcode length, and time interval. There can be multiple Custom TOTP factor profiles per org, but users can only enroll in one Custom TOTP factor. Admins can create Custom TOTP factor profiles in the Admin Console. Then, copy the factorProfileId from the Admin Console into the API request.\n\nFor Custom TOTP enrollment, Okta automatically enrolls a user with a token:software:totp factor and the push factor if the user isn't currently enrolled with these factors.",
      jsDoc:
        "\n/** \n*@method enrollFactor \n*@desc This is an openAPI method. Enrolls a supported Factor for the specified user.\n\n**OAuth 2.0:** okta.users.manage\n\n**Note:** All responses return the enrolled Factor with a status of either PENDING_ACTIVATION or ACTIVE.\n\n**Additional SMS/Call Factor Information:**\nRate limits: Okta may return a 429 Too Many Requests status code if you attempt to resend an SMS or a voice call challenge (OTP) within the same time window. The current rate limit is one SMS/CALL challenge per phone number every 30 seconds.\nExisting phone numbers: Okta may return a 400 Bad Request status code if a user attempts to enroll with a different phone number when the user has an existing mobile phone or has an existing phone with voice call capability. A user can enroll only one mobile phone for SMS and enroll only one voice call capable phone for call factor.\n\n**Additional WebAuthn Factor Information:**\nFor detailed information on the WebAuthn standard, including an up-to-date list of supported browsers, see [webauthn.me](https://webauthn.me).\n\nIn the enroll API response, the response._embedded.activation object contains properties used to help the client to create a new WebAuthn credential for use with Okta. See the WebAuthn spec for PublicKeyCredentialCreationOptions.\n\n**Additional Custom TOTP Factor Information:**\nThe enrollment process involves passing both the factorProfileId and sharedSecret properties for a token.\n\nA Factor Profile represents a particular configuration of the Custom TOTP factor. It includes certain properties that match the hardware token that end users possess, such as the HMAC algorithm, passcode length, and time interval. There can be multiple Custom TOTP factor profiles per org, but users can only enroll in one Custom TOTP factor. Admins can create Custom TOTP factor profiles in the Admin Console. Then, copy the factorProfileId from the Admin Console into the API request.\n\nFor Custom TOTP enrollment, Okta automatically enrolls a user with a token:software:totp factor and the push factor if the user isn't currently enrolled with these factors. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId - ID of an existing Okta user.\n * @param {boolean} parameters.updatePhone - If true, indicates that you are replacing the currently registered phone number for the specified user. This parameter is ignored if the existing phone number is used by an activated Factor.\n * @param {string} parameters.templateId - ID of an existing custom SMS template. This parameter is only used by SMS Factors. If the provided ID doesn't exist, the default template is used instead.\n * @param {integer} parameters.tokenLifetimeSeconds - Defines how long the token remains valid. Must be between 1 and 86400 seconds.\n * @param {boolean} parameters.activate - If true, the factor is immediately activated as part of the enrollment. An activation process isn't required. Currently auto-activation is supported by SMS, call, email, and token:hotp (Custom TOTP) factors.\n * @param {string} parameters.Accept-Language - An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by SMS Factors. If a localized message doesn't exist or the templateId is incorrect, the default template is used instead.\n * @param {string} parameters.factorType - Type of Factor. Possible values include 'call', 'sms', 'token:hotp', 'token:software:totp', 'web', 'webauthn'.\n * @param {object} parameters.profile - Specific attributes related to the Factor.\n * @param {string} parameters.profile.phoneExtension - Extension of the associated phone number. Up to 15 characters.\n * @param {string} parameters.profile.phoneNumber - Phone number of the Factor. Format phone numbers to use the E.164 standard.\n * @param {string} parameters.provider - Provider for the Factor. Possible values include 'OKTA', 'CUSTOM', 'DUO', 'FIDO', 'GOOGLE', 'RSA', 'SYMANTEC', 'YUBICO'.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
              description: "ID of an existing Okta user.",
            },
            updatePhone: {
              type: "boolean",
              optional: true,
              description:
                "If true, indicates that you are replacing the currently registered phone number for the specified user. This parameter is ignored if the existing phone number is used by an activated Factor.",
            },
            templateId: {
              type: "string",
              optional: true,
              description:
                "ID of an existing custom SMS template. This parameter is only used by SMS Factors. If the provided ID doesn't exist, the default template is used instead.",
            },
            tokenLifetimeSeconds: {
              type: "integer",
              optional: true,
              description:
                "Defines how long the token remains valid. Must be between 1 and 86400 seconds.",
            },
            activate: {
              type: "boolean",
              optional: true,
              description:
                "If true, the factor is immediately activated as part of the enrollment. An activation process isn't required. Currently auto-activation is supported by SMS, call, email, and token:hotp (Custom TOTP) factors.",
            },
            '"Accept-Language"': {
              type: "string",
              optional: true,
              description:
                "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by SMS Factors. If a localized message doesn't exist or the templateId is incorrect, the default template is used instead.",
            },
            factorType: {
              type: "string",
              optional: true,
              description:
                "Type of Factor. Possible values include 'call', 'sms', 'token:hotp', 'token:software:totp', 'web', 'webauthn'.",
            },
            profile: {
              type: "object",
              schema: {
                phoneExtension: {
                  type: "string",
                  optional: true,
                  description:
                    "Extension of the associated phone number. Up to 15 characters.",
                },
                phoneNumber: {
                  type: "string",
                  optional: true,
                  description:
                    "Phone number of the Factor. Format phone numbers to use the E.164 standard.",
                },
              },
              description: "Specific attributes related to the Factor.",
            },
            provider: {
              type: "string",
              optional: true,
              description:
                "Provider for the Factor. Possible values include 'OKTA', 'CUSTOM', 'DUO', 'FIDO', 'GOOGLE', 'RSA', 'SYMANTEC', 'YUBICO'.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was enrolled.",
              },
              factorType: {
                type: "string",
                optional: true,
                description: "Type of Factor.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Factor.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  phoneExtension: {
                    type: "string",
                    optional: true,
                    description: "Extension of the associated phoneNumber.",
                  },
                  phoneNumber: {
                    type: "string",
                    optional: true,
                    description:
                      "Phone number of the Factor. Format phone numbers to use the E.164 standard.",
                  },
                },
                description: "Specific attributes related to the Factor.",
              },
              provider: {
                type: "string",
                optional: true,
                description: "Provider for the Factor.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status of the Factor.",
              },
              vendorName: {
                type: "string",
                optional: true,
                description:
                  "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listFactors",
      description:
        "Lists all the supported Factors that can be enrolled for the specified user.",
      jsDoc:
        "\n/** \n*@method listFactors \n*@desc This is an openAPI method. Lists all the supported Factors that can be enrolled for the specified user. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              enrollment: {
                type: "string",
                optional: true,
                description:
                  "Indicates if the Factor is required for the specified user.",
              },
              factorType: {
                type: "string",
                optional: true,
                description: "Type of Factor",
              },
              provider: {
                type: "string",
                optional: true,
                description: "Provider for the Factor",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status of the Factor",
              },
              vendorName: {
                type: "string",
                optional: true,
                description:
                  "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
              },
              _embedded: {
                type: "object",
                schema: {},
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listSupportedSecurityquestions",
      description:
        "Lists all available Security Questions for the specified user.",
      jsDoc:
        "\n/** \n*@method listSupportedSecurityquestions \n*@desc This is an openAPI method. Lists all available Security Questions for the specified user. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              question: {
                type: "string",
                optional: true,
                description: "Unique key for the question",
              },
              questionText: {
                type: "string",
                optional: true,
                description: "Human-readable text that's displayed to the user",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveFactor",
      description: "Retrieves an existing Factor for the specified user.",
      jsDoc:
        "\n/** \n*@method retrieveFactor \n*@desc This is an openAPI method. Retrieves an existing Factor for the specified user. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.factorId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            factorId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was enrolled.",
              },
              factorType: {
                type: "string",
                optional: true,
                description: "Type of Factor.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Factor.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  phoneExtension: {
                    type: "string",
                    optional: true,
                    description: "Extension of the associated phoneNumber.",
                  },
                  phoneNumber: {
                    type: "string",
                    optional: true,
                    description:
                      "Phone number of the Factor. Format phone numbers to use the E.164 standard.",
                  },
                },
                description: "Specific attributes related to the Factor.",
              },
              provider: {
                type: "string",
                optional: true,
                description: "Provider for the Factor.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status of the Factor.",
              },
              vendorName: {
                type: "string",
                optional: true,
                description:
                  "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "unenrollFactor",
      description:
        "Unenrolls an existing Factor for the specified user. This allows the user to enroll a new Factor.\n\nNote: If you unenroll the push or the signed_nonce Factors, Okta also unenrolls any other totp, signed_nonce, or Okta Verify push Factors associated with the user.",
      jsDoc:
        "\n/** \n*@method unenrollFactor \n*@desc This is an openAPI method. Unenrolls an existing Factor for the specified user. This allows the user to enroll a new Factor.\n\nNote: If you unenroll the push or the signed_nonce Factors, Okta also unenrolls any other totp, signed_nonce, or Okta Verify push Factors associated with the user. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.factorId \n * @param {boolean} parameters.removeRecoveryEnrollment \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            factorId: {
              type: "string",
              optional: false,
            },
            removeRecoveryEnrollment: {
              type: "boolean",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "activateFactor",
      description:
        "Activates a Factor. Some Factors (call, email, push, sms, token:software:totp, u2f, and webauthn) require activation to complete the enrollment process.\n\nOkta enforces a rate limit of five activation attempts within five minutes. After a user exceeds the rate limit, Okta returns an error message.\n\nNote: If the user exceeds their SMS, call, or email factor activate rate limit, then an OTP resend request (/api/v1/users/{userId}/factors/{factorId}/resend) isn't allowed for the same Factor.",
      jsDoc:
        "\n/** \n*@method activateFactor \n*@desc This is an openAPI method. Activates a Factor. Some Factors (call, email, push, sms, token:software:totp, u2f, and webauthn) require activation to complete the enrollment process.\n\nOkta enforces a rate limit of five activation attempts within five minutes. After a user exceeds the rate limit, Okta returns an error message.\n\nNote: If the user exceeds their SMS, call, or email factor activate rate limit, then an OTP resend request (/api/v1/users/{userId}/factors/{factorId}/resend) isn't allowed for the same Factor. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.factorId \n * @param {string} parameters.passCode - OTP for the current time window\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            factorId: {
              type: "string",
              optional: false,
            },
            passCode: {
              type: "string",
              optional: true,
              description: "OTP for the current time window",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was enrolled.",
              },
              factorType: {
                type: "string",
                optional: true,
                description: "Type of Factor.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Factor.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  phoneExtension: {
                    type: "string",
                    optional: true,
                    description: "Extension of the associated phoneNumber.",
                  },
                  phoneNumber: {
                    type: "string",
                    optional: true,
                    description:
                      "Phone number of the Factor. Format phone numbers to use the E.164 standard.",
                  },
                },
                description: "Specific attributes related to the Factor.",
              },
              provider: {
                type: "string",
                optional: true,
                description: "Provider for the Factor.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status of the Factor.",
              },
              vendorName: {
                type: "string",
                optional: true,
                description:
                  "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "resendFactorEnrollment",
      description:
        "Resends an sms, call, or email factor challenge as part of an enrollment flow.\n\nFor call and sms factors, Okta enforces a rate limit of one OTP challenge per device every 30 seconds. You can configure your sms and call factors to use a third-party telephony provider. See the Telephony inline hook reference. Okta round-robins between SMS providers with every resend request to help ensure delivery of an SMS and Call OTPs across different carriers.\n\nNote: Resend operations aren't allowed after a factor exceeds the activation rate limit. See Activate a Factor.",
      jsDoc:
        "\n/** \n*@method resendFactorEnrollment \n*@desc This is an openAPI method. Resends an sms, call, or email factor challenge as part of an enrollment flow.\n\nFor call and sms factors, Okta enforces a rate limit of one OTP challenge per device every 30 seconds. You can configure your sms and call factors to use a third-party telephony provider. See the Telephony inline hook reference. Okta round-robins between SMS providers with every resend request to help ensure delivery of an SMS and Call OTPs across different carriers.\n\nNote: Resend operations aren't allowed after a factor exceeds the activation rate limit. See Activate a Factor. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.factorId \n * @param {string} parameters.templateId \n * @param {string} parameters.factorType - Type of Factor. Possible values include 'call', 'sms', 'token:hotp', 'token:software:totp', 'web', 'webauthn'.\n * @param {object} parameters.profile - Specific attributes related to the Factor.\n * @param {string} parameters.profile.phoneExtension - Extension of the associated phone number. Up to 15 characters.\n * @param {string} parameters.profile.phoneNumber - Phone number of the Factor. Format phone numbers to use the E.164 standard.\n * @param {string} parameters.provider - Provider for the Factor. Possible values include 'OKTA', 'CUSTOM', 'DUO', 'FIDO', 'GOOGLE', 'RSA', 'SYMANTEC', 'YUBICO'.\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            factorId: {
              type: "string",
              optional: false,
            },
            templateId: {
              type: "string",
              optional: true,
            },
            factorType: {
              type: "string",
              optional: true,
              description:
                "Type of Factor. Possible values include 'call', 'sms', 'token:hotp', 'token:software:totp', 'web', 'webauthn'.",
            },
            profile: {
              type: "object",
              schema: {
                phoneExtension: {
                  type: "string",
                  optional: true,
                  description:
                    "Extension of the associated phone number. Up to 15 characters.",
                },
                phoneNumber: {
                  type: "string",
                  optional: true,
                  description:
                    "Phone number of the Factor. Format phone numbers to use the E.164 standard.",
                },
              },
              description: "Specific attributes related to the Factor.",
            },
            provider: {
              type: "string",
              optional: true,
              description:
                "Provider for the Factor. Possible values include 'OKTA', 'CUSTOM', 'DUO', 'FIDO', 'GOOGLE', 'RSA', 'SYMANTEC', 'YUBICO'.",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was enrolled.",
              },
              factorType: {
                type: "string",
                optional: true,
                description: "Type of Factor.",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Factor.",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the Factor was last updated.",
              },
              profile: {
                type: "object",
                schema: {
                  phoneExtension: {
                    type: "string",
                    optional: true,
                    description: "Extension of the associated phoneNumber.",
                  },
                  phoneNumber: {
                    type: "string",
                    optional: true,
                    description:
                      "Phone number of the Factor. Format phone numbers to use the E.164 standard.",
                  },
                },
                description: "Specific attributes related to the Factor.",
              },
              provider: {
                type: "string",
                optional: true,
                description: "Provider for the Factor.",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status of the Factor.",
              },
              vendorName: {
                type: "string",
                optional: true,
                description:
                  "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
              },
              _embedded: {
                type: "object",
                schema: {},
                description: "Embedded resources.",
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveFactorTransactionStatus",
      description:
        "Retrieves the status of a push Factor verification transaction",
      jsDoc:
        "\n/** \n*@method retrieveFactorTransactionStatus \n*@desc This is an openAPI method. Retrieves the status of a push Factor verification transaction \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.factorId \n * @param {string} parameters.transactionId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            factorId: {
              type: "string",
              optional: false,
            },
            transactionId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              factorResult: {
                type: "string",
                optional: true,
                description: "Result of the verification transaction",
              },
              profile: {
                type: "object",
                schema: {
                  credentialId: {
                    type: "string",
                    optional: true,
                    description: "ID for the Factor credential",
                  },
                },
              },
              _links: {
                type: "object",
                schema: {
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "verifyFactor",
      description:
        "Verifies an OTP for a Factor. Some Factors (call, email, push, sms, u2f, and webauthn) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor.\n\nNote: To verify a push factor, use the poll link returned when you issue the challenge. See Retrieve a Factor Transaction Status.",
      jsDoc:
        "\n/** \n*@method verifyFactor \n*@desc This is an openAPI method. Verifies an OTP for a Factor. Some Factors (call, email, push, sms, u2f, and webauthn) must first issue a challenge before you can verify the Factor. Do this by making a request without a body. After a challenge is issued, make another request to verify the Factor.\n\nNote: To verify a push factor, use the poll link returned when you issue the challenge. See Retrieve a Factor Transaction Status. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.factorId \n * @param {string} parameters.templateId \n * @param {integer} parameters.tokenLifetimeSeconds \n * @param {string} parameters.X-Forwarded-For \n * @param {string} parameters.User-Agent \n * @param {string} parameters.Accept-Language \n * @param {string} parameters.passCode - OTP for the current time window\n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            factorId: {
              type: "string",
              optional: false,
            },
            templateId: {
              type: "string",
              optional: true,
            },
            tokenLifetimeSeconds: {
              type: "integer",
              optional: true,
            },
            '"X-Forwarded-For"': {
              type: "string",
              optional: true,
            },
            '"User-Agent"': {
              type: "string",
              optional: true,
            },
            '"Accept-Language"': {
              type: "string",
              optional: true,
            },
            passCode: {
              type: "string",
              optional: true,
              description: "OTP for the current time window",
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              expiresAt: {
                type: "string",
                optional: true,
                description: "Timestamp when the verification expires",
              },
              factorMessage: {
                type: "string",
                optional: true,
                description: "Optional display message for Factor verification",
              },
              factorResult: {
                type: "string",
                optional: true,
                description: "Result of a Factor verification",
              },
              _embedded: {
                type: "object",
                schema: {},
              },
              _links: {
                type: "object",
                schema: {
                  activate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  cancel: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  deactivate: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  enroll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  factor: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  poll: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  qrcode: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  question: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  resend: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  send: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  user: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  verify: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listGrantsForClient",
      description: "Lists all Grants for a specified User and client",
      jsDoc:
        "\n/** \n*@method listGrantsForClient \n*@desc This is an openAPI method. Lists all Grants for a specified User and client \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.clientId \n * @param {string} parameters.expand \n * @param {string} parameters.after \n * @param {integer} parameters.limit \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            clientId: {
              type: "string",
              optional: false,
            },
            expand: {
              type: "string",
              optional: true,
            },
            after: {
              type: "string",
              optional: true,
            },
            limit: {
              type: "integer",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              issuer: {
                type: "string",
                optional: false,
                description:
                  "The issuer of your org authorization server. This is typically your Okta domain.",
              },
              scopeId: {
                type: "string",
                optional: false,
                description:
                  "The name of the Okta scope for which consent is granted",
              },
              clientId: {
                type: "string",
                optional: true,
                description: "Client ID of the app integration",
              },
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the object was created",
              },
              createdBy: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                    description: "ID of the User who created the object",
                  },
                  type: {
                    type: "string",
                    optional: true,
                    description: "Type of user who created the object",
                  },
                },
                description: "User that created the object",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Grant object",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the object was last updated",
              },
              source: {
                type: "string",
                optional: true,
                description: "User type source that granted consent",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status",
              },
              userId: {
                type: "string",
                optional: true,
                description:
                  "User ID that granted consent (if source is END_USER)",
              },
              _embedded: {
                type: "object",
                schema: {
                  scope: {
                    type: "object",
                    schema: {
                      id: {
                        type: "string",
                        optional: false,
                        description:
                          "The name of the Okta scope for which consent is granted",
                      },
                    },
                    description: "Scope details",
                  },
                },
                description: "Embedded resources related to the Grant",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  app: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  client: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
                description:
                  "Specifies link relations (see Web Linking) available using the JSON Hypertext Application Language specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "revokeAllGrantsForClient",
      description: "Revokes all Grants for the specified User and client",
      jsDoc:
        "\n/** \n*@method revokeAllGrantsForClient \n*@desc This is an openAPI method. Revokes all Grants for the specified User and client \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.clientId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            clientId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listAllUserGrants",
      description: "Lists all Grants for the specified user",
      jsDoc:
        "\n/** \n*@method listAllUserGrants \n*@desc This is an openAPI method. Lists all Grants for the specified user \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.scopeId \n * @param {string} parameters.expand \n * @param {string} parameters.after \n * @param {integer} parameters.limit \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            scopeId: {
              type: "string",
              optional: true,
            },
            expand: {
              type: "string",
              optional: true,
            },
            after: {
              type: "string",
              optional: true,
            },
            limit: {
              type: "integer",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              issuer: {
                type: "string",
                optional: false,
                description:
                  "The issuer of your org authorization server. This is typically your Okta domain.",
              },
              scopeId: {
                type: "string",
                optional: false,
                description:
                  "The name of the Okta scope for which consent is granted",
              },
              clientId: {
                type: "string",
                optional: true,
                description: "Client ID of the app integration",
              },
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the object was created",
              },
              createdBy: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                    description: "ID of the User who created the object",
                  },
                  type: {
                    type: "string",
                    optional: true,
                    description: "Type of user who created the object",
                  },
                },
                description: "User that created the object",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Grant object",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the object was last updated",
              },
              source: {
                type: "string",
                optional: true,
                description: "User type source that granted consent",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status",
              },
              userId: {
                type: "string",
                optional: true,
                description:
                  "User ID that granted consent (if source is END_USER)",
              },
              _embedded: {
                type: "object",
                schema: {
                  scope: {
                    type: "object",
                    schema: {
                      id: {
                        type: "string",
                        optional: false,
                        description:
                          "The name of the Okta scope for which consent is granted",
                      },
                    },
                    description: "Scope details",
                  },
                },
                description: "Embedded resources related to the Grant",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  app: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  client: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
                description:
                  "Specifies link relations (see Web Linking) available using the JSON Hypertext Application Language specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "revokeAllUserGrants",
      description: "Revokes all Grants for a specified User",
      jsDoc:
        "\n/** \n*@method revokeAllUserGrants \n*@desc This is an openAPI method. Revokes all Grants for a specified User \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "retrieveUserGrant",
      description: "Retrieves a Grant for the specified User",
      jsDoc:
        "\n/** \n*@method retrieveUserGrant \n*@desc This is an openAPI method. Retrieves a Grant for the specified User \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.grantId \n * @param {string} parameters.expand \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            grantId: {
              type: "string",
              optional: false,
            },
            expand: {
              type: "string",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              issuer: {
                type: "string",
                optional: false,
                description:
                  "The issuer of your org authorization server. This is typically your Okta domain.",
              },
              scopeId: {
                type: "string",
                optional: false,
                description:
                  "The name of the Okta scope for which consent is granted",
              },
              clientId: {
                type: "string",
                optional: true,
                description: "Client ID of the app integration",
              },
              created: {
                type: "string",
                optional: true,
                description: "Timestamp when the object was created",
              },
              createdBy: {
                type: "object",
                schema: {
                  id: {
                    type: "string",
                    optional: true,
                    description: "ID of the User who created the object",
                  },
                  type: {
                    type: "string",
                    optional: true,
                    description: "Type of user who created the object",
                  },
                },
                description: "User that created the object",
              },
              id: {
                type: "string",
                optional: true,
                description: "ID of the Grant object",
              },
              lastUpdated: {
                type: "string",
                optional: true,
                description: "Timestamp when the object was last updated",
              },
              source: {
                type: "string",
                optional: true,
                description: "User type source that granted consent",
              },
              status: {
                type: "string",
                optional: true,
                description: "Status",
              },
              userId: {
                type: "string",
                optional: true,
                description:
                  "User ID that granted consent (if source is END_USER)",
              },
              _embedded: {
                type: "object",
                schema: {
                  scope: {
                    type: "object",
                    schema: {
                      id: {
                        type: "string",
                        optional: false,
                        description:
                          "The name of the Okta scope for which consent is granted",
                      },
                    },
                    description: "Scope details",
                  },
                },
                description: "Embedded resources related to the Grant",
              },
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  app: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                  client: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
                description:
                  "Specifies link relations (see Web Linking) available using the JSON Hypertext Application Language specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "revokeUserGrant",
      description: "Revokes one Grant for a specified User",
      jsDoc:
        "\n/** \n*@method revokeUserGrant \n*@desc This is an openAPI method. Revokes one Grant for a specified User \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {string} parameters.grantId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            grantId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "reactivateUser",
      description:
        "Reactivates a user. This operation can only be performed on Users with a PROVISIONED or RECOVERY status. Reactivates the user and restarts the activation workflow if not completed previously. If sendEmail is false, returns an activation link for the user to set up their account. Users without a password must complete the Reset Password and MFA enrollment steps to transition to ACTIVE status.",
      jsDoc:
        "\n/** \n*@method reactivateUser \n*@desc This is an openAPI method. Reactivates a user. This operation can only be performed on Users with a PROVISIONED or RECOVERY status. Reactivates the user and restarts the activation workflow if not completed previously. If sendEmail is false, returns an activation link for the user to set up their account. Users without a password must complete the Reset Password and MFA enrollment steps to transition to ACTIVE status. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.sendEmail \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            sendEmail: {
              type: "boolean",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              activationToken: {
                type: "string",
                optional: true,
                description:
                  "Token received as part of an activation user request. Used for login or custom activation link if a password was not set.",
              },
              activationUrl: {
                type: "string",
                optional: true,
                description:
                  "Activation link for the user to set up their account if sendEmail is false.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "activateUser",
      description:
        "Activates a User. This operation can only be performed on Users with a STAGED or DEPROVISIONED status. Activation is an asynchronous operation. The User will have the `transitioningToStatus` property set to `ACTIVE` during activation, indicating that the user hasn't completed the asynchronous operation yet. The User will have an `ACTIVE` status once the activation process completes. Users without a password must complete the welcome flow by visiting the activation link to complete the transition to `ACTIVE` status. Note: For branded activation emails, use the custom domain associated with the brand (e.g., change `subdomain.okta.com` to `custom.domain.one`). For Optional Password, visiting the activation link is optional if not required to enroll a password.",
      jsDoc:
        "\n/** \n*@method activateUser \n*@desc This is an openAPI method. Activates a User. This operation can only be performed on Users with a STAGED or DEPROVISIONED status. Activation is an asynchronous operation. The User will have the `transitioningToStatus` property set to `ACTIVE` during activation, indicating that the user hasn't completed the asynchronous operation yet. The User will have an `ACTIVE` status once the activation process completes. Users without a password must complete the welcome flow by visiting the activation link to complete the transition to `ACTIVE` status. Note: For branded activation emails, use the custom domain associated with the brand (e.g., change `subdomain.okta.com` to `custom.domain.one`). For Optional Password, visiting the activation link is optional if not required to enroll a password. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.sendEmail \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            sendEmail: {
              type: "boolean",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              activationToken: {
                type: "string",
                optional: true,
                description:
                  "Token received as part of an activation user request. If a password was set before activation, the user must sign in with their password or the activationToken, not the activation link.",
              },
              activationUrl: {
                type: "string",
                optional: true,
                description:
                  "Activation link for the user to set up their account if `sendEmail` is false. The activation token can be used to create a custom activation link.",
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deactivateUser",
      description:
        "Deactivates a User. This operation can only be performed on Users that do not have a DEPROVISIONED status. The User's `transitioningToStatus` property is `DEPROVISIONED` during deactivation to indicate that the user hasn't completed the asynchronous operation. The User's status is `DEPROVISIONED` when the deactivation process is complete. Important: Deactivating a User is a destructive operation. The User is deprovisioned from all assigned apps, which might destroy their data such as email or files. This action cannot be recovered! You can also perform user deactivation asynchronously. To invoke asynchronous user deactivation, pass an HTTP header `Prefer: respond-async` with the request.",
      jsDoc:
        "\n/** \n*@method deactivateUser \n*@desc This is an openAPI method. Deactivates a User. This operation can only be performed on Users that do not have a DEPROVISIONED status. The User's `transitioningToStatus` property is `DEPROVISIONED` during deactivation to indicate that the user hasn't completed the asynchronous operation. The User's status is `DEPROVISIONED` when the deactivation process is complete. Important: Deactivating a User is a destructive operation. The User is deprovisioned from all assigned apps, which might destroy their data such as email or files. This action cannot be recovered! You can also perform user deactivation asynchronously. To invoke asynchronous user deactivation, pass an HTTP header `Prefer: respond-async` with the request. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n * @param {boolean} parameters.sendEmail \n * @param {string} parameters.Prefer \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
            sendEmail: {
              type: "boolean",
              optional: true,
            },
            Prefer: {
              type: "string",
              optional: true,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "resetFactors",
      description:
        "Resets all factors for the specified User. All MFA factor enrollments return to the unenrolled state. The User's status remains ACTIVE. This link is present only if the User is currently enrolled in one or more MFA factors.",
      jsDoc:
        "\n/** \n*@method resetFactors \n*@desc This is an openAPI method. Resets all factors for the specified User. All MFA factor enrollments return to the unenrolled state. The User's status remains ACTIVE. This link is present only if the User is currently enrolled in one or more MFA factors. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "suspendUser",
      description:
        "Suspends a user. This operation can only be performed on Users with an ACTIVE status. The User has a SUSPENDED status when the process completes. Suspended users can't sign in to Okta. They can only be unsuspended or deactivated. Their group and app assignments are retained.",
      jsDoc:
        "\n/** \n*@method suspendUser \n*@desc This is an openAPI method. Suspends a user. This operation can only be performed on Users with an ACTIVE status. The User has a SUSPENDED status when the process completes. Suspended users can't sign in to Okta. They can only be unsuspended or deactivated. Their group and app assignments are retained. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "unlockUser",
      description:
        "Unlocks a User with a LOCKED_OUT status or unlocks a User with an ACTIVE status that is blocked from unknown devices. Unlocked Users have an ACTIVE status and can sign in with their current password. Note: This operation works with Okta-sourced users. It doesn't support directory-sourced accounts such as Active Directory.",
      jsDoc:
        "\n/** \n*@method unlockUser \n*@desc This is an openAPI method. Unlocks a User with a LOCKED_OUT status or unlocks a User with an ACTIVE status that is blocked from unknown devices. Unlocked Users have an ACTIVE status and can sign in with their current password. Note: This operation works with Okta-sourced users. It doesn't support directory-sourced accounts such as Active Directory. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "unsuspendUser",
      description:
        "Unsuspends a user and returns them to the ACTIVE state. This operation can only be performed on users that have a SUSPENDED status.",
      jsDoc:
        "\n/** \n*@method unsuspendUser \n*@desc This is an openAPI method. Unsuspends a user and returns them to the ACTIVE state. This operation can only be performed on users that have a SUSPENDED status. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "assignLinkedObjectPrimary",
      description:
        "Assigns the first User as the associated and the second User as the primary for the specified relationship. If the first User is already associated with a different primary for this relationship, the previous link is removed. A Linked Object relationship can specify only one primary User for an associated User.",
      jsDoc:
        "\n/** \n*@method assignLinkedObjectPrimary \n*@desc This is an openAPI method. Assigns the first User as the associated and the second User as the primary for the specified relationship. If the first User is already associated with a different primary for this relationship, the previous link is removed. A Linked Object relationship can specify only one primary User for an associated User. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userIdOrLogin \n * @param {string} parameters.primaryRelationshipName \n * @param {string} parameters.primaryUserId \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userIdOrLogin: {
              type: "string",
              optional: false,
            },
            primaryRelationshipName: {
              type: "string",
              optional: false,
            },
            primaryUserId: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "listLinkedObjects",
      description:
        "Lists either the self link for the primary User or all associated Users in the relationship specified by relationshipName. If the specified User isn't associated in any relationship, an empty array is returned. Use 'me' instead of id to specify the current session User.",
      jsDoc:
        "\n/** \n*@method listLinkedObjects \n*@desc This is an openAPI method. Lists either the self link for the primary User or all associated Users in the relationship specified by relationshipName. If the specified User isn't associated in any relationship, an empty array is returned. Use 'me' instead of id to specify the current session User. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userIdOrLogin \n * @param {string} parameters.relationshipName \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Array} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userIdOrLogin: {
              type: "string",
              optional: false,
            },
            relationshipName: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
            schema: {
              _links: {
                type: "object",
                schema: {
                  self: {
                    type: "object",
                    schema: {
                      href: {
                        type: "string",
                        optional: false,
                        description: "Link URI",
                      },
                      hints: {
                        type: "object",
                        schema: {
                          allowedMethods: {
                            type: "array",
                            items: {
                              type: "string",
                            },
                            description: "HTTP verbs allowed for the link",
                          },
                        },
                        description:
                          "Describes allowed HTTP verbs for the href",
                      },
                      name: {
                        type: "string",
                        optional: true,
                        description: "Link name",
                      },
                      templated: {
                        type: "boolean",
                        optional: true,
                        description:
                          "Indicates whether the Link Object's href property is a URI template.",
                      },
                      type: {
                        type: "string",
                        optional: true,
                        description:
                          "The media type of the link. If omitted, it is implicitly application/json.",
                      },
                    },
                  },
                },
              },
            },
          },
          headers: {
            type: "object",
          },
        },
      },
    },
    {
      name: "deleteLinkedObject",
      description:
        "Deletes any existing relationship between the associated and primary user. For the associated User, this is specified by the ID. The primary name specifies the relationship. The operation is successful if the relationship is deleted or if the specified User isn't in the associated relationship for any instance of the specified primary and thus, no relationship is found.",
      jsDoc:
        "\n/** \n*@method deleteLinkedObject \n*@desc This is an openAPI method. Deletes any existing relationship between the associated and primary user. For the associated User, this is specified by the ID. The primary name specifies the relationship. The operation is successful if the relationship is deleted or if the specified User isn't in the associated relationship for any instance of the specified primary and thus, no relationship is found. \n * @param {object} parameters - Operation parameters\n * @param {string} parameters.userIdOrLogin \n * @param {string} parameters.relationshipName \n \n*@returns {Object} The response object containing:\n*   - {string} statusCode - The HTTP status code of the response.\n*   - {Object} content - The main content of the response.\n*   - {Object} headers - The headers associated with the response.\n*/",
      params: [
        {
          type: "object",
          schema: {
            userIdOrLogin: {
              type: "string",
              optional: false,
            },
            relationshipName: {
              type: "string",
              optional: false,
            },
          },
          description: "Operation parameters",
        },
      ],
      return: {
        type: "object",
        schema: {
          statusCode: {
            type: "number",
          },
          content: {
            type: "object",
          },
          headers: {
            type: "object",
          },
        },
      },
    },
  ],
};
